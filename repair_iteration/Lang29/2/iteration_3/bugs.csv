bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  ],  limit  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  ],  limit  +  1);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  ],  limit  +  1);	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit);    	non-compiled	[CE]  ';'  expected	10	None	replace
2	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1],  limit);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1],  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1],  limit);	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit);    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1,  limit);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1,  limit);	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit);    	non-compiled	[CE]  ']'  expected	10	None	replace
4	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [version.length()  -  1];  [CE]  cannot  find  symbol  VersionUtils  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [version.length()  -  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  [version.length()  -  1];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    -    1];    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	53	None	replace
5	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  1];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  1];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    -    1];    	non-compiled	[CE]  ']'  expected	53	None	replace
6	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff,  version;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff,  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff,  version;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    &    0xff;    	non-compiled	[CE]  ';'  expected	28	None	replace
7	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  /  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  /  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  /  1];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    +    1];    	non-compiled	[CE]  incompatible  types	11	None	replace
8	[BUG]  [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  ';'  expected	22	None	replace
9	[BUG]  [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1L;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1L;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
10	[BUG]  [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  limit;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
11	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  version;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY,  version;	  return    ArrayUtils.EMPTY_INT_ARRAY,    limit;    	non-compiled	[CE]  ';'  expected	69	None	replace
12	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit;	  return    ArrayUtils.EMPTY_INT_ARRAY,    limit;    	non-compiled	[CE]  ';'  expected	69	None	replace
13	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  version  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  version  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY,  version  +  1;	  return    ArrayUtils.EMPTY_INT_ARRAY,    limit    +    1;    	non-compiled	[CE]  ';'  expected	44	None	replace
14	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  2;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  2;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  2;	  return    ArrayUtils.EMPTY_INT_ARRAY,    limit    +    1;    	non-compiled	[CE]  ';'  expected	44	None	replace
15	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  *  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  *  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY,  limit  *  1;	  return    ArrayUtils.EMPTY_INT_ARRAY,    limit    +    1;    	non-compiled	[CE]  ';'  expected	44	None	replace
16	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  version,  limit);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0],  version,  limit);	  return    ArrayUtils.EMPTY_INT_ARRAY    [0],    version);    	non-compiled	[CE]  ';'  expected	80	None	replace
17	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [0],  version);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [0],  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  [0],  version);	  return    ArrayUtils.EMPTY_INT_ARRAY    [0],    version);    	non-compiled	[CE]  ';'  expected	80	None	replace
18	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    If(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  IllegalArgumentException  	33	2	replace
19	[BUG]  [BUGGY]  if(version  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    If(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  IllegalArgumentException  	33	2	replace
20	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
21	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	72	None	replace
22	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	72	None	replace
23	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
24	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  version,  limit)];  [CE]  no  suitable  method  found  for  min(int,String,int)  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  version,  limit)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  version,  limit)];	  int[]    ints    =    new    int[Math.min(limit,    version)];    	non-compiled	[CE]  no  suitable  method  found  for  min(int,String,int)	62	None	replace
25	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0,  limit)];  [CE]  no  suitable  method  found  for  min(int,int,int)  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0,  limit)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  0,  limit)];	  int[]    ints    =    new    int[Math.min(limit,    version)];    	non-compiled	[CE]  no  suitable  method  found  for  min(int,int,int)	62	None	replace
26	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit,  length)];  [CE]  cannot  find  symbol  length  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit,  length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit,  length)];	  int[]    ints    =    new    int[Math.min(limit,    version)];    	non-compiled	[CE]  cannot  find  symbol  length	62	None	replace
27	[BUG]  [BUGGY]  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    version);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ints,  0,  version.length  -  1);  [CE]  cannot  find  symbol  ints  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ints,  0,  version.length  -  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ints,  0,  version.length  -  1);	  System.arraycopy(version,    0,    ints,    0,    limit    -    1);    	non-compiled	[CE]  cannot  find  symbol  ints	70	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ints,  1,  limit  -  1);  [CE]  cannot  find  symbol  ints  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ints,  1,  limit  -  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ints,  1,  limit  -  1);	  System.arraycopy(version,    0,    ints,    0,    limit    -    1);    	non-compiled	[CE]  cannot  find  symbol  ints	70	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
31	[BUG]  [BUGGY]  if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
32	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version!=  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  NullPointerException  	66	2	replace
33	[BUG]  [BUGGY]  if(version!=  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  NullPointerException  	66	2	replace
34	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ints,  1,  limit  +  1);  [CE]  cannot  find  symbol  ints  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ints,  1,  limit  +  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ints,  1,  limit  +  1);	  System.arraycopy(version,    0,    ints,    1,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	8	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ints,  1,  version.length);  [CE]  cannot  find  symbol  ints  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ints,  1,  version.length);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ints,  1,  version.length);	  System.arraycopy(version,    0,    ints,    1,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	8	None	replace
36	[BUG]  [BUGGY]  if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRA  [CE]  :  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRA  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRA	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  :  expected	13	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(version,  2,  ints,  0,  limit);  [CE]  cannot  find  symbol  ints  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  2,  ints,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  2,  ints,  0,  limit);	  System.arraycopy(version,    1,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	75	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(version,  1,  ints,  0,  limit  -  1);  [CE]  cannot  find  symbol  ints  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  1,  ints,  0,  limit  -  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  1,  ints,  0,  limit  -  1);	  System.arraycopy(version,    1,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	75	None	replace
39	[BUG]  [BUGGY]  if(version!=  null)  {  aughtExceptionHandler.handleUnsupportedOperation(version,  limit);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  aughtExceptionHandler.handleUnsupportedOperation(version,  limit);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  aughtExceptionHandler.handleUnsupportedOperation(version,  limit);  }	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	59	None	replace
40	[BUG]  [BUGGY]  if(version  ==  null)  {  aughtExceptionHandler.handleUnsupportedOperation(version,  limit);  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  aughtExceptionHandler.handleUnsupportedOperation(version,  limit);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  aughtExceptionHandler.handleUnsupportedOperation(version,  limit);  }	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	59	None	replace
41	[BUG]  [BUGGY]  JSExceptionHandler.handleUnsupportedOperation(version,  limit);  [CE]  cannot  find  symbol  JSExceptionHandler  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JSExceptionHandler.handleUnsupportedOperation(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JSExceptionHandler.handleUnsupportedOperation(version,  limit);	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol  JSExceptionHandler	59	None	replace
42	[BUG]  [BUGGY]  GundingExceptionHandler.handleUnsupportedOperation(version,  limit);  [CE]  cannot  find  symbol  GundingExceptionHandler  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  GundingExceptionHandler.handleUnsupportedOperation(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	GundingExceptionHandler.handleUnsupportedOperation(version,  limit);	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol  GundingExceptionHandler	59	None	replace
43	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  	non-compiled	[CE]  unreachable  statement	24	None	add
44	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    int  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  	non-compiled	[CE]  not  a  statement	24	None	add
45	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  	non-compiled	[CE]  unreachable  statement	24	None	add
46	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
47	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
49	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
50	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_	  	non-compiled	[CE]  ';'  expected	29	None	add
51	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT	  	non-compiled	[CE]  ';'  expected	29	None	add
52	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPT  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPT  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPT	  	non-compiled	[CE]  ';'  expected	29	None	add
53	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.	  	non-compiled	[CE]  <identifier>  expected	29	None	add
54	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  NullPointerException  	49	2	replace
55	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  NullPointerException  	49	2	replace
56	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	49	None	replace
57	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	49	None	replace
58	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  NullPointerException  	77	2	replace
59	[BUG]  [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  NullPointerException  	77	2	replace
60	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[]  <  0)ArrayUtils.EMPTY_INT_ARRAY;  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[]  <  0)ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[]  <  0)ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  '.class'  expected	77	None	replace
61	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  '.class'  expected	77	None	replace
62	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.bad.version ",  version,  limit);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.bad.version ",  version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	aughtExceptionHandler.throwAssertionError( "msg.bad.version ",  version,  limit);	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	32	None	replace
63	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(limit  +  1);  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(limit  +  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(limit  +  1);	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(limit);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	35	None	replace
64	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(version,  limit);  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(version,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(version,  limit);	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(limit);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	35	None	replace
65	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
66	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
67	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	73	None	replace
68	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	73	None	replace
69	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY;  [CE]  cannot  find  symbol  VersionUtils  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY;	  return    VersionUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	41	None	replace
71	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  /  1;  [CE]  cannot  find  symbol  VersionUtils  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  /  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  /  1;	  return    VersionUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	41	None	replace
72	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
73	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
74	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  0;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  0;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  int[]  ints  =  new  int[Math.min(limit,  limit)];  [CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)  [FE]    NullPointerException    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  int[]  ints  =  new  int[Math.min(limit,  limit)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]    ints    =    new    int[Math.min(limit,    limit)];    int[]  ints  =  new  int[Math.min(limit,  limit)];	  	non-compiled	[CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)	18	None	add
76	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  Integer[]  ints  =  new  int[Math.min(limit,  limit)];  [CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)  [FE]      NullPointerException    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  Integer[]  ints  =  new  int[Math.min(limit,  limit)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]    ints    =    new    int[Math.min(limit,    limit)];    Integer[]  ints  =  new  int[Math.min(limit,  limit)];	  	non-compiled	[CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)	18	None	add
77	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  int[]  ints  =  new  int[Math.min(limit,  length)];  [CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)  [FE]        NullPointerException    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  int[]  ints  =  new  int[Math.min(limit,  length)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]    ints    =    new    int[Math.min(limit,    limit)];    int[]  ints  =  new  int[Math.min(limit,  length)];	  	non-compiled	[CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)	18	None	add
78	[BUG]  [BUGGY]  return  versions.length  +  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  cannot  find  symbol  versions  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  versions.length  +  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  versions.length  +  ArrayUtils.EMPTY_INT_ARRAY;	  return    limit    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  versions	47	None	replace
79	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  +  version;  [CE]  cannot  find  symbol  VersionUtils  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  +  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  +  version;	  return    limit    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	47	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
81	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
83	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	55	1	replace
84	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(Locale.getDefault());  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(Locale.getDefault());  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(Locale.getDefault());	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(version);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	36	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(versions,  0,  ints,  0,  limit  -  1);  [CE]  cannot  find  symbol  versions  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(versions,  0,  ints,  0,  limit  -  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(versions,  0,  ints,  0,  limit  -  1);	  System.arraycopy(versions,    0,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  versions	71	None	replace
86	[BUG]  [BUGGY]  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    int    return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	14	None	replace
87	[BUG]  [BUGGY]  int  return(version  ==  null)?  0  :  0;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int  return(version  ==  null)?  0  :  0;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int  return(version  ==  null)?  0  :  0;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    int    return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	14	None	replace
88	[BUG]  [BUGGY]  int  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    int    return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	14	None	replace
89	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit.length  -  1)];  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit.length  -  1)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit.length  -  1)];	  int[]    ints    =    new    int[Math.min(limit,    version.length    -    1)];    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
90	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length  -  1)];  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length  -  1)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  length  -  1)];	  int[]    ints    =    new    int[Math.min(limit,    version.length    -    1)];    	non-compiled	[CE]  cannot  find  symbol  length	76	None	replace
91	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit.length)];  [CE]  int  cannot  be  dereferenced  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit.length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit.length)];	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
92	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
93	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [0],  limit);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [0],  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  [0],  limit);	  return    VersionUtils.EMPTY_INT_ARRAY    [0];    	non-compiled	[CE]  ';'  expected	27	None	replace
94	[BUG]  [BUGGY]  return  version  +  limit;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version  +  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version  +  limit;	  return    version    +    1;    	non-compiled	[CE]  incompatible  types	42	None	replace
95	[BUG]  [BUGGY]  return  version,  limit  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version,  limit  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version,  limit  +  1;	  return    version    +    1;    	non-compiled	[CE]  ';'  expected	42	None	replace
96	[BUG]  [BUGGY]  return  version  +  2;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version  +  2;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version  +  2;	  return    version    +    1;    	non-compiled	[CE]  incompatible  types	42	None	replace
97	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(1);  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(1);	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(0);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	37	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
99	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
101	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
102	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_	  	non-compiled	[CE]  ';'  expected	31	None	add
103	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT	  	non-compiled	[CE]  ';'  expected	31	None	add
104	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPT  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPT  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPT	  	non-compiled	[CE]  ';'  expected	31	None	add
105	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_OBJECT_ARRAY;  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_OBJECT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_OBJECT_ARRAY;	  return(int[])ArrayUtils.EMPTY_ARRAY;    	non-compiled	[CE]  inconvertible  types	4	None	replace
106	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_OBJECT;  [CE]  cannot  find  symbol  EMPTY_OBJECT  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_OBJECT;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_OBJECT;	  return(int[])ArrayUtils.EMPTY_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY_OBJECT	4	None	replace
107	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_STRING;  [CE]  cannot  find  symbol  EMPTY_STRING  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_STRING;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_STRING;	  return(int[])ArrayUtils.EMPTY_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING	4	None	replace
108	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;	  return(version    ==    null)?    0    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	23	None	replace
109	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  VersionUtils.EMPTY_INT_ARRAY;  [CE]  cannot  find  symbol  VersionUtils  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  VersionUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  VersionUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    0    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	23	None	replace
110	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY,  limit;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY,  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY,  limit;	  return(version    ==    null)?    0    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	23	None	replace
111	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY(version,  limit);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY(version,  limit);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    limit);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
112	[BUG]  [BUGGY]  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  limit,  version);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  limit,  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  limit,  version);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    limit);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
113	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  (version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  (version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  (version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    (version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	16	None	replace
114	[BUG]  [BUGGY]  (version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  (version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    (version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	16	None	replace
115	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_ARRAY  +  2;  [CE]  cannot  find  symbol  EMPTY_ARRAY  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_ARRAY  +  2;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_ARRAY  +  2;	  return(int[])ArrayUtils.EMPTY_ARRAY    +    1;    	non-compiled	[CE]  cannot  find  symbol  EMPTY_ARRAY	61	None	replace
116	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_ARRAY  /  1;  [CE]  cannot  find  symbol  EMPTY_ARRAY  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_ARRAY  /  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_ARRAY  /  1;	  return(int[])ArrayUtils.EMPTY_ARRAY    +    1;    	non-compiled	[CE]  cannot  find  symbol  EMPTY_ARRAY	61	None	replace
117	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	50	None	replace
118	[BUG]  [BUGGY]  int[]  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	50	None	replace
119	[BUG]  [BUGGY]  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	Integer[]  ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	50	None	replace
120	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  	50	None	replace
121	[BUG]  [BUGGY]  StaxUtil.throwAssertionError( "msg.bad.version ",  version);  [CE]  cannot  find  symbol  StaxUtil  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  StaxUtil.throwAssertionError( "msg.bad.version ",  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	StaxUtil.throwAssertionError( "msg.bad.version ",  version);	  aughtExceptionHandler.throwAssertionError(   "msg.bad.version   ",    version);    	non-compiled	[CE]  cannot  find  symbol  StaxUtil	7	None	replace
122	[BUG]  [BUGGY]  JSErrorHandler.throwAssertionError( "msg.bad.version ",  version);  [CE]  cannot  find  symbol  JSErrorHandler  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JSErrorHandler.throwAssertionError( "msg.bad.version ",  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JSErrorHandler.throwAssertionError( "msg.bad.version ",  version);	  aughtExceptionHandler.throwAssertionError(   "msg.bad.version   ",    version);    	non-compiled	[CE]  cannot  find  symbol  JSErrorHandler	7	None	replace
123	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  +  version,  limit;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  +  version,  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  +  version,  limit;	  return    ArrayUtils.EMPTY_INT_ARRAY    +    version;    	non-compiled	[CE]  ';'  expected	43	None	replace
124	[BUG]  [BUGGY]  dépannage.handleMalformedException( " ");  [CE]  illegal  character:  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  dépannage.handleMalformedException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	dépannage.handleMalformedException( " ");	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  illegal  character:  	60	None	replace
125	[BUG]  [BUGGY]  user.handleMalformedException( " ");  [CE]  cannot  find  symbol  user  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  user.handleMalformedException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	user.handleMalformedException( " ");	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  user	60	None	replace
126	[BUG]  [BUGGY]  handleMalformedException( " ");  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  handleMalformedException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	handleMalformedException( " ");	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
127	[BUG]  [BUGGY]  return  version  *  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version  *  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version  *  ArrayUtils.EMPTY_INT_ARRAY;	  return    version    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	46	None	replace
128	[BUG]  [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
129	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
130	[BUG]  [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
131	[BUG]  [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPT  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPT  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPT	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	56	1	replace
133	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	56	1	replace
134	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRA  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRA  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRA	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
135	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return  Integer.parseInt(version);  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return  Integer.parseInt(version);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return  Integer.parseInt(version);  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  incompatible  types	56	None	replace
136	[BUG]  [BUGGY]  System.arraycopy(version,  10,  ints,  0,  limit  -  1);  [CE]  cannot  find  symbol  ints  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  10,  ints,  0,  limit  -  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  10,  ints,  0,  limit  -  1);	  System.arraycopy(version,    10,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	74	None	replace
137	[BUG]  [BUGGY]  System.arraycopy(version,  10,  ints,  0,  limit  +  1);  [CE]  cannot  find  symbol  ints  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  10,  ints,  0,  limit  +  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  10,  ints,  0,  limit  +  1);	  System.arraycopy(version,    10,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	74	None	replace
138	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  /  limit;  [CE]  cannot  find  symbol  VersionUtils  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  /  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  /  limit;	  return    VersionUtils.EMPTY_INT_ARRAY    +    limit;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	45	None	replace
139	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  -  limit;  [CE]  cannot  find  symbol  VersionUtils  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  -  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  -  limit;	  return    VersionUtils.EMPTY_INT_ARRAY    +    limit;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	45	None	replace
140	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  *  limit;  [CE]  cannot  find  symbol  VersionUtils  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  *  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  *  limit;	  return    VersionUtils.EMPTY_INT_ARRAY    +    limit;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	45	None	replace
141	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(size);  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(size);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(size);	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(length);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	67	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version  ==  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version    ==    null)    {    return    new    int[0];    }    if(version  ==  null)  {  return  new  int[0];  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
143	[BUG]  [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version  ==  null)  {  return  new  int[0];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version  ==  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return    new    int[0];    }    if(version  ==  null)  {  return  new  int[0];  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version!=  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version    ==    null)    {    return    new    int[0];    }    if(version!=  null)  {  return  new  int[0];  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
145	[BUG]  [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version!=  null)  {  return  new  int[0];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version!=  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return    new    int[0];    }    if(version!=  null)  {  return  new  int[0];  }	  	compilable	  [FE]  AssertionFailedError  	63	1	add
146	[BUG]  [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  If(version  ==  null)  {  return  new  int[0];  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  If(version  ==  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return    new    int[0];    }    If(version  ==  null)  {  return  new  int[0];  }	  	non-compiled	[CE]  ';'  expected	63	None	add
147	[BUG]  [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version  >=  null)  {  return  new  int[0];  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[0];  }  if(version  >=  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return    new    int[0];    }    if(version  >=  null)  {  return  new  int[0];  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	63	None	add
148	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    (int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	52	None	replace
149	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    (int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	52	None	replace
150	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length(),  limit  +  1];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length(),  limit  +  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length(),  limit  +  1];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length(),    limit];    	non-compiled	[CE]  ']'  expected	54	None	replace
151	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length(),  limit  -  1];  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length(),  limit  -  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length(),  limit  -  1];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length(),    limit];    	non-compiled	[CE]  ']'  expected	54	None	replace
152	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length(),    limit];    	non-compiled	[CE]  ']'  expected	54	None	replace
153	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =  new  int[Math.min(limit,  0)];	  int[]    ints    =    new    int[Math.min(limit,    limit)];    	compilable	  [FE]  NullPointerException  	19	2	replace
154	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0)];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  0)];	  int[]    ints    =    new    int[Math.min(limit,    limit)];    	compilable	  [FE]  NullPointerException  	19	2	replace
155	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  version;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  version;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  incompatible  types	1	None	replace
156	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  limit;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
157	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  ';'  expected	1	None	replace
158	[BUG]  [BUGGY]  MISSING_EXTENDS.throwAssertionError( "Missing  version: "  +  version);  [CE]  cannot  find  symbol  MISSING_EXTENDS  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  MISSING_EXTENDS.throwAssertionError( "Missing  version: "  +  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	MISSING_EXTENDS.throwAssertionError( "Missing  version: "  +  version);	  aughtExceptionHandler.throwAssertionError(   "Missing    version:   "    +    version);    	non-compiled	[CE]  cannot  find  symbol  MISSING_EXTENDS	6	None	replace
159	[BUG]  [BUGGY]  GundingExceptionHandler.throwAssertionError( "Missing  version: "  +  version);  [CE]  cannot  find  symbol  GundingExceptionHandler  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  GundingExceptionHandler.throwAssertionError( "Missing  version: "  +  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	GundingExceptionHandler.throwAssertionError( "Missing  version: "  +  version);	  aughtExceptionHandler.throwAssertionError(   "Missing    version:   "    +    version);    	non-compiled	[CE]  cannot  find  symbol  GundingExceptionHandler	6	None	replace
160	[BUG]  [BUGGY]  Mockito.throwAssertionError( "Missing  version: "  +  version);  [CE]  cannot  find  symbol  Mockito  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  Mockito.throwAssertionError( "Missing  version: "  +  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	Mockito.throwAssertionError( "Missing  version: "  +  version);	  aughtExceptionHandler.throwAssertionError(   "Missing    version:   "    +    version);    	non-compiled	[CE]  cannot  find  symbol  Mockito	6	None	replace
161	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  ],  limit  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  ],  limit  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  ],  limit  +  1;	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit;    	non-compiled	[CE]  ';'  expected	12	None	replace
162	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1],  limit;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1],  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  +  1],  limit;	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit;    	non-compiled	[CE]  ';'  expected	12	None	replace
163	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -1],  limit;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -1],  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -1],  limit;	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit;    	non-compiled	[CE]  ';'  expected	12	None	replace
164	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0);  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  0);	          int[]    ints    =    new    int[Math.min(limit,    version);    	non-compiled	[CE]  ']'  expected	68	None	replace
165	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0,  limit);  [CE]  ']'  expected  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  0,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  0,  limit);	          int[]    ints    =    new    int[Math.min(limit,    version);    	non-compiled	[CE]  ']'  expected	68	None	replace
166	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length);  [CE]  ']'  expected  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  length);	          int[]    ints    =    new    int[Math.min(limit,    version);    	non-compiled	[CE]  ']'  expected	68	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	2	1	add
168	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	2	1	add
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	2	1	add
170	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	2	1	add
171	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  If(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  If(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    If(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  	non-compiled	[CE]  ';'  expected	2	None	add
172	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  >=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None	add
173	[BUG]  [BUGGY]  [FE]  NumberFormatException  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    ints[j]    =    Integer.parseInt(version);    }    	compilable	  [FE]  NumberFormatException  	48	2	replace
174	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [FE]  NumberFormatException  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    ints[j]    =    Integer.parseInt(version);    }    	compilable	  [FE]  NumberFormatException  	48	2	replace
175	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [CE]  cannot  find  symbol  length  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    ints[j]    =    Integer.parseInt(version);    }    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
176	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  string.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [CE]  cannot  find  symbol  string  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  string.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  string.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    ints[j]    =    Integer.parseInt(version);    }    	non-compiled	[CE]  cannot  find  symbol  string	48	None	replace
177	[BUG]  [BUGGY]  Return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  Return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	Return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    Return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	65	None	replace
178	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  [CE]  cannot  find  symbol  strings  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  strings.length)];	  int[]    ints    =    new    int[Math.min(limit,    length)];    	non-compiled	[CE]  cannot  find  symbol  strings	20	None	replace
179	[BUG]  [BUGGY]  dépannage.handleMissingException( " ");  [CE]  illegal  character:  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  dépannage.handleMissingException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	dépannage.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  illegal  character:  	5	None	replace
180	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ",  limit);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingException( " ",  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	aughtExceptionHandler.handleMissingException( " ",  limit);	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	5	None	replace
181	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	System.arraycopy(version,  0,  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	compilable	  [FE]  NullPointerException  	9	2	replace
182	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit);  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ArrayUtils.EMPTY_INT_ARRAY,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	compilable	  [FE]  NullPointerException  	9	2	replace
183	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  version,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	System.arraycopy(version,  0,  version,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	compilable	  [FE]  NullPointerException  	9	2	replace
184	[BUG]  [BUGGY]  System.arraycopy(version,  0,  version,  0,  limit);  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  version,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  version,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	compilable	  [FE]  NullPointerException  	9	2	replace
185	[BUG]  [BUGGY]  int[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY    =(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	51	None	replace
186	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY    =(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	51	None	replace
187	[BUG]  [BUGGY]  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY    =(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	51	None	replace
188	[BUG]  [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY    =(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	51	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  new  int[0];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	return  new  int[0];	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
190	[BUG]  [BUGGY]  return  new  int[0];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  new  int[0];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  new  int[0];	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
191	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version!=  null)  {  return  new  int[0];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  NullPointerException  	64	2	replace
192	[BUG]  [BUGGY]  if(version!=  null)  {  return  new  int[0];  }  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return  new  int[0];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  NullPointerException  	64	2	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[1];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null)  {  return  new  int[1];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
194	[BUG]  [BUGGY]  if(version  ==  null)  {  return  new  int[1];  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[1];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return  new  int[1];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
195	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [0]  -  1;  [CE]  cannot  find  symbol  VersionUtils  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [0]  -  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  [0]  -  1;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    -    1;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	57	None	replace
196	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  /  1;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  /  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0]  /  1;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    -    1;    	non-compiled	[CE]  incompatible  types	57	None	replace
197	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.max(0,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
198	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  }  [CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)  [FE]              NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  }	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)	40	None	replace
199	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0],  limit);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0],  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0],  limit);	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    [0];    	non-compiled	[CE]  ';'  expected	81	None	replace
200	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0],  limit;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0],  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0],  limit;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    [0];    	non-compiled	[CE]  ';'  expected	81	None	replace
201	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff;  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    [0];    	non-compiled	[CE]  inconvertible  types	81	None	replace
202	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length))  +  1];  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length))  +  1];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length))  +  1];	  int[]    ints    =    new    int[Math.min(limit,    String.valueOf(version.length))];    	non-compiled	[CE]  cannot  find  symbol  length	21	None	replace
203	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length),  limit)];  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length),  limit)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length),  limit)];	  int[]    ints    =    new    int[Math.min(limit,    String.valueOf(version.length))];    	non-compiled	[CE]  cannot  find  symbol  length	21	None	replace
204	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length  -  1))];  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length  -  1))];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version.length  -  1))];	  int[]    ints    =    new    int[Math.min(limit,    String.valueOf(version.length))];    	non-compiled	[CE]  cannot  find  symbol  length	21	None	replace
205	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  System.arraycopy(version,  0,  ints,  0,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =  new  int[Math.min(limit,  limit)];  System.arraycopy(version,  0,  ints,  0,  limit);	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    0,    ints,    0,    limit);    	compilable	  [FE]  NullPointerException  	39	2	replace
206	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  System.arraycopy(version,  0,  ints,  0,  limit);  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  System.arraycopy(version,  0,  ints,  0,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  System.arraycopy(version,  0,  ints,  0,  limit);	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    0,    ints,    0,    limit);    	compilable	  [FE]  NullPointerException  	39	2	replace
207	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length)];  System.arraycopy(version,  0,  ints,  0,  limit);  [CE]  cannot  find  symbol  length  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  length)];  System.arraycopy(version,  0,  ints,  0,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  length)];  System.arraycopy(version,  0,  ints,  0,  limit);	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    0,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  length	39	None	replace
208	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  value.length)];  System.arraycopy(version,  0,  ints,  0,  limit);  [CE]  cannot  find  symbol  value  [FE]              NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  value.length)];  System.arraycopy(version,  0,  ints,  0,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  value.length)];  System.arraycopy(version,  0,  ints,  0,  limit);	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    0,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  value	39	None	replace
209	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    >=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  NullPointerException  	34	2	replace
210	[BUG]  [BUGGY]  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    >=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  NullPointerException  	34	2	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  0)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null  ||  limit  <  0)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    >=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
212	[BUG]  [BUGGY]  if(version  ==  null  ||  limit  <  0)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  0)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null  ||  limit  <  0)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    >=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
213	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(8);  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(8);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(8);	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(0);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	37	None	replace
214	[BUG]  [BUGGY]  if(version!=  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
215	[BUG]  [BUGGY]  if(version  ==  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
216	[BUG]  [BUGGY]  JAVA_AWT_FONTS.handleMissingException( " ");  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JAVA_AWT_FONTS.handleMissingException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JAVA_AWT_FONTS.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
217	[BUG]  [BUGGY]  JSExceptionHandler.handleMissingException( " ");  [CE]  cannot  find  symbol  JSExceptionHandler  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JSExceptionHandler.handleMissingException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JSExceptionHandler.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  JSExceptionHandler	5	None	replace
218	[BUG]  [BUGGY]  java.util.ArrayList.handleMissingException( " ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  java.util.ArrayList.handleMissingException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	java.util.ArrayList.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ints,  0,  limit  +  1);  [CE]  cannot  find  symbol  ints  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ints,  0,  limit  +  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ints,  0,  limit  +  1);	  System.arraycopy(version,    0,    ints,    0,    limit    -    1);    	non-compiled	[CE]  cannot  find  symbol  ints	70	None	replace
220	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	72	None	replace
221	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	72	None	replace
222	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	72	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  0)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null  ||  limit  <  0)  {  return  new  int[0];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
224	[BUG]  [BUGGY]  if(version  ==  null  ||  limit  <  0)  {  return  new  int[0];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  0)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null  ||  limit  <  0)  {  return  new  int[0];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
225	[BUG]  [BUGGY]  JAVA_AWT_FONTS.handleMalformedException( " ");  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JAVA_AWT_FONTS.handleMalformedException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JAVA_AWT_FONTS.handleMalformedException( " ");	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
226	[BUG]  [BUGGY]  java.util.ArrayList.handleMalformedException( " ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  java.util.ArrayList.handleMalformedException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	java.util.ArrayList.handleMalformedException( " ");	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
227	[BUG]  [BUGGY]  JAVA_AWT_FONTS.handleMalformedException( " ",  limit);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JAVA_AWT_FONTS.handleMalformedException( " ",  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JAVA_AWT_FONTS.handleMalformedException( " ",  limit);	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
228	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  +  version  +  limit;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  +  version  +  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  +  version  +  limit;	  return    ArrayUtils.EMPTY_INT_ARRAY    +    version;    	non-compiled	[CE]  incompatible  types	43	None	replace
229	[BUG]  [BUGGY]  aughtExceptionHandler.handleMismatch(version,  limit);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMismatch(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	aughtExceptionHandler.handleMismatch(version,  limit);	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	32	None	replace
230	[BUG]  [BUGGY]  safeMultiply(version,  limit);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  safeMultiply(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	safeMultiply(version,  limit);	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
231	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [version.length()  +  1];  [CE]  cannot  find  symbol  VersionUtils  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  [version.length()  +  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  [version.length()  +  1];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    +    1];    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	11	None	replace
232	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY,  limit  +  1);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    limit);    	non-compiled	[CE]  not  a  statement	79	None	replace
233	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  +  limit  -  1;  [CE]  cannot  find  symbol  VersionUtils  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  +  limit  -  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  +  limit  -  1;	  return    VersionUtils.EMPTY_INT_ARRAY    +    limit;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	45	None	replace
234	[BUG]  [BUGGY]  return  limit  +  ArrayUtils.EMPTY_INT_ARRAY  +  version;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  limit  +  ArrayUtils.EMPTY_INT_ARRAY  +  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  limit  +  ArrayUtils.EMPTY_INT_ARRAY  +  version;	  return    limit    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	47	None	replace
235	[BUG]  [BUGGY]  return  versions  +  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  cannot  find  symbol  versions  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  versions  +  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  versions  +  ArrayUtils.EMPTY_INT_ARRAY;	  return    limit    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  versions	47	None	replace
236	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  unreachable  statement	55	None	replace
237	[BUG]  [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  unreachable  statement	55	None	replace
238	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  ArrayUtils.int[]  ints  =  new  int[Math.min(limit,  limit)];  [CE]  <identifier>  expected  [FE]    NullPointerException    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  ArrayUtils.int[]  ints  =  new  int[Math.min(limit,  limit)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]    ints    =    new    int[Math.min(limit,    limit)];    ArrayUtils.int[]  ints  =  new  int[Math.min(limit,  limit)];	  	non-compiled	[CE]  <identifier>  expected	18	None	add
239	[BUG]  [BUGGY]  if(version  ==  null)  {  return  new  int[size()  ];  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  new  int[size()  ];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return  new  int[size()  ];  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    If(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
240	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.array	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	73	None	replace
241	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	73	None	replace
242	[BUG]  [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    (int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	52	None	replace
243	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    int    return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	14	None	replace
244	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  1L;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY  +  1L;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
245	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  }  [CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  }	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  variable  ints  is  already  defined  in  method  toJavaVersionIntArray(String,int)	38	None	replace
246	[BUG]  [BUGGY]  if(version!=  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
247	[BUG]  [BUGGY]  if(version  ==  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
248	[BUG]  [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	50	None	replace
249	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	50	None	replace
250	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -1],  limit);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -1],  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -1],  limit);	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit);    	non-compiled	[CE]  ';'  expected	10	None	replace
251	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)+  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =  new  int[Math.min(limit,  limit)+  1];	  int[]    ints    =    new    int[Math.min(limit,    version)];    	compilable	  [FE]  NullPointerException  	62	2	replace
252	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)+  1];  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)+  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)+  1];	  int[]    ints    =    new    int[Math.min(limit,    version)];    	compilable	  [FE]  NullPointerException  	62	2	replace
253	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)-  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =  new  int[Math.min(limit,  limit)-  1];	  int[]    ints    =    new    int[Math.min(limit,    version)];    	compilable	  [FE]  NullPointerException  	62	2	replace
254	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)-  1];  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)-  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)-  1];	  int[]    ints    =    new    int[Math.min(limit,    version)];    	compilable	  [FE]  NullPointerException  	62	2	replace
255	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.	  	non-compiled	[CE]  <identifier>  expected	31	None	add
256	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_ARRAY  +  limit;  [CE]  cannot  find  symbol  EMPTY_ARRAY  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_ARRAY  +  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_ARRAY  +  limit;	  return(int[])ArrayUtils.EMPTY_ARRAY    +    1;    	non-compiled	[CE]  cannot  find  symbol  EMPTY_ARRAY	61	None	replace
257	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY,  limit);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY,  limit);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    version);    	non-compiled	[CE]  not  a  statement	78	None	replace
258	[BUG]  [BUGGY]  ExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    version);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
259	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit);  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit);	          int[]    ints    =    new    int[Math.min(limit,    version);    	non-compiled	[CE]  ']'  expected	68	None	replace
260	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  Return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  Return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    Return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  	non-compiled	[CE]  not  a  statement	24	None	add
261	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  limit,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	System.arraycopy(version,  0,  limit,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	compilable	  [FE]  NullPointerException  	9	2	replace
262	[BUG]  [BUGGY]  System.arraycopy(version,  0,  limit,  0,  limit);  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  limit,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  limit,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	compilable	  [FE]  NullPointerException  	9	2	replace
263	[BUG]  [BUGGY]  System.arraycopy(version,  0,  intes,  0,  limit);  [CE]  cannot  find  symbol  intes  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  intes,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  intes,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  intes	9	None	replace
264	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version))  ];  [CE]  no  suitable  method  found  for  min(int,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version))  ];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  String.valueOf(version))  ];	  int[]    ints    =    new    int[Math.min(limit,    String.valueOf(version.length))];    	non-compiled	[CE]  no  suitable  method  found  for  min(int,String)	21	None	replace
265	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit  +  1);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit  +  1);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit  +  1);	  return    ArrayUtils.EMPTY_INT_ARRAY    [0],    limit);    	non-compiled	[CE]  ';'  expected	26	None	replace
266	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit,  0);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit,  0);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit,  0);	  return    ArrayUtils.EMPTY_INT_ARRAY    [0],    limit);    	non-compiled	[CE]  ';'  expected	26	None	replace
267	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit  -  1);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0],  limit  -  1);	  return    ArrayUtils.EMPTY_INT_ARRAY    [0],    limit);    	non-compiled	[CE]  ';'  expected	26	None	replace
268	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  +  0;  [CE]  cannot  find  symbol  VersionUtils  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  +  0;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  +  0;	  return    VersionUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	41	None	replace
269	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  3;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  3;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY,  limit  +  3;	  return    ArrayUtils.EMPTY_INT_ARRAY,    limit    +    1;    	non-compiled	[CE]  ';'  expected	44	None	replace
270	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit  -  1)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	int[]  ints  =  new  int[Math.min(limit,  limit  -  1)];	  int[]    ints    =    new    int[Math.min(limit,    version.length    -    1)];    	compilable	  [FE]  NullPointerException  	76	2	replace
271	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit  -  1)];  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit  -  1)];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit  -  1)];	  int[]    ints    =    new    int[Math.min(limit,    version.length    -    1)];    	compilable	  [FE]  NullPointerException  	76	2	replace
272	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [1],  version);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [1],  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [1],  version);	  return    ArrayUtils.EMPTY_INT_ARRAY    [0],    version);    	non-compiled	[CE]  ';'  expected	80	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ints,  2,  limit);  [CE]  cannot  find  symbol  ints  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ints,  2,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ints,  2,  limit);	  System.arraycopy(version,    0,    ints,    1,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	8	None	replace
274	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  -  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY,  limit  -  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY,  limit  -  1;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    -    1;    	non-compiled	[CE]  ';'  expected	57	None	replace
275	[BUG]  [BUGGY]  JAVA_AWT_FONTS.handleUnsupportedOperation(version,  limit);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JAVA_AWT_FONTS.handleUnsupportedOperation(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JAVA_AWT_FONTS.handleUnsupportedOperation(version,  limit);	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
276	[BUG]  [BUGGY]  java.util.ArrayList.handleUnsupportedOperation(version,  limit);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  java.util.ArrayList.handleUnsupportedOperation(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	java.util.ArrayList.handleUnsupportedOperation(version,  limit);	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
277	[BUG]  [BUGGY]  JSVersionHandler.handleUnsupportedOperation(version,  limit);  [CE]  cannot  find  symbol  JSVersionHandler  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JSVersionHandler.handleUnsupportedOperation(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JSVersionHandler.handleUnsupportedOperation(version,  limit);	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol  JSVersionHandler	59	None	replace
278	[BUG]  [BUGGY]  return  version.intValue()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version.intValue()  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version.intValue()  +  1;	  return    version    +    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
279	[BUG]  [BUGGY]  return  version.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version.length  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version.length  +  1;	  return    version    +    1;    	non-compiled	[CE]  cannot  find  symbol  length	42	None	replace
280	[BUG]  [BUGGY]  return  version  +  LimitUtils.EMPTY_INT_ARRAY;  [CE]  cannot  find  symbol  LimitUtils  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version  +  LimitUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version  +  LimitUtils.EMPTY_INT_ARRAY;	  return    version    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  LimitUtils	46	None	replace
281	[BUG]  [BUGGY]  return  version  +  ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version  +  ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version  +  ArrayUtils.EMPTY_INT_ARRAY  +  limit;	  return    version    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  incompatible  types	46	None	replace
282	[BUG]  [BUGGY]  StaxUtil.throwAssertionError( "Missing  version: "  +  version);  [CE]  cannot  find  symbol  StaxUtil  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  StaxUtil.throwAssertionError( "Missing  version: "  +  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	StaxUtil.throwAssertionError( "Missing  version: "  +  version);	  aughtExceptionHandler.throwAssertionError(   "Missing    version:   "    +    version);    	non-compiled	[CE]  cannot  find  symbol  StaxUtil	6	None	replace
283	[BUG]  [BUGGY]  java.util.ArrayList.throwAssertionError( "Missing  version: "  +  version);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  java.util.ArrayList.throwAssertionError( "Missing  version: "  +  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	java.util.ArrayList.throwAssertionError( "Missing  version: "  +  version);	  aughtExceptionHandler.throwAssertionError(   "Missing    version:   "    +    version);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
284	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  &  0xff;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  &  0xff;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  &  0xff;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    &    0xff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	28	None	replace
285	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY[0]  &  0xff,  limit;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY[0]  &  0xff,  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY[0]  &  0xff,  limit;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    &    0xff;    	non-compiled	[CE]  ';'  expected	28	None	replace
286	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;	  return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	25	None	replace
287	[BUG]  [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	49	None	replace
288	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	49	None	replace
289	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    ints[j]    =    Integer.parseInt(version);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
290	[BUG]  [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  '.class'  expected	77	None	replace
291	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(int[])ArrayUtils.EMPTY_INT_ARRAY	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  '.class'  expected	77	None	replace
292	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  toJavaVersionIntArray(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	return  toJavaVersionIntArray(version,  limit);	  [Delete]    	compilable	  [FE]  StackOverflowError  	58	2	replace
293	[BUG]  [BUGGY]  return  toJavaVersionIntArray(version,  limit);  [FE]  StackOverflowError  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  toJavaVersionIntArray(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  toJavaVersionIntArray(version,  limit);	  [Delete]    	compilable	  [FE]  StackOverflowError  	58	2	replace
294	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(limit))];  [CE]  no  suitable  method  found  for  min(int,String)  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  String.valueOf(limit))];  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  String.valueOf(limit))];	  int[]    ints    =    new    int[Math.min(limit,    length)];    	non-compiled	[CE]  no  suitable  method  found  for  min(int,String)	20	None	replace
295	[BUG]  [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY  +  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY  +  limit;	  return(version    ==    null)?    0    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	23	None	replace
296	[BUG]  [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =(int[])ArrayUtils.EMPTY_INT_ARRAY;  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
297	[BUG]  [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  return(version  >=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  return(version  >=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    return(version  >=  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	24	None	add
298	[BUG]  [BUGGY]  return(version!=  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version!=  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version!=  null)?  0  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    0    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  incompatible  types	23	None	replace
299	[BUG]  [BUGGY]  safeMultiply(version,  limit)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  safeMultiply(version,  limit)  {  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	safeMultiply(version,  limit)  {	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
300	[BUG]  [BUGGY]  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	}	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
301	[BUG]  [BUGGY]  JSExceptionHandler.throwException(ArrayUtils.EMPTY_INT_ARRAY,  limit);  [CE]  cannot  find  symbol  JSExceptionHandler  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JSExceptionHandler.throwException(ArrayUtils.EMPTY_INT_ARRAY,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JSExceptionHandler.throwException(ArrayUtils.EMPTY_INT_ARRAY,  limit);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    limit);    	non-compiled	[CE]  cannot  find  symbol  JSExceptionHandler	79	None	replace
302	[BUG]  [BUGGY]  JSExceptionHandler.throwException(ArrayUtils.EMPTY_INT_ARRAY,  version);  [CE]  cannot  find  symbol  JSExceptionHandler  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JSExceptionHandler.throwException(ArrayUtils.EMPTY_INT_ARRAY,  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JSExceptionHandler.throwException(ArrayUtils.EMPTY_INT_ARRAY,  version);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    limit);    	non-compiled	[CE]  cannot  find  symbol  JSExceptionHandler	79	None	replace
303	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(Long.parseLong(version));  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                      AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(Long.parseLong(version));  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(Long.parseLong(version));	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(version);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	36	None	replace
304	[BUG]  [BUGGY]  java.util.ArrayList.throwAssertionError( "msg.bad.version ",  version);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  java.util.ArrayList.throwAssertionError( "msg.bad.version ",  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	java.util.ArrayList.throwAssertionError( "msg.bad.version ",  version);	  aughtExceptionHandler.throwAssertionError(   "msg.bad.version   ",    version);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
305	[BUG]  [BUGGY]  Object.throwAssertionError( "msg.bad.version ",  version);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  Object.throwAssertionError( "msg.bad.version ",  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	Object.throwAssertionError( "msg.bad.version ",  version);	  aughtExceptionHandler.throwAssertionError(   "msg.bad.version   ",    version);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
306	[BUG]  [BUGGY]  JavaVersionHandler.handleUnsupportedOperation(version,  limit);  [CE]  cannot  find  symbol  JavaVersionHandler  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JavaVersionHandler.handleUnsupportedOperation(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JavaVersionHandler.handleUnsupportedOperation(version,  limit);	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol  JavaVersionHandler	59	None	replace
307	[BUG]  [BUGGY]  ObjectUtils.handleUnsupportedOperation(version,  limit);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ObjectUtils.handleUnsupportedOperation(version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ObjectUtils.handleUnsupportedOperation(version,  limit);	  aughtExceptionHandler.handleUnsupportedOperation(version,    limit);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
308	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(version);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	aughtExceptionHandler.handleMissingClass(version);	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	32	None	replace
309	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit;	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit;    	non-compiled	[CE]  ']'  expected	12	None	replace
310	[BUG]  [BUGGY]  JAVA_AWT_SEPARATOR.handleMissingException( " ");  [CE]  cannot  find  symbol  JAVA_AWT_SEPARATOR  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JAVA_AWT_SEPARATOR.handleMissingException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JAVA_AWT_SEPARATOR.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  JAVA_AWT_SEPARATOR	5	None	replace
311	[BUG]  [BUGGY]  MISSING_EXTENDS.handleMissingException( " ");  [CE]  cannot  find  symbol  MISSING_EXTENDS  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  MISSING_EXTENDS.handleMissingException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	MISSING_EXTENDS.handleMissingException( " ");	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  MISSING_EXTENDS	5	None	replace
312	[BUG]  [BUGGY]  System.arraycopy(version,  10,  ints,  0,  limit  -  version.length);  [CE]  cannot  find  symbol  ints  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  10,  ints,  0,  limit  -  version.length);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  10,  ints,  0,  limit  -  version.length);	  System.arraycopy(version,    10,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  ints	74	None	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  1)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null  ||  limit  <  1)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    >=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
314	[BUG]  [BUGGY]  if(version  ==  null  ||  limit  <  1)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  1)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null  ||  limit  <  1)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version    >=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	34	1	replace
315	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  (int[])ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  System.arraycopy(version,  0,  ints,  limit);  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    (int[])ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	52	None	replace
316	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY  /  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY  /  1;	  return(int[])ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	1	None	replace
317	[BUG]  [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =  new  int[0];  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =  new  int[0];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY  =  new  int[0];	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	50	None	replace
318	[BUG]  [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  for(int  i  =  0;  i  <  limit;  ++i)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  for(int  i  =  0;  i  <  limit;  ++i)  {  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  Integer[]  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  for(int  i  =  0;  i  <  limit;  ++i)  {	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    Integer[]    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  ';'  expected	50	None	replace
319	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	31	None	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
321	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
322	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >>  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >>  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version!=    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  >>  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	31	None	add
323	[BUG]  [BUGGY]  System.arraycopy(version,  0,  out,  0,  limit);  [CE]  cannot  find  symbol  out  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  out,  0,  limit);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  out,  0,  limit);	  System.arraycopy(version,    0,    bytes,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  out	9	None	replace
324	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  &  version;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  &  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  &  version;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    &    0xff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	28	None	replace
325	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  version;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  version;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    &    0xff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	28	None	replace
326	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff,  version);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff,  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [0]  &  0xff,  version);	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    &    0xff;    	non-compiled	[CE]  ';'  expected	28	None	replace
327	[BUG]  [BUGGY]  if(version  ==  null  ||  limit  <  =  0)  {  return  new  int[0];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  =  0)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null  ||  limit  <  =  0)  {  return  new  int[0];  }	  if(version    ==    null)    {    return    new    int[0];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  2)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null  ||  limit  <  2)  {  return  new  int[0];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
329	[BUG]  [BUGGY]  if(version  ==  null  ||  limit  <  2)  {  return  new  int[0];  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  limit  <  2)  {  return  new  int[0];  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null  ||  limit  <  2)  {  return  new  int[0];  }	  if(version    ==    null)    {    return    new    int[0];    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
330	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(4);  [CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY  [FE]                        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(4);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY  =  new  ArrayUtils(4);	  ArrayUtils.EMPTY_INT_ARRAY    =    new    ArrayUtils(0);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  EMPTY_INT_ARRAY	37	None	replace
331	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	72	None	replace
332	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy(version  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy(version  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy(version	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  ')'  expected	72	None	replace
333	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  j  =  0;  j  <  limit;  j++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	72	None	replace
334	[BUG]  [BUGGY]  ExceptionHandler.handleMissingException(ArrayUtils.EMPTY_INT_ARRAY,  version);  [CE]  cannot  find  symbol  ExceptionHandler  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ExceptionHandler.handleMissingException(ArrayUtils.EMPTY_INT_ARRAY,  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ExceptionHandler.handleMissingException(ArrayUtils.EMPTY_INT_ARRAY,  version);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    version);    	non-compiled	[CE]  cannot  find  symbol  ExceptionHandler	78	None	replace
335	[BUG]  [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ArrayUtils.EMPTY_INT_ARRAY,  version,  limit);	  aughtExceptionHandler(ArrayUtils.EMPTY_INT_ARRAY,    version);    	non-compiled	[CE]  not  a  statement	78	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	56	1	replace
337	[BUG]  [BUGGY]  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(ArrayUtils.EMPTY_INT_ARRAY!=  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  AssertionFailedError  	56	1	replace
338	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(ArrayUtils.EMPTY_INT_ARRAY  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(ArrayUtils.EMPTY_INT_ARRAY  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  NullPointerException  	56	2	replace
339	[BUG]  [BUGGY]  if(ArrayUtils.EMPTY_INT_ARRAY  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(ArrayUtils.EMPTY_INT_ARRAY  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(ArrayUtils.EMPTY_INT_ARRAY  ==  null)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  return(int[])ArrayUtils.EMPTY_INT_ARRAY;    if(ArrayUtils.EMPTY_INT_ARRAY!=    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	compilable	  [FE]  NullPointerException  	56	2	replace
340	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  +  version,  limit);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  +  version,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  +  version,  limit);	  return    ArrayUtils.EMPTY_INT_ARRAY    +    version;    	non-compiled	[CE]  ';'  expected	43	None	replace
341	[BUG]  [BUGGY]  System.arraycopy(version,  0,  ints,  0,  limit  -  1,  limit  -  1);  [CE]  cannot  find  symbol  ints  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  0,  ints,  0,  limit  -  1,  limit  -  1);  [BUGGY]      return  ArrayUtils.EMPTY_INT_ARRAY;  }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,  0,  ints,  0,  limit  -  1,  limit  -  1);	  System.arraycopy(version,    0,    ints,    0,    limit    -    1);    	non-compiled	[CE]  cannot  find  symbol  ints	70	None	replace
342	[BUG]  [BUGGY]  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
343	[BUG]  [BUGGY]  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
344	[BUG]  [BUGGY]  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    int    return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	14	None	replace
345	[BUG]  [BUGGY]  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  else  {  int  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    int    return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  not  a  statement	14	None	replace
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
347	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version!=  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }	  	compilable	  [FE]  AssertionFailedError  	29	1	add
348	[BUG]  [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version        ==        null)        {        return        ArrayUtils.EMPTY_INT_ARRAY;        }        if(version    ==    null)    {    return    ArrayUtils.EMPTY_INT_ARRAY;    }    if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY_INT_ARRAY;  }  if(version  ==  null)  {  return  ArrayUtils.EMPTY	  	non-compiled	[CE]  ';'  expected	29	None	add
349	[BUG]  [BUGGY]  JavaVersionHandler.handleMalformedException( " ");  [CE]  cannot  find  symbol  JavaVersionHandler  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JavaVersionHandler.handleMalformedException( " ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JavaVersionHandler.handleMalformedException( " ");	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  JavaVersionHandler	60	None	replace
350	[BUG]  [BUGGY]  JAVA_AWT_FONTS.handleMalformedException( ", ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JAVA_AWT_FONTS.handleMalformedException( ", ");  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JAVA_AWT_FONTS.handleMalformedException( ", ");	  aughtExceptionHandler.handleMalformedException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
351	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	73	None	replace
352	[BUG]  [BUGGY]  System.arraycopy(version,  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  System.arraycopy(version,  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	System.arraycopy(version,	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
353	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arra	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  not  a  statement	73	None	replace
354	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy(version  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy(version  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.pow(10,  limit)];  for(int  i  =  0;  i  <  limit;  i++)  {  int[]  ints  =  new  int[Math.min(limit,  version.length)];  System.arraycopy(version	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    i    =    0;    i    <    limit;    i++)    {    int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    	non-compiled	[CE]  ')'  expected	73	None	replace
355	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  -  1,  limit);	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    ],    limit);    	non-compiled	[CE]  ']'  expected	10	None	replace
356	[BUG]  [BUGGY]  return  version.length  +  ArrayUtils.EMPTY_INT_ARRAY;  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  version.length  +  ArrayUtils.EMPTY_INT_ARRAY;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  version.length  +  ArrayUtils.EMPTY_INT_ARRAY;	  return    limit    +    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  cannot  find  symbol  length	47	None	replace
357	[BUG]  [BUGGY]  JAVA_AWT_FONTS.append(version);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  JAVA_AWT_FONTS.append(version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	JAVA_AWT_FONTS.append(version);	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
358	[BUG]  [BUGGY]  if(version.length()  >  limit)  {  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version.length()  >  limit)  {  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version.length()  >  limit)  {  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
359	[BUG]  [BUGGY]  if(version.length()  >  limit)  {  for(int  j  =  0;  j  <  limit;  j++)  {  System.arraycopy(version,  0,  ints,  0,  version.length);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version.length()  >  limit)  {  for(int  j  =  0;  j  <  limit;  j++)  {  System.arraycopy(version,  0,  ints,  0,  version.length);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version.length()  >  limit)  {  for(int  j  =  0;  j  <  limit;  j++)  {  System.arraycopy(version,  0,  ints,  0,  version.length);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
360	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  -  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  -  1;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	57	None	replace
361	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  -  1;  [CE]  cannot  find  symbol  VersionUtils  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  -  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  -  1;	  return    ArrayUtils.EMPTY_INT_ARRAY    [0]    -    1;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	57	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  version.length()  ==  0)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	add	if(version  ==  null  ||  version.length()  ==  0)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	15	1	replace
363	[BUG]  [BUGGY]  if(version  ==  null  ||  version.length()  ==  0)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null  ||  version.length()  ==  0)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null  ||  version.length()  ==  0)  {  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY;  }	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	compilable	  [FE]  AssertionFailedError  	15	1	replace
364	[BUG]  [BUGGY]  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	if(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  +  1;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    if(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
365	[BUG]  [BUGGY]  AssertionError.throwAssertionError( "Missing  version: "  +  version);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  AssertionError.throwAssertionError( "Missing  version: "  +  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	AssertionError.throwAssertionError( "Missing  version: "  +  version);	  aughtExceptionHandler.throwAssertionError(   "Missing    version:   "    +    version);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
366	[BUG]  [BUGGY]  ObjectUtils.throwAssertionError( "Missing  version: "  +  version);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  ObjectUtils.throwAssertionError( "Missing  version: "  +  version);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	ObjectUtils.throwAssertionError( "Missing  version: "  +  version);	  aughtExceptionHandler.throwAssertionError(   "Missing    version:   "    +    version);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
367	[BUG]  [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  *  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  *  1];  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  ArrayUtils.EMPTY_INT_ARRAY  [version.length()  *  1];	  return    ArrayUtils.EMPTY_INT_ARRAY    [version.length()    +    1];    	non-compiled	[CE]  incompatible  types	11	None	replace
368	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  text.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [CE]  cannot  find  symbol  text  [FE]        NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  text.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  text.length)];  for(int  j  =  0;  j  <  limit;  j++)  {  ints[j]  =  Integer.parseInt(version);  }	          int[]    ints    =    new    int[Math.min(limit,    version.length)];    for(int    j    =    0;    j    <    limit;    j++)    {    ints[j]    =    Integer.parseInt(version);    }    	non-compiled	[CE]  cannot  find  symbol  text	48	None	replace
369	[BUG]  [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  -  version;  [CE]  cannot  find  symbol  VersionUtils  [FE]              AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return  VersionUtils.EMPTY_INT_ARRAY  -  version;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return  VersionUtils.EMPTY_INT_ARRAY  -  version;	  return    VersionUtils.EMPTY_INT_ARRAY    +    limit;    	non-compiled	[CE]  cannot  find  symbol  VersionUtils	45	None	replace
370	[BUG]  [BUGGY]  safeMultiply(version,  limit)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  safeMultiply(version,  limit)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	safeMultiply(version,  limit)  {  return(int[])ArrayUtils.EMPTY_INT_ARRAY;  }	  if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
371	[BUG]  [BUGGY]  safeMultiply(version,  limit),  ArrayUtils.EMPTY_INT_ARRAY);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  safeMultiply(version,  limit),  ArrayUtils.EMPTY_INT_ARRAY);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	safeMultiply(version,  limit),  ArrayUtils.EMPTY_INT_ARRAY);	  if(version    ==    null)    {    return(int[])ArrayUtils.EMPTY_INT_ARRAY;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
372	[BUG]  [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  version.length  -  1)];  System.arraycopy(version,  0,  ints,  0,  limit);  [CE]  cannot  find  symbol  length  [FE]          NullPointerException      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  int[]  ints  =  new  int[Math.min(limit,  version.length  -  1)];  System.arraycopy(version,  0,  ints,  0,  limit);  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	int[]  ints  =  new  int[Math.min(limit,  version.length  -  1)];  System.arraycopy(version,  0,  ints,  0,  limit);	  int[]    ints    =    new    int[Math.min(limit,    version.length)];    System.arraycopy(version,    0,    ints,    0,    limit);    	non-compiled	[CE]  cannot  find  symbol  length	39	None	replace
373	[BUG]  [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      private  static  int[]  toJavaVersionIntArray(String  version,  int  limit)  {  if  (version  ==  null)  {      [BUGGY]  return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  *  1;  [BUGGY]      }  String[]  strings  =  Pattern.compile(     "[^\\d]     ").split(version);  int[]  ints  =  new  int[Math.min(limit,  strings.length)];  int  j  =  0;  for  (int  i  =  0;  i  <  strings.length  &&  j  <  limit;  i++)  {  String  s  =  strings[i];  if  (s.length()  >  0)  {  ints[j++]  =  Integer.parseInt(s);  }  }  [CLASS]  SystemUtils  [METHOD]  toJavaVersionIntArray  [RETURN_TYPE]  int[]  String  version  int  limit  [VARIABLES]  int[]  ints  boolean  IS_JAVA_1_1  IS_JAVA_1_2  IS_JAVA_1_3  IS_JAVA_1_4  IS_JAVA_1_5  IS_JAVA_1_6  IS_JAVA_1_7  IS_OS_AIX  IS_OS_HP_UX  IS_OS_IRIX  IS_OS_LINUX  IS_OS_MAC  IS_OS_MAC_OSX  IS_OS_OS2  IS_OS_SOLARIS  IS_OS_SUN_OS  IS_OS_UNIX  IS_OS_WINDOWS  IS_OS_WINDOWS_2000  IS_OS_WINDOWS_7  IS_OS_WINDOWS_95  IS_OS_WINDOWS_98  IS_OS_WINDOWS_ME  IS_OS_WINDOWS_NT  IS_OS_WINDOWS_VISTA  IS_OS_WINDOWS_XP  String  AWT_TOOLKIT  FILE_ENCODING  FILE_SEPARATOR  JAVA_AWT_FONTS  JAVA_AWT_GRAPHICSENV  JAVA_AWT_HEADLESS  JAVA_AWT_PRINTERJOB  JAVA_CLASS_PATH  JAVA_CLASS_VERSION  JAVA_COMPILER  JAVA_ENDORSED_DIRS  JAVA_EXT_DIRS  JAVA_HOME  JAVA_HOME_KEY  JAVA_IO_TMPDIR  JAVA_IO_TMPDIR_KEY  JAVA_LIBRARY_PATH  JAVA_RUNTIME_NAME  JAVA_RUNTIME_VERSION  JAVA_SPECIFICATION_NAME  JAVA_SPECIFICATION_VENDOR  JAVA_SPECIFICATION_VERSION  JAVA_UTIL_PREFS_PREFERENCES_FACTORY  JAVA_VENDOR  JAVA_VENDOR_URL  JAVA_VERSION  JAVA_VERSION_TRIMMED  JAVA_VM_INFO  JAVA_VM_NAME  JAVA_VM_SPECIFICATION_NAME  JAVA_VM_SPECIFICATION_VENDOR  JAVA_VM_SPECIFICATION_VERSION  JAVA_VM_VENDOR  JAVA_VM_VERSION  LINE_SEPARATOR  OS_ARCH  OS_NAME  OS_NAME_WINDOWS_PREFIX  OS_VERSION  PATH_SEPARATOR  USER_COUNTRY  USER_DIR  USER_DIR_KEY  USER_HOME  USER_HOME_KEY  USER_LANGUAGE  USER_NAME  USER_TIMEZONE  osName  osNamePrefix  osVersion  osVersionPrefix  property  s  version  versionPrefix  String[]  strings  float  JAVA_VERSION_FLOAT  requiredVersion  int  JAVA_VERSION_INT  JAVA_VERSION_TRIM_SIZE  i  j  limit  requiredVersion  	projects/Lang29/src/main/java/org/apache/commons/lang3/SystemUtils.java	0.7071067811865475	1717	1717	1	replace	return(version  ==  null)?  ArrayUtils.EMPTY_INT_ARRAY  :  ArrayUtils.EMPTY_INT_ARRAY  *  1;	  return(version    ==    null)?    ArrayUtils.EMPTY_INT_ARRAY    :    ArrayUtils.EMPTY_INT_ARRAY    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	22	None	replace
