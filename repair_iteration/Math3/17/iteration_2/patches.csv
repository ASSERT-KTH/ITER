bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)-    aHigh    *    bHigh)-    aLow    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
2	[BUG]  [BUGGY]  double  prodLowSum  =(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aLow  *  bHigh);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aLow  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aLow  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)-    aHigh    *    bHigh)-    aLow    *    bHigh);    	non-compiled	[CE]  ';'  expected	25	None	replace
3	[BUG]  [BUGGY]  double  prodHighCur  =  prodHigh[0];  double  prodHighCur  =  prodHigh[0];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodHighCur  =  prodHigh[0];  double  prodHighCur  =  prodHigh[0];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double    prodHighCur    =    prodHigh[0];    double  prodHighCur  =  prodHigh[0];	  	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	22	None	add
4	[BUG]  [BUGGY]  double  prodHighCur  =  prodHigh[0];  Double  prodHighCur  =  prodHigh[0];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodHighCur  =  prodHigh[0];  Double  prodHighCur  =  prodHigh[0];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double    prodHighCur    =    prodHigh[0];    Double  prodHighCur  =  prodHigh[0];	  	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	22	None	add
5	[BUG]  [BUGGY]  double  prodHighCur  =  prodHigh[0];  double  prodLowCur  =  prodHigh[0];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodHighCur  =  prodHigh[0];  double  prodLowCur  =  prodHigh[0];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double    prodHighCur    =    prodHigh[0];    double  prodLowCur  =  prodHigh[0];	  	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	22	None	add
6	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  +  bLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  bHigh  +  bLow;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  bHigh  +  bLow;	  double    prodLowSum    =    bLow    +    bHigh;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	19	None	replace
7	[BUG]  [BUGGY]  double  prodLowSum  =  ai  +  bHigh;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  ai  +  bHigh;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  ai  +  bHigh;	  double    prodLowSum    =    bLow    +    bHigh;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	19	None	replace
8	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bHigh);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bHigh);	  double    prodLowSum    =    (((prodLow[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  ';'  expected	17	None	replace
9	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)/    aHigh    *    bHigh);    	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  double  prodLowSum  =  ai  +  bLowSum;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  ai  +  bLowSum;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  ai  +  bLowSum;	  double    prodLowSum    =    prodLow    +    bLowSum;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	1	None	replace
11	[BUG]  [BUGGY]  final  double  prodLowSum  =  bi  *  ai;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodLowSum  =  bi  *  ai;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final  double  prodLowSum  =  bi  *  ai;	  final    double    prodLowSum    =    ai    *    bi;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	16	None	replace
12	[BUG]  [BUGGY]  final  double  prodLowSum  =  ai.length()  +  1;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodLowSum  =  ai.length()  +  1;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final  double  prodLowSum  =  ai.length()  +  1;	  final    double    prodLowSum    =    b.length()    +    1;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	5	None	replace
13	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  ai;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  bLow  *  ai;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  bLow  *  ai;	  double    prodLowSum    =    ai    *    bLow;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	7	None	replace
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodHighCur  =  prodHigh[1];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	add	double  prodHighCur  =  prodHigh[1];	  double    prodHighCur    =    prodHigh[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	replace
15	[BUG]  [BUGGY]  double  prodHighCur  =  prodHigh[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodHighCur  =  prodHigh[1];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodHighCur  =  prodHigh[1];	  double    prodHighCur    =    prodHigh[0];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	replace
16	[BUG]  [BUGGY]  final  double  prodHighCur  =  prodHigh[2];  final  double  prodHighCur  =  prodHigh[2];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodHighCur  =  prodHigh[2];  final  double  prodHighCur  =  prodHigh[2];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final    double    prodHighCur    =    prodHigh[2];    final  double  prodHighCur  =  prodHigh[2];	  	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	14	None	add
17	[BUG]  [BUGGY]  final  double  prodHighCur  =  prodHigh[2];  final  double  prodHighCur  =  prodHigh[3];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodHighCur  =  prodHigh[2];  final  double  prodHighCur  =  prodHigh[3];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final    double    prodHighCur    =    prodHigh[2];    final  double  prodHighCur  =  prodHigh[3];	  	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	14	None	add
18	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aHigh  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aHigh  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aHigh  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)/    aHigh    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	24	None	replace
19	[BUG]  [BUGGY]  double  prodLowSum  =  ai  *  bHigh;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  ai  *  bHigh;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  ai  *  bHigh;	  double    prodLowSum    =    bLow    *    bHigh;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	8	None	replace
20	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  bLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  bHigh  *  bLow;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  bHigh  *  bLow;	  double    prodLowSum    =    bLow    *    bHigh;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	8	None	replace
21	[BUG]  [BUGGY]  final  double  prodLowSum  =  bLow  *  ai;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodLowSum  =  bLow  *  ai;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final  double  prodLowSum  =  bLow  *  ai;	  final    double    prodLowSum    =    ai    *    bLowSum;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	4	None	replace
22	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  +  prodLow.doubleValue();  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  bLow  +  prodLow.doubleValue();  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  bLow  +  prodLow.doubleValue();	  double    prodLowSum    =    bLow    +    prodLowSum.doubleValue();    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	20	None	replace
23	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aHigh  *  bHigh)/  aLow  *  bLow);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aHigh  *  bHigh)/  aLow  *  bLow);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aHigh  *  bHigh)/  aLow  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aHigh    *    bHigh)/    aLow    *    bHigh);    	non-compiled	[CE]  ';'  expected	3	None	replace
24	[BUG]  [BUGGY]  double  prodLowSum  =  ai  +  bLow.doubleValue();  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  ai  +  bLow.doubleValue();  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  ai  +  bLow.doubleValue();	  double    prodLowSum    =    bLow    +    prodLowSum.doubleValue();    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	20	None	replace
25	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
26	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodLow[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	17	None	replace
27	[BUG]  [BUGGY]  double  prodHighCur  =  prodHigh[0];  double  prodHighCur  =  prodHigh[1];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodHighCur  =  prodHigh[0];  double  prodHighCur  =  prodHigh[1];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double    prodHighCur    =    prodHigh[0];    double  prodHighCur  =  prodHigh[1];	  	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	22	None	add
28	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)/  aHigh  *  bLow;	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aLow    *    bHigh)/    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	6	None	replace
29	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)/    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	21	None	replace
30	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)/  aLow  *  bHigh)-  aHigh  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)/    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	21	None	replace
31	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aHigh  *  bHigh)/  aLow  *  bHigh);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  bHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aHigh  *  bHigh)/  aLow  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  bHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh))  -  aHigh  *  bHigh)/  aLow  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh))    -    aHigh    *    bHigh)/    aLow    *    bHigh);    	non-compiled	[CE]  ';'  expected	3	None	replace
32	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aHigh  *  bHigh)-  aLow  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aHigh  *  bHigh)-  aLow  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)/  aHigh  *  bHigh)-  aLow  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)/    aHigh    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	24	None	replace
33	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)-  aHigh  *  bHigh)-  aLow  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)-  aHigh  *  bHigh)-  aLow  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodLow[i]  -  aHigh  *  bHigh)-  aHigh  *  bHigh)-  aLow  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)-    aHigh    *    bHigh)-    aLow    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
34	[BUG]  [BUGGY]  final  double  prodHighCur  =  prodHigh[2];  double  prodHighCur  =  prodHigh[2];  [CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodHighCur  =  prodHigh[2];  double  prodHighCur  =  prodHigh[2];  [BUGGY]      double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final    double    prodHighCur    =    prodHigh[2];    double  prodHighCur  =  prodHigh[2];	  	non-compiled	[CE]  variable  prodHighCur  is  already  defined  in  method  linearCombination(double[],double[])	14	None	add
35	[BUG]  [BUGGY]  final  double  prodLowSum  =  this.b.length();  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodLowSum  =  this.b.length();  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final  double  prodLowSum  =  this.b.length();	  final    double    prodLowSum    =    b.length()    +    1;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	5	None	replace
36	[BUG]  [BUGGY]  final  double  prodLowSum  =  ai  *  bLowSum  +  1;  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  final  double  prodLowSum  =  ai  *  bLowSum  +  1;  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	final  double  prodLowSum  =  ai  *  bLowSum  +  1;	  final    double    prodLowSum    =    ai    *    bLowSum;    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	4	None	replace
37	[BUG]  [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aLow  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);  prodLowSum  +=  prodLow;  }        [BUGGY]  double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aLow  *  bHigh);  [BUGGY]      final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  for  (int  i  =  1;  i  <  lenMinusOne;  i++)  {  prodHighNext  =  prodHigh[i  +  1];  final  double  sHighCur  =  sHighPrev  +  prodHighNext;  sPrime  =  sHighCur  -  prodHighNext;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	845	845	1	replace	double  prodLowSum  =  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aLow  *  bHigh);	  double    prodLowSum    =    (((prodHigh[i]    -    aHigh    *    bHigh)-    aHigh    *    bHigh)-    aLow    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
