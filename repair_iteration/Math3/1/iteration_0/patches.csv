bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }		compilable	  [FE]  DimensionMismatchException  	2	4	add
2	[BUG]  [BUGGY]    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }		compilable	  [FE]  DimensionMismatchException  	2	4	add
3	[BUG]  [BUGGY]    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }		non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)	2	None	add
4	[BUG]  [BUGGY]    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }		non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)	2	None	add
5	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]  final  int  len  =  a.length  -  1;  [BUGGY]  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  -  1;	final  int  len  =  a.length;  	compilable	  [FE]  DimensionMismatchException  	1	4	replace
6	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1;  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]  final  int  len  =  a.length  -  1;  [BUGGY]  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  -  1;	final  int  len  =  a.length;  	compilable	  [FE]  DimensionMismatchException  	1	4	replace
7	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]  final  int  len  =  a.length  +  1;  [BUGGY]  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  +  1;	final  int  len  =  a.length;  	compilable	  [FE]  DimensionMismatchException  	1	4	replace
8	[BUG]  [BUGGY]  final  int  len  =  a.length  +  1;  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]  final  int  len  =  a.length  +  1;  [BUGGY]  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  +  1;	final  int  len  =  a.length;  	compilable	  [FE]  DimensionMismatchException  	1	4	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    final  int  aLowSum  =  Math.min(a.length,  b.length);  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	    final  int  aLowSum  =  Math.min(a.length,  b.length);		compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
10	[BUG]  [BUGGY]    final  int  aLowSum  =  Math.min(a.length,  b.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    final  int  aLowSum  =  Math.min(a.length,  b.length);  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    final  int  aLowSum  =  Math.min(a.length,  b.length);		compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
11	[BUG]  [BUGGY]    final  int  aLowSum  =  Math.max(a.length,  prodHigh);  [CE]  cannot  find  symbol  prodHigh  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    final  int  aLowSum  =  Math.max(a.length,  prodHigh);  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    final  int  aLowSum  =  Math.max(a.length,  prodHigh);		non-compiled	[CE]  cannot  find  symbol  prodHigh	2	None	add
12	[BUG]  [BUGGY]    final  int  aLowSum  =  Math.min(a.length,  prodHigh);  [CE]  cannot  find  symbol  prodHigh  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    final  int  aLowSum  =  Math.min(a.length,  prodHigh);  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    final  int  aLowSum  =  Math.min(a.length,  prodHigh);		non-compiled	[CE]  cannot  find  symbol  prodHigh	2	None	add
13	[BUG]  [BUGGY]    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }		non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)	2	None	add
14	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }		compilable	  [FE]  DimensionMismatchException  	2	1	add
15	[BUG]  [BUGGY]    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }		compilable	  [FE]  DimensionMismatchException  	2	1	add
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }		compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
17	[BUG]  [BUGGY]    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }		compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]  final  int  len  =  b.length;  [BUGGY]  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  b.length;	final  int  len  =  a.length;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	replace
19	[BUG]  [BUGGY]  final  int  len  =  b.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  throws  DimensionMismatchException  {  [BUGGY]  final  int  len  =  b.length;  [BUGGY]  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  b.length;	final  int  len  =  a.length;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	replace
