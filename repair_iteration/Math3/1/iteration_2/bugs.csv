bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  throw  new  DimensionMismatchException(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a.length,  b.length);	      if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  len	17	None	replace
2	[BUG]  [BUGGY]  allowMismatchException(a.length,  b.length);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  allowMismatchException(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	allowMismatchException(a.length,  b.length);	      if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
3	[BUG]  [BUGGY]  final  int  len  =  b.length;  final  int  len  =  b.length;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length;  final  int  len  =  b.length;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length;    final  int  len  =  b.length;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	18	None	add
4	[BUG]  [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	18	None	add
5	[BUG]  [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  b.length  +  1);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	18	None	add
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
7	[BUG]  [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	add
8	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	16	1	add
9	[BUG]  [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	16	1	add
10	[BUG]  [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(a.length);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	16	None	add
11	[BUG]  [BUGGY]  throw  new  DimensionMismatchException(a[0],  b[1]);  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  throw  new  DimensionMismatchException(a[0],  b[1]);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	throw  new  DimensionMismatchException(a[0],  b[1]);	      if(a.length    <    2)    {    throw    new    DimensionMismatchException(a[0],    b[1]);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)	13	None	replace
12	[BUG]  [BUGGY]  allowMismatchException(a[0],  b[1]);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  allowMismatchException(a[0],  b[1]);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	allowMismatchException(a[0],  b[1]);	      if(a.length    <    2)    {    throw    new    DimensionMismatchException(a[0],    b[1]);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
13	[BUG]  [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  int  aLowSum  =  Math.min(a.length,  b.length);  [CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  int  aLowSum  =  Math.min(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        final    int    aLowSum    =    Math.min(a.length,    b.length);    final  int  aLowSum  =  Math.min(a.length,  b.length);	  	non-compiled	[CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])	9	None	add
14	[BUG]  [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  int  aLowSum  =  Math.max(a.length,  b.length);  [CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  int  aLowSum  =  Math.max(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        final    int    aLowSum    =    Math.min(a.length,    b.length);    final  int  aLowSum  =  Math.max(a.length,  b.length);	  	non-compiled	[CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])	9	None	add
15	[BUG]  [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  int  aLowSum  =  Math.min(a.length,  b.length);  [CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  int  aLowSum  =  Math.min(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        final    int    aLowSum    =    Math.min(a.length,    b.length);    int  aLowSum  =  Math.min(a.length,  b.length);	  	non-compiled	[CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])	9	None	add
16	[BUG]  [BUGGY]  final  int  aLowSum  =  Math.min(a.length,  prodLowSum);  [CE]  cannot  find  symbol  prodLowSum  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  aLowSum  =  Math.min(a.length,  prodLowSum);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  aLowSum  =  Math.min(a.length,  prodLowSum);	      final    int    aLowSum    =    Math.min(a.length,    prodHigh);    	non-compiled	[CE]  cannot  find  symbol  prodLowSum	12	None	replace
17	[BUG]  [BUGGY]  final  int  aLowSum  =  Math.max(a.length,  prodLowSum);  [CE]  cannot  find  symbol  prodLowSum  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  aLowSum  =  Math.max(a.length,  prodLowSum);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  aLowSum  =  Math.max(a.length,  prodLowSum);	      final    int    aLowSum    =    Math.max(a.length,    prodHigh);    	non-compiled	[CE]  cannot  find  symbol  prodLowSum	11	None	replace
18	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1;  final  int  len  =  a.length  -  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  -  1;  final  int  len  =  a.length  -  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    1;    final  int  len  =  a.length  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	5	None	add
19	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1;  int  len  =  a.length  -  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  -  1;  int  len  =  a.length  -  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    1;    int  len  =  a.length  -  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	5	None	add
20	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length  -  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  b.length  -  1;	  final    int    len    =    b.length;    	compilable	  [FE]  DimensionMismatchException  	19	4	replace
21	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1;  [FE]  DimensionMismatchException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length  -  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  b.length  -  1;	  final    int    len    =    b.length;    	compilable	  [FE]  DimensionMismatchException  	19	4	replace
22	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  -  2;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  -  2;	  final    int    len    =    a.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	6	4	replace
23	[BUG]  [BUGGY]  final  int  len  =  a.length  -  2;  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  -  2;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  -  2;	  final    int    len    =    a.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	6	4	replace
24	[BUG]  [BUGGY]  final  int  aLowSum  =  Math.max(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  aLowSum  =  Math.max(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  aLowSum  =  Math.max(a.length,  b.length);	      final    int    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	10	None	replace
25	[BUG]  [BUGGY]  final  double  aLowSum  =  Math.min(a.length,  b.length);  [CE]  cannot  find  symbol  len  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  double  aLowSum  =  Math.min(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  double  aLowSum  =  Math.min(a.length,  b.length);	      final    int    aLowSum    =    Math.min(a.length,    b.length);    	non-compiled	[CE]  cannot  find  symbol  len	10	None	replace
26	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	14	1	add
27	[BUG]  [BUGGY]      if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	14	1	add
28	[BUG]  [BUGGY]      if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a,  b.length);  }  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],int)  [FE]      DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a,  b.length);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double[],int)	14	None	add
29	[BUG]  [BUGGY]      if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }  [CE]  cannot  find  symbol  length  [FE]        DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    <    2)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  <  2)  {  throw  new  DimensionMismatchException(a.length,  b[length]);  }	  	non-compiled	[CE]  cannot  find  symbol  length	14	None	add
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  /  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  /  1;	  final    int    len    =    a.length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
31	[BUG]  [BUGGY]  final  int  len  =  a.length  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  /  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  /  1;	  final    int    len    =    a.length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
32	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	1	4	add
33	[BUG]  [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	1	4	add
34	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	1	4	add
35	[BUG]  [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]      DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length!=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	1	4	add
36	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	1	4	add
37	[BUG]  [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  ==  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    if(a.length  >=  b.length)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	compilable	  [FE]  DimensionMismatchException  	1	4	add
38	[BUG]  [BUGGY]  final  int  len  =  a.length  +  1;  final  int  len  =  a.length  +  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  +  1;  final  int  len  =  a.length  +  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    +    1;    final  int  len  =  a.length  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	7	None	add
39	[BUG]  [BUGGY]  final  int  len  =  a.length  +  1;  int  len  =  a.length  +  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  +  1;  int  len  =  a.length  +  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    +    1;    int  len  =  a.length  +  1;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	7	None	add
40	[BUG]  [BUGGY]  final  int  len  =  a.length  +  1;  final  int  len  =  a.length  +  2;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  +  1;  final  int  len  =  a.length  +  2;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    +    1;    final  int  len  =  a.length  +  2;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	7	None	add
41	[BUG]  [BUGGY]  Math.min(a.length,  b.length))  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  Math.min(a.length,  b.length))  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	Math.min(a.length,  b.length))  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }	      if(a.length!=    b.length)    {    throw    new    DimensionMismatchException(a[0],    b[1]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
42	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1;  final  int  len  =  a.length  -  2;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  -  1;  final  int  len  =  a.length  -  2;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    -    1;    final  int  len  =  a.length  -  2;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	5	None	add
43	[BUG]  [BUGGY]  aughtException(a[0],  b[1]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  aughtException(a[0],  b[1]);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	aughtException(a[0],  b[1]);	      if(a.length    <    2)    {    throw    new    DimensionMismatchException(a[0],    b[1]);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
44	[BUG]  [BUGGY]  final  int  len  =  b.length;  int  len  =  b.length;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length;  int  len  =  b.length;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length;    int  len  =  b.length;	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	18	None	add
45	[BUG]  [BUGGY]  final  int  len  =  a.length  +  1;  final  int  a.length  =  a.length  +  1;  [CE]  ';'  expected  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  +  1;  final  int  a.length  =  a.length  +  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    a.length    +    1;    final  int  a.length  =  a.length  +  1;	  	non-compiled	[CE]  ';'  expected	7	None	add
46	[BUG]  [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  a  =  new  DimensionMismatchException(a.length,  b.length);	      if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
47	[BUG]  [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length);  [CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  DimensionMismatchException  a  =  new  DimensionMismatchException(a.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	DimensionMismatchException  a  =  new  DimensionMismatchException(a.length);	      if(a.length    ==    b.length)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    	non-compiled	[CE]  variable  a  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
48	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  -  1  +  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	final  int  len  =  a.length  -  1  +  1;	  final    int    len    =    a.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
49	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    DimensionMismatchException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  a.length  -  1  +  1;  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final  int  len  =  a.length  -  1  +  1;	  final    int    len    =    a.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
50	[BUG]  [BUGGY]  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  if(a.length  <  1)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	if(a.length  <  1)  {  throw  new  DimensionMismatchException(a[0],  b[1]);  }	      if(a.length    <    2)    {    throw    new    DimensionMismatchException(a[0],    b[1]);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(double,double)	13	None	replace
51	[BUG]  [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  double  aLowSum  =  Math.min(a.length,  b.length);  [CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  double  aLowSum  =  Math.min(a.length,  b.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        final    int    aLowSum    =    Math.min(a.length,    b.length);    final  double  aLowSum  =  Math.min(a.length,  b.length);	  	non-compiled	[CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])	9	None	add
52	[BUG]  [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  int  aLowSum  =  Math.min(b.length,  a.length);  [CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      final  int  aLowSum  =  Math.min(a.length,  b.length);  final  int  aLowSum  =  Math.min(b.length,  a.length);  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        final    int    aLowSum    =    Math.min(a.length,    b.length);    final  int  aLowSum  =  Math.min(b.length,  a.length);	  	non-compiled	[CE]  variable  aLowSum  is  already  defined  in  method  linearCombination(double[],double[])	9	None	add
53	[BUG]  [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length;    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(a.length);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	18	None	add
54	[BUG]  [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]  final  int  len  =  b.length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);  [BUGGY]    if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	final    int    len    =    b.length;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length);	  	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	18	None	add
55	[BUG]  [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  int  a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {    [BUGGY]      if(a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  int  a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }  [BUGGY]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	        if(a.length    <    1)    {    throw    new    DimensionMismatchException(a.length,    b.length);    }    int  a.length  <  1)  {  throw  new  DimensionMismatchException(a.length,  b.length);  }	  	non-compiled	[CE]  ';'  expected	16	None	add
