bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	final  double[]  prodHigh  =  new  double[len  -  2];	  final    double[]    prodHigh    =    new    double[len    -    1];    	compilable	  [FE]  NegativeArraySizeException  	5	4	replace
2	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  [FE]  NegativeArraySizeException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  -  2];	  final    double[]    prodHigh    =    new    double[len    -    1];    	compilable	  [FE]  NegativeArraySizeException  	5	4	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    System.arraycopy(a,    0,    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
4	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    System.arraycopy(a,    0,    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
5	[BUG]  [BUGGY]  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [CE]  cannot  find  symbol  prodHigh  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	System.arraycopy(a,  0,  prodHigh,  0,  b.length);	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    System.arraycopy(a,    0,    	non-compiled	[CE]  cannot  find  symbol  prodHigh	10	None	replace
6	[BUG]  [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [CE]  cannot  find  symbol  prodHigh  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodLowSum  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    }    	non-compiled	[CE]  cannot  find  symbol  prodHigh	7	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	      if(len    >    0)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
8	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	      if(len    >    0)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
9	[BUG]  [BUGGY]  final  int  len  =  a.length  -  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  int  len  =  a.length  -  1;  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  int  len  =  a.length  -  1;	      final    int    len    =    a.length;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
10	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i    	non-compiled	[CE]  ']'  expected	8	None	replace
11	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[    	non-compiled	[CE]  '.class'  expected	6	None	replace
13	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1;  [CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  int  len  =  b.length  -  1;  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  int  len  =  b.length  -  1;	      final    int    len    =    b.length;    	non-compiled	[CE]  variable  len  is  already  defined  in  method  linearCombination(double[],double[])	3	None	replace
14	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  final  double[]  prodHigh  =  new  double[len  -  1];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  final  double[]  prodHigh  =  new  double[len  -  1];  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    -    1];    final  double[]  prodHigh  =  new  double[len  -  1];	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	4	None	add
15	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    -    1];    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	4	None	add
16	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  Final  double[]  prodHigh  =  new  double[len  -  1];  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  Final  double[]  prodHigh  =  new  double[len  -  1];  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    -    1];    Final  double[]  prodHigh  =  new  double[len  -  1];	  	non-compiled	[CE]  not  a  statement	4	None	add
17	[BUG]  [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  cannot  find  symbol  prodHigh  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	      if(len    >    0)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	non-compiled	[CE]  cannot  find  symbol  prodHigh	9	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	final  double[]  prodHigh  =  new  double[len  *  1];	  final    double[]    prodHigh    =    new    double[len    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
19	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  *  1];	  final    double[]    prodHigh    =    new    double[len    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
20	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  double[]  prodHigh  =  new  double[len  -  1];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  double[]  prodHigh  =  new  double[len  -  1];  [BUGGY]    double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    -    1];    double[]  prodHigh  =  new  double[len  -  1];	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	4	None	add
21	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }      [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [BUGGY]    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[	      if(len    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i    	non-compiled	[CE]  '.class'  expected	8	None	replace
