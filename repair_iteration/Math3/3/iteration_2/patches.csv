bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	7	None	add
2	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	7	None	add
3	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  final  double[]  prodHigh  =  new  double[len];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  final  double[]  prodHigh  =  new  double[len];  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    final  double[]  prodHigh  =  new  double[len];	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	7	None	add
4	[BUG]  [BUGGY]  if(b.length  >  0)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  }  [CE]  cannot  find  symbol  prodHigh  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  if(b.length  >  0)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  }  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	if(b.length  >  0)  {  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  }	  final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    	non-compiled	[CE]  cannot  find  symbol  prodHigh	4	None	replace
5	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  +  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  +  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  +  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[    	non-compiled	[CE]  '.class'  expected	12	None	replace
6	[BUG]  [BUGGY]  final  int  prodHigh  =  new  int[len  -  1];  final  int  prodHigh  =  new  double[len  -  1];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  int  prodHigh  =  new  int[len  -  1];  final  int  prodHigh  =  new  double[len  -  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  int  prodHigh  =  new  int[len  -  1];  final  int  prodHigh  =  new  double[len  -  1];	  final    double[]    prodHigh    =    new    double[len    -    1];    Final    double[]    prodHigh    =    new    double[len    -    1];    	non-compiled	[CE]  incompatible  types	16	None	replace
7	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  final  double[]  prodHigh  =  new  double[len  -  2];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    NegativeArraySizeException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  final  double[]  prodHigh  =  new  double[len  -  2];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    -    2];    final  double[]  prodHigh  =  new  double[len  -  2];	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	1	None	add
8	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  Final  double[]  prodHigh  =  new  double[len  -  2];  [CE]  not  a  statement  [FE]      NegativeArraySizeException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  Final  double[]  prodHigh  =  new  double[len  -  2];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    -    2];    Final  double[]  prodHigh  =  new  double[len  -  2];	  	non-compiled	[CE]  not  a  statement	1	None	add
9	[BUG]  [BUGGY]  if(len  >  0)  {  final  double[]  prodHigh  =  new  double[len  -  1];  double[]  prodHigh  =  new  double[len  -  1];  }  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  if(len  >  0)  {  final  double[]  prodHigh  =  new  double[len  -  1];  double[]  prodHigh  =  new  double[len  -  1];  }  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	if(len  >  0)  {  final  double[]  prodHigh  =  new  double[len  -  1];  double[]  prodHigh  =  new  double[len  -  1];  }	  final    double[]    prodHigh    =    new    double[len    -    1];    double[]    prodHigh    =    new    double[len    -    1];    	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	20	None	replace
10	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  final  double[]  prodHigh  =  new  double[len  *  1];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  final  double[]  prodHigh  =  new  double[len  *  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    *    1];    final  double[]  prodHigh  =  new  double[len  *  1];	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	18	None	add
11	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  final  double[]  prodHigh  =  new  double[len  *  1);  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  final  double[]  prodHigh  =  new  double[len  *  1);  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    *    1];    final  double[]  prodHigh  =  new  double[len  *  1);	  	non-compiled	[CE]  ']'  expected	18	None	add
12	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[low];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  cannot  find  symbol  low  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[low];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[low];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	non-compiled	[CE]  cannot  find  symbol  low	8	None	replace
13	[BUG]  [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodLowSum  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[    	non-compiled	[CE]  '.class'  expected	21	None	replace
14	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);	  final    double[]    prodHigh    =    new    double[len    -    1];    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length,    len);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	15	None	replace
15	[BUG]  [BUGGY]  final  int  prodHigh  =  new  int[len  -  1];  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  int  prodHigh  =  new  int[len  -  1];  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  int  prodHigh  =  new  int[len  -  1];  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);	  final    double[]    prodHigh    =    new    double[len    -    1];    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length,    len);    	non-compiled	[CE]  incompatible  types	15	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(a,  0,  prodLow,  0,  b.length);  [CE]  cannot  find  symbol  prodLow  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  System.arraycopy(a,  0,  prodLow,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	System.arraycopy(a,  0,  prodLow,  0,  b.length);	  System.arraycopy(a,    0,    prodHigh,    0,    b.length);    	non-compiled	[CE]  cannot  find  symbol  prodLow	5	None	replace
17	[BUG]  [BUGGY]  final  int[]  prodHigh  =  new  int[len];  for(int  i  =  0;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  int[]  prodHigh  =  new  int[len];  for(int  i  =  0;  i  <  len;  i++)  {  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  int[]  prodHigh  =  new  int[len];  for(int  i  =  0;  i  <  len;  i++)  {	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  System.arraycopy(a,  0,  prodLowSum,  0,  b.length);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodLowSum  =  new  double[len];  System.arraycopy(a,  0,  prodLowSum,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodLowSum  =  new  double[len];  System.arraycopy(a,  0,  prodLowSum,  0,  b.length);	  final    double[]    prodLowSum    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	6	None	replace
19	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  }  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  }  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  }	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i    	non-compiled	[CE]  ']'  expected	10	None	replace
20	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	3	None	add
21	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(b,  0,  prodHigh,  0,  b.length);  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(b,  0,  prodHigh,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    final  double[]  prodHigh  =  new  double[len];  System.arraycopy(b,  0,  prodHigh,  0,  b.length);	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	3	None	add
22	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a.length,  len);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	3	None	add
23	[BUG]  [BUGGY]  System.arraycopy(a,  0,  prodLowSum,  0,  b.length);  [CE]  cannot  find  symbol  prodLowSum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  System.arraycopy(a,  0,  prodLowSum,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	System.arraycopy(a,  0,  prodLowSum,  0,  b.length);	  System.arraycopy(a,    0,    prodHigh,    0,    b.length);    	non-compiled	[CE]  cannot  find  symbol  prodLowSum	5	None	replace
24	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    System.arraycopy(a,  0,  prodHigh,  0,  b.length);	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	3	None	add
25	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  /  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	final  double[]  prodHigh  =  new  double[len  /  1];	  final    double[]    prodHigh    =    new    double[len    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
26	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  /  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  /  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  /  1];	  final    double[]    prodHigh    =    new    double[len    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
27	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  -  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[    	non-compiled	[CE]  '.class'  expected	12	None	replace
28	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  -  1];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i    	non-compiled	[CE]  ']'  expected	10	None	replace
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  double[]  prodHigh  =  new  double[len  -  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	double[]  prodHigh  =  new  double[len  -  1];	  final    double[]    prodHigh    =    new    double[len    -    1];    double[]    prodHigh    =    new    double[len    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	4	replace
30	[BUG]  [BUGGY]  double[]  prodHigh  =  new  double[len  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  double[]  prodHigh  =  new  double[len  -  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	double[]  prodHigh  =  new  double[len  -  1];	  final    double[]    prodHigh    =    new    double[len    -    1];    double[]    prodHigh    =    new    double[len    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	4	replace
31	[BUG]  [BUGGY]  final  int  prodHigh  =  new  double[len  -  1];  final  int  prodHigh  =  new  double[len  -  1];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  int  prodHigh  =  new  double[len  -  1];  final  int  prodHigh  =  new  double[len  -  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  int  prodHigh  =  new  double[len  -  1];  final  int  prodHigh  =  new  double[len  -  1];	  final    double[]    prodHigh    =    new    double[len    -    1];    final    double[]    prodHigh    =    new    double[len    -    1];    	non-compiled	[CE]  incompatible  types	14	None	replace
32	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len];    System.arraycopy(a,    0,    prodHigh,    0,    b.length);    double[]  prodHigh  =  new  double[len];  System.arraycopy(a,  0,  prodHigh,  0,  b.length);	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	3	None	add
33	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  len);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  len);  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(a,  len);	  final    double[]    prodHigh    =    new    double[len    -    1];    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(a.length,    len);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double[],int)	15	None	replace
34	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  double[]  prodHigh  =  new  double[len  -  2];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    NegativeArraySizeException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  -  2];  double[]  prodHigh  =  new  double[len  -  2];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    -    2];    double[]  prodHigh  =  new  double[len  -  2];	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	1	None	add
35	[BUG]  [BUGGY]  System.arraycopy(b,  0,  a,  0,  b.length);  [CE]  cannot  find  symbol  prodHigh  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  System.arraycopy(b,  0,  a,  0,  b.length);  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	System.arraycopy(b,  0,  a,  0,  b.length);	  System.arraycopy(a,    0,    prodHigh,    0,    b.length);    	non-compiled	[CE]  cannot  find  symbol  prodHigh	5	None	replace
36	[BUG]  [BUGGY]  if(b!=  null)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  if(b!=  null)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]      final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	if(b!=  null)  {  final  double[]  prodHigh  =  new  double[len];  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	  final    double[]    prodHigh    =    new    double[len];    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    NegativeArraySizeException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  /  2];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	final  double[]  prodHigh  =  new  double[len  /  2];	  final    double[]    prodHigh    =    new    double[len    -    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
38	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  /  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    NegativeArraySizeException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  /  2];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final  double[]  prodHigh  =  new  double[len  /  2];	  final    double[]    prodHigh    =    new    double[len    -    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
39	[BUG]  [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  double[]  prodHigh  =  new  double[len  *  1];  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  DimensionMismatchException  {  final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }        [BUGGY]  final  double[]  prodHigh  =  new  double[len  *  1];  double[]  prodHigh  =  new  double[len  *  1];  [BUGGY]      double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	final    double[]    prodHigh    =    new    double[len    *    1];    double[]  prodHigh  =  new  double[len  *  1];	  	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	18	None	add
