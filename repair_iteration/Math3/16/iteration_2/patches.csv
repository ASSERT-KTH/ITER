bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodHighPrev);  [CE]  cannot  find  symbol  prodHighPrev  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodHighPrev);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  =  Math.max(prodLowSum,  prodHighPrev);	  prodLowSum    =    Math.max(prodLowSum,    prodHighCur);    	non-compiled	[CE]  cannot  find  symbol  prodHighPrev	18	None	replace
2	[BUG]  [BUGGY]  if(prodLow  <  =  0)  {  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(prodLow  <  =  0)  {  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(prodLow  <  =  0)  {  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  return  bLow;  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  return  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  return  bLow;  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    return    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
4	[BUG]  [BUGGY]  if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  return  bLow;  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  return  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  return  bLow;  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    return    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
5	[BUG]  [BUGGY]  final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	21	None	replace
6	[BUG]  [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	21	None	replace
7	[BUG]  [BUGGY]  sLowSum  +=  prodLow;  [CE]  cannot  find  symbol  sLowSum  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  sLowSum  +=  prodLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	sLowSum  +=  prodLow;	  ProdLowSum    +=    prodLow;    	non-compiled	[CE]  cannot  find  symbol  sLowSum	28	None	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	3	add
9	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	3	add
10	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow	  	non-compiled	[CE]  ';'  expected	53	None	add
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	3	add
12	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	3	add
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	3	add
14	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	3	add
15	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLow  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLow  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLow	  	non-compiled	[CE]  ';'  expected	46	None	add
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	3	add
17	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	3	add
18	[BUG]  [BUGGY]  final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);	  final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)+    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	22	None	replace
19	[BUG]  [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)+  aHigh  *  bHigh);	  final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)+    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	22	None	replace
20	[BUG]  [BUGGY]  if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
21	[BUG]  [BUGGY]  if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalStateException( " ");  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
22	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  double    prodLowSum    =    bLow    *    bLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	43	None	replace
23	[BUG]  [BUGGY]  double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  double    prodLowSum    =    bLow    *    bLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	43	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  prodLowSum  -=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    -=    bHigh;    prodLowSum  -=  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
25	[BUG]  [BUGGY]  prodLowSum  -=  bHigh;  prodLowSum  -=  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  prodLowSum  -=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    -=    bHigh;    prodLowSum  -=  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  if(prodLowSum  >  bHigh)  {  prodLowSum  -=  bHigh;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    -=    bHigh;    if(prodLowSum  >  bHigh)  {  prodLowSum  -=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
27	[BUG]  [BUGGY]  prodLowSum  -=  bHigh;  if(prodLowSum  >  bHigh)  {  prodLowSum  -=  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  if(prodLowSum  >  bHigh)  {  prodLowSum  -=  bHigh;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    -=    bHigh;    if(prodLowSum  >  bHigh)  {  prodLowSum  -=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	add
28	[BUG]  [BUGGY]  prodLowSum  -=  bHigh;  ProdLowSum  -=  bHigh;  [CE]  cannot  find  symbol  ProdLowSum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  ProdLowSum  -=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    -=    bHigh;    ProdLowSum  -=  bHigh;	  	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	15	None	add
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  prodLowSum  +=  prodLowSum;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    prodLowSum;    prodLowSum  +=  prodLowSum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
30	[BUG]  [BUGGY]  prodLowSum  +=  prodLowSum;  prodLowSum  +=  prodLowSum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  prodLowSum  +=  prodLowSum;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    prodLowSum;    prodLowSum  +=  prodLowSum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
32	[BUG]  [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
34	[BUG]  [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
35	[BUG]  [BUGGY]  double  bHigh  =  prodLow;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  bHigh  =  prodLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  bHigh  =  prodLow;	  prodLowSum    +=    bHigh;    double    bHigh    =    bHigh;    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	55	None	replace
36	[BUG]  [BUGGY]  bHigh  +=  prodLowSum;  [CE]  cannot  assign  a  value  to  final  variable  bHigh  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  bHigh  +=  prodLowSum;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	bHigh  +=  prodLowSum;	  prodLowSum    +=    bHigh;    double    bHigh    =    bHigh;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bHigh	55	None	replace
37	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    bLow    *    bLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	38	None	replace
38	[BUG]  [BUGGY]  double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  ai  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    bLow    *    bLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	38	None	replace
39	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    bLow    *    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	37	None	replace
40	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    bLow    *    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	37	None	replace
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  -=  bHigh;  prodLowSum  +=  bHigh;	  prodLowSum    +=    bHigh;    prodLowSum    +=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	3	replace
42	[BUG]  [BUGGY]  prodLowSum  -=  bHigh;  prodLowSum  +=  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  -=  bHigh;  prodLowSum  +=  bHigh;	  prodLowSum    +=    bHigh;    prodLowSum    +=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	3	replace
43	[BUG]  [BUGGY]  double  prodLowSum  +=  bHigh;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  +=  bHigh;	  prodLowSum    +=    bHigh;    double    prodLowSum    +=    bHigh;    	non-compiled	[CE]  ';'  expected	42	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
45	[BUG]  [BUGGY]  if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
46	[BUG]  [BUGGY]  final  double  prodHigh  =  bLow;  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  prodHigh  =  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  prodHigh  =  bLow;	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow;    }    	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	39	None	replace
47	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	Context.reportCodeChange();	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow;    }    	non-compiled	[CE]  cannot  find  symbol  Context	39	None	replace
48	[BUG]  [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  prodHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  prodHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  prodHigh  *  bHigh);	          final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)/    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
49	[BUG]  [BUGGY]  final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);	          final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)/    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
50	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	26	None	replace
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
52	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
53	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  ProdLowSum  +=  bLow;  prodLowSum  +=  bLow;  [CE]  cannot  find  symbol  ProdLowSum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  ProdLowSum  +=  bLow;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    ProdLowSum  +=  bLow;  prodLowSum  +=  bLow;	  	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	10	None	add
54	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
55	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    if(prodLowSum  >  0)  {  prodLowSum  +=  bLow;  prodLowSum  +=  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
56	[BUG]  [BUGGY]  bHigh  +=  prodLow;  [CE]  cannot  assign  a  value  to  final  variable  bHigh  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  bHigh  +=  prodLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	bHigh  +=  prodLow;	  prodLowSum    +=    bHigh;    bHigh    +=    bHigh;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bHigh	36	None	replace
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	add
58	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	add
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	add
60	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	3	add
61	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >	  	non-compiled	[CE]  ')'  expected	6	None	add
62	[BUG]  [BUGGY]  ProdLowSum  =  Math.max(prodLow,  prodHighNext);  [CE]  cannot  find  symbol  ProdLowSum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  ProdLowSum  =  Math.max(prodLow,  prodHighNext);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  =  Math.max(prodLow,  prodHighNext);	  ProdLowSum    =    Math.max(prodLowSum,    prodHighNext);    	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	48	None	replace
63	[BUG]  [BUGGY]  ProdLowSum  +=  bHigh;  [CE]  cannot  find  symbol  ProdLowSum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  ProdLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  +=  bHigh;	  prodLowSum    +=    bHigh;    ProdLowSum    +=    bHigh;    	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	35	None	replace
64	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLow	  	non-compiled	[CE]  ';'  expected	49	None	add
65	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	3	add
66	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	3	add
67	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  pro  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  pro  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  pro	  	non-compiled	[CE]  ';'  expected	49	None	add
68	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    aHigh    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	52	None	replace
69	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    bLow    *    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
70	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    bLow    *    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	2	None	replace
71	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	add
72	[BUG]  [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	add
73	[BUG]  [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  ProdLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [CE]  cannot  find  symbol  ProdLowSum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  ProdLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    ProdLowSum  +=  bHigh;  prodLowSum  +=  bHigh;	  	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	33	None	add
74	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  if(prodLowSum  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    if(prodLowSum  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	add
75	[BUG]  [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  if(prodLowSum  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  if(prodLowSum  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    if(prodLowSum  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	add
76	[BUG]  [BUGGY]  if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  <  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
77	[BUG]  [BUGGY]  if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  <  =  prodLow.length)  {  if(bHigh  >  0)  {  throw  new  IllegalArgumentException( " ");  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
78	[BUG]  [BUGGY]  ProdLowSum  +=  bLow;  [CE]  cannot  find  symbol  ProdLowSum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  ProdLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  +=  bLow;	  prodLowSum    +=    bLow;    ProdLowSum    +=    bLow;    	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	12	None	replace
79	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  =  Math.max(prodLowSum,  prodLow);	  prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	3	replace
80	[BUG]  [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodLow);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  prodLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  =  Math.max(prodLowSum,  prodLow);	  prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	3	replace
81	[BUG]  [BUGGY]  final  double  prodHigh  =  bLow  *  bLow;  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  prodHigh  =  bLow  *  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  prodHigh  =  bLow  *  bLow;	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    *    bLow;    }    	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	40	None	replace
82	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	27	None	replace
83	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh))  -  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aHigh    *    bLow    +(((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  ';'  expected	24	None	replace
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  prodLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  -=  prodLow;	  prodLowSum    -=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	3	replace
85	[BUG]  [BUGGY]  prodLowSum  -=  prodLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  prodLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  -=  prodLow;	  prodLowSum    -=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	3	replace
86	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
87	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
88	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow	  	non-compiled	[CE]  ';'  expected	8	None	add
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
90	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	3	add
91	[BUG]  [BUGGY]  prodLowSum  +=  prodHighCur;  [CE]  cannot  find  symbol  prodHighCur  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodHighCur;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  +=  prodHighCur;	  prodLowSum    +=    prodHigh;    	non-compiled	[CE]  cannot  find  symbol  prodHighCur	56	None	replace
92	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
93	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  final  double  prodLowSum  =  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  final  double  prodLowSum  =  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    final  double  prodLowSum  =  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	13	None	add
94	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum        +=        bLow;        if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	add
95	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	add
96	[BUG]  [BUGGY]  final  double  prodHigh  =  bLow  +  bLow;  [CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  prodHigh  =  bLow  +  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  prodHigh  =  bLow  +  bLow;	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    +    bLow;    }    	non-compiled	[CE]  variable  prodHigh  is  already  defined  in  method  linearCombination(double[],double[])	41	None	replace
97	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	add
98	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	add
99	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLow	  	non-compiled	[CE]  ';'  expected	3	None	add
100	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	add
101	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	add
102	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bHigh  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aLow    *    bLow    +(((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	23	None	replace
103	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    ai    *    bLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	51	None	replace
104	[BUG]  [BUGGY]  double  prodLowSum  +=  bLow;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  +=  bLow;	  prodLowSum    +=    bLow;    double    prodLowSum    +=    bLow;    	non-compiled	[CE]  ';'  expected	44	None	replace
105	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  bHigh;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  +=  bHigh;  prodLowSum  +=  bLow;	  prodLowSum    +=    bLow;    prodLowSum    +=    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
106	[BUG]  [BUGGY]  prodLowSum  +=  bHigh;  prodLowSum  +=  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  bHigh;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  +=  bHigh;  prodLowSum  +=  bLow;	  prodLowSum    +=    bLow;    prodLowSum    +=    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
107	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  =  Math.max(prodLowSum,  bHigh);	  prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	replace
108	[BUG]  [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  bHigh);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  =  Math.max(prodLowSum,  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  =  Math.max(prodLowSum,  bHigh);	  prodLowSum    =    Math.max(prodLowSum,    prodHighNext);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	4	replace
109	[BUG]  [BUGGY]  if(b  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  *  bLow;  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(b  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  *  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(b  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  *  bLow;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    *    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
110	[BUG]  [BUGGY]  if(b  >  1)  {  if(bHigh  >  1)  {  prodHigh  =  bLow  *  bLow;  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(b  >  1)  {  if(bHigh  >  1)  {  prodHigh  =  bLow  *  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(b  >  1)  {  if(bHigh  >  1)  {  prodHigh  =  bLow  *  bLow;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    *    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
111	[BUG]  [BUGGY]  prodLowSum  -=  bHigh;  double  prodLowSum  -=  bHigh;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  double  prodLowSum  -=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    -=    bHigh;    double  prodLowSum  -=  bHigh;	  	non-compiled	[CE]  ';'  expected	15	None	add
112	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    bLow    *    bLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	38	None	replace
113	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	3	add
114	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	3	add
115	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prod  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prod  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLow;  }  if(prodLowSum  >  0)  {  prod	  	non-compiled	[CE]  ';'  expected	49	None	add
116	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bLow;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  -=  bLow;  prodLowSum  +=  bLow;	  prodLowSum    +=    bLow;    prodLowSum    +=    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
117	[BUG]  [BUGGY]  prodLowSum  -=  bLow;  prodLowSum  +=  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bLow;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  -=  bLow;  prodLowSum  +=  bLow;	  prodLowSum    +=    bLow;    prodLowSum    +=    bLow;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
118	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aLow    *    bLow    +(((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	23	None	replace
119	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  pro  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  pro  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  pro	  	non-compiled	[CE]  ';'  expected	53	None	add
120	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	add
121	[BUG]  [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    if(bHigh  >  0)  {  prodLowSum  +=  bHigh;  prodLowSum  +=  bHigh;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	4	add
122	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    aHigh    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	52	None	replace
123	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
124	[BUG]  [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLowSum;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  else  {  prodLowSum  +=  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
125	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh  +  1;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum  -=  bHigh  +  1;	  prodLowSum    -=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	4	replace
126	[BUG]  [BUGGY]  prodLowSum  -=  bHigh  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh  +  1;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  -=  bHigh  +  1;	  prodLowSum    -=    bHigh;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	4	replace
127	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  if(bLow  >  bLow)  {  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  if(bLow  >  bLow)  {  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    if(bLow  >  bLow)  {  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
128	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  double  prodLowSum  =  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  double  prodLowSum  =  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    double  prodLowSum  =  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	13	None	add
129	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  bLowSum  +=  bLow;  prodLowSum  +=  bLow;  [CE]  cannot  find  symbol  bLowSum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  bLowSum  +=  bLow;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    bLowSum  +=  bLow;  prodLowSum  +=  bLow;	  	non-compiled	[CE]  cannot  find  symbol  bLowSum	10	None	add
130	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	27	None	replace
131	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prod  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prod  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prod	  	non-compiled	[CE]  ';'  expected	6	None	add
132	[BUG]  [BUGGY]  if(bHigh  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow;  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
133	[BUG]  [BUGGY]  if(bLow  >  1)  {  prodHigh  =  bLow;  }  [CE]  cannot  assign  a  value  to  final  variable  prodHigh  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  >  1)  {  prodHigh  =  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bLow  >  1)  {  prodHigh  =  bLow;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  prodHigh	39	None	replace
134	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  pro  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  pro  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  pro	  	non-compiled	[CE]  ';'  expected	3	None	add
135	[BUG]  [BUGGY]  final  double  bHigh  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  prodHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  prodHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  prodHigh  *  bHigh);	          final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)/    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
136	[BUG]  [BUGGY]  ProdLowSum  =  Math.max(prodLowSum,  prodHighCur);  [CE]  cannot  find  symbol  ProdLowSum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  ProdLowSum  =  Math.max(prodLowSum,  prodHighCur);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  =  Math.max(prodLowSum,  prodHighCur);	  if(prodLowSum    >    0)    {    prodLowSum    =    Math.max(prodLowSum,    prodHighCur);    }    	non-compiled	[CE]  cannot  find  symbol  ProdLowSum	60	None	replace
137	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  double    prodLowSum    =    bLow    *    bLow    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	43	None	replace
138	[BUG]  [BUGGY]  if(bLow  >  0)  {  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  }  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  >  0)  {  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bLow  >  0)  {  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    double    prodLowSum    +=    bLow;    	non-compiled	[CE]  ';'  expected	44	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  >  0)  {  return  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	if(bHigh  >  0)  {  return  bLow;  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    return    bLow;    }    	compilable	  [FE]  AssertionError  	58	4	replace
140	[BUG]  [BUGGY]  if(bHigh  >  0)  {  return  bLow;  }  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  >  0)  {  return  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  >  0)  {  return  bLow;  }	          if(bLow    <    =    prodHigh.length)    {    if(bHigh    >    0)    {    return    bLow;    }    	compilable	  [FE]  AssertionError  	58	4	replace
141	[BUG]  [BUGGY]  final  double  bHigh  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	21	None	replace
142	[BUG]  [BUGGY]  double  prodLowSum  =  bHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bHigh  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    aLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	32	None	replace
143	[BUG]  [BUGGY]  double  bHigh  =  bHigh;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  bHigh  =  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  bHigh  =  bHigh;	  prodLowSum    +=    bHigh;    double    bHigh    =    bHigh;    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	55	None	replace
144	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	3	add
145	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	3	add
146	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prod  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prod  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    =    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLowSum;  }  if(prodLowSum  >  0)  {  prodLowSum  =  prodLowSum;  }  if(prodLowSum  >  0)  {  prod	  	non-compiled	[CE]  ';'  expected	46	None	add
147	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prod  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prod  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLowSum;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prod	  	non-compiled	[CE]  ';'  expected	8	None	add
148	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  >  prodLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	if(bLow  >  prodLow)  {  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
149	[BUG]  [BUGGY]  if(bLow  >  prodLow)  {  prodLowSum  +=  bLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  >  prodLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bLow  >  prodLow)  {  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
150	[BUG]  [BUGGY]  if(bHigh  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  +  1;  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  +  1;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  +  1;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    +    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
151	[BUG]  [BUGGY]  if(b  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  +  1;  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(b  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  +  1;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(b  >  1)  {  if(bLow  >  1)  {  prodHigh  =  bLow  +  1;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    +    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
152	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  double    prodLowSum    =    aHigh    *    bLow    +(((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	24	None	replace
153	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLow  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLow  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLow	  	non-compiled	[CE]  ';'  expected	53	None	add
154	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum	  	non-compiled	[CE]  ';'  expected	53	None	add
155	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLow  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLow  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLow    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLow  >  0)  {  prodLow	  	non-compiled	[CE]  ';'  expected	53	None	add
156	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }	          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	3	replace
157	[BUG]  [BUGGY]  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(prodLow  >  0)  {  prodLowSum  +=  prodLow;  }	          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLowSum;    }    if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	3	replace
158	[BUG]  [BUGGY]  double  prodLowSum  -=  bHigh;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  -=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  -=  bHigh;	  prodLowSum    +=    bHigh;    double    prodLowSum    +=    bHigh;    	non-compiled	[CE]  ';'  expected	42	None	replace
159	[BUG]  [BUGGY]  prodLowSum  -=  bHigh;  double  bHigh  =  prodLowSum  -=  bHigh;  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  bHigh;  double  bHigh  =  prodLowSum  -=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    -=    bHigh;    double  bHigh  =  prodLowSum  -=  bHigh;	  	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	15	None	add
160	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  double  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  double  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    double  prodLowSum  +=  bLow;  if(prodLowSum  >  bLow)  {  prodLowSum  +=  bLow;  }	  	non-compiled	[CE]  ';'  expected	13	None	add
161	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  else  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  else  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
162	[BUG]  [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  else  {  prodLowSum  +=  prodLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  +=  prodLowSum;  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  else  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum    +=    prodLowSum;    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  else  {  prodLowSum  +=  prodLow;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	3	add
163	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  ai  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  ai  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  ai  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    aHigh    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	52	None	replace
164	[BUG]  [BUGGY]  if(prodLow  <  =  0)  {  prodLowSum  +=  prodLow;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(prodLow  <  =  0)  {  prodLowSum  +=  prodLow;  }  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(prodLow  <  =  0)  {  prodLowSum  +=  prodLow;  }	          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum    >    0)    {    prodLowSum    =    prodLow;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
165	[BUG]  [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prod  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]          if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prod  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	                if(prodLowSum        >        0)        {        prodLowSum        +=        prodLow;        }        if(prodLowSum    >    0)    {    prodLowSum    +=    prodLow;    }    if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prodLowSum  +=  prodLow;  }  if(prodLowSum  >  0)  {  prod	  	non-compiled	[CE]  ';'  expected	3	None	add
166	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  [Delete]  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	[Delete]	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    *    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
167	[BUG]  [BUGGY]  pendLow  =  bHigh  *  bLow;  [CE]  cannot  find  symbol  pendLow  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  pendLow  =  bHigh  *  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	pendLow  =  bHigh  *  bLow;	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    *    bLow;    }    	non-compiled	[CE]  cannot  find  symbol  pendLow	40	None	replace
168	[BUG]  [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  bHigh  +=  bHigh;  prodLowSum  +=  bHigh;  [CE]  cannot  assign  a  value  to  final  variable  bHigh  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bHigh;    prodLowSum  +=  bHigh;  bHigh  +=  bHigh;  prodLowSum  +=  bHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bHigh;        prodLowSum    +=    bHigh;    bHigh  +=  bHigh;  prodLowSum  +=  bHigh;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bHigh	33	None	add
169	[BUG]  [BUGGY]  if(bHigh  >  1)  {  prodHigh  =  bLow;  }  [CE]  cannot  assign  a  value  to  final  variable  prodHigh  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bHigh  >  1)  {  prodHigh  =  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bHigh  >  1)  {  prodHigh  =  bLow;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  prodHigh	39	None	replace
170	[BUG]  [BUGGY]  if(bLow  <  =  1)  {  prodHigh  =  bLow;  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  <  =  1)  {  prodHigh  =  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bLow  <  =  1)  {  prodHigh  =  bLow;  }	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
171	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  ai;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    prodLowSum  +=  ai;  prodLowSum  +=  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
172	[BUG]  [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  ai;  prodLowSum  +=  bLow;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum    +=    bLow;    prodLowSum  +=  bLow;  prodLowSum  +=  ai;  prodLowSum  +=  bLow;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum        +=        bLow;        prodLowSum    +=    bLow;    prodLowSum  +=  ai;  prodLowSum  +=  bLow;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	4	add
173	[BUG]  [BUGGY]  double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  ai  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  ai  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  bLow  *  (((prodHigh[i]  -  aHigh  *  bHigh)-  ai  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    bLow    *    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	37	None	replace
174	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bHigh);	  double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bHigh);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	29	None	replace
175	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bLow  +(((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)-  aHigh  *  bHigh);	  double    prodLowSum    =    aLow    *    bLow    +(((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	23	None	replace
176	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  >  prodLowSum)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	add	if(bLow  >  prodLowSum)  {  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
177	[BUG]  [BUGGY]  if(bLow  >  prodLowSum)  {  prodLowSum  +=  bLow;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  >  prodLowSum)  {  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bLow  >  prodLowSum)  {  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    if(prodLowSum    >    bLow)    {    prodLowSum    +=    bLow;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
178	[BUG]  [BUGGY]  ProdLowSum  prodLowSum  =  Math.max(prodLowSum,  prodHighNext);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  ProdLowSum  prodLowSum  =  Math.max(prodLowSum,  prodHighNext);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	ProdLowSum  prodLowSum  =  Math.max(prodLowSum,  prodHighNext);	  ProdLowSum    =    Math.max(prodLowSum,    prodHighNext);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
179	[BUG]  [BUGGY]  >>  [Delete]  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  >>  [Delete]  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	>>  [Delete]	          if(b    >    0)    {    if(bLow    >    0)    {    prodHigh    =    bLow    +    bLow;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
180	[BUG]  [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow;  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aLow  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow;	  double    prodLowSum    =    aLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow;    	non-compiled	[CE]  ')'  expected	32	None	replace
181	[BUG]  [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);  [CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	final  double  bHigh  =  aHigh  *  bHigh  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aLow  *  bHigh)/  aHigh  *  bHigh);	  final    double    bHigh    =    prodLow    *    bHigh    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)+    aHigh    *    bHigh);    	non-compiled	[CE]  variable  bHigh  is  already  defined  in  method  linearCombination(double[],double[])	22	None	replace
182	[BUG]  [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow);  [CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow);  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	double  prodLowSum  =  aHigh[i]  -  (((prodHigh[i]  -  aHigh  *  bHigh)-  aItem  *  bHigh)-  aHigh  *  bLow);	  double    prodLowSum    =    aHigh[i]    -    (((prodHigh[i]    -    aHigh    *    bHigh)-    aLow    *    bHigh)-    aHigh    *    bLow);    	non-compiled	[CE]  variable  prodLowSum  is  already  defined  in  method  linearCombination(double[],double[])	26	None	replace
183	[BUG]  [BUGGY]  if(bLow  <  =  prodLow)  {  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  if(bLow  <  =  prodLow)  {  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  }  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	if(bLow  <  =  prodLow)  {  prodLowSum  +=  bLow;  double  prodLowSum  +=  bLow;  }	  prodLowSum    +=    bLow;    double    prodLowSum    +=    bLow;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
184	[BUG]  [BUGGY]  prodLowSum  -=  prodHigh;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  prodLowSum  -=  prodHigh;  [BUGGY]      }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	prodLowSum  -=  prodHigh;	  prodLowSum    -=    bHigh;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	16	None	replace
185	[BUG]  [BUGGY]  Double  prodLowSum  +=  prodLow;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  aHigh  *  bLow);      [BUGGY]  Double  prodLowSum  +=  prodLow;  [BUGGY]      prodLowSum  +=  prodLow;  }  final  double  prodHighCur  =  prodHigh[0];  double  prodHighNext  =  prodHigh[1];  double  sHighPrev  =  prodHighCur  +  prodHighNext;  double  sPrime  =  sHighPrev  -  prodHighNext;  double  sLowSum  =  (prodHighNext  -  (sHighPrev  -  sPrime))  +  (prodHighCur  -  sPrime);  final  int  lenMinusOne  =  len  -  1;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	841	841	1	replace	Double  prodLowSum  +=  prodLow;	  ProdLowSum    +=    prodLow;    	non-compiled	[CE]  ';'  expected	28	None	replace
