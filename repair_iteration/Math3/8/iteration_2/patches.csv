bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  aHigh);  [CE]  variable  aHigh  might  not  have  been  initialized  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  aHigh);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ai  -  (ca  *  aHigh);	  final    double    aHigh    =    ai    -    (ca    *    ai);    	non-compiled	[CE]  variable  aHigh  might  not  have  been  initialized	14	None	replace
2	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  aHighSum);  [CE]  cannot  find  symbol  aHighSum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  aHighSum);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ai  -  (ca  *  aHighSum);	  final    double    aHigh    =    ai    -    (ca    *    ai);    	non-compiled	[CE]  cannot  find  symbol  aHighSum	14	None	replace
3	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(prodHighSum  -  ai)*  prodHigh;  [CE]  cannot  find  symbol  prodHighSum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(prodHighSum  -  ai)*  prodHigh;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(prodHighSum  -  ai)*  prodHigh;	  final    double    aHigh    =    ca    -(ca    -    ai)*    prodHigh;    	non-compiled	[CE]  cannot  find  symbol  prodHighSum	4	None	replace
4	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(prodHighSum  -  ai)*  ai;  [CE]  cannot  find  symbol  prodHighSum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(prodHighSum  -  ai)*  ai;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(prodHighSum  -  ai)*  ai;	  final    double    aHigh    =    ca    -(ca    -    ai)*    prodHigh;    	non-compiled	[CE]  cannot  find  symbol  prodHighSum	4	None	replace
5	[BUG]  [BUGGY]  final  double  ai  =  ca  /  1;  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  /  1;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  /  1;	  final    double    ai    =    ca    *    1;    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	22	None	replace
6	[BUG]  [BUGGY]  final  double  ai  =  ca  *  2;  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *  2;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *  2;	  final    double    ai    =    ca    *    1;    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	22	None	replace
7	[BUG]  [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai),  prodLowSum  +  1);  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai),  prodLowSum  +  1);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai),  prodLowSum  +  1);	  final    double    ai    =    ca    *(ca    *    Math.log(prodHigh[i]    -    ai),    prodLowSum);    	non-compiled	[CE]  ')'  expected	31	None	replace
8	[BUG]  [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai)/  prodLowSum);  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai)/  prodLowSum);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai)/  prodLowSum);	  final    double    ai    =    ca    *(ca    *    Math.log(prodHigh[i]    -    ai),    prodLowSum);    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	31	None	replace
9	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodHigh[i]),  prodLowSum);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodHigh[i]),  prodLowSum);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodHigh[i]),  prodLowSum);	  final    double    ai    =    ca    *(prodHigh[i]    *    Math.log(prodHigh[i]));    	non-compiled	[CE]  ')'  expected	19	None	replace
10	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  [CE]  variable  aHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final    double    aHigh    =    ca    -(ca    -    i)*    prodLowSum;    final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;	  	non-compiled	[CE]  variable  aHigh  is  already  defined  in  method  linearCombination(double[],double[])	2	None	add
11	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  Final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  Final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final    double    aHigh    =    ca    -(ca    -    i)*    prodLowSum;    Final  double  aHigh  =  ca  -(ca  -  i)*  prodLowSum;	  	non-compiled	[CE]  not  a  statement	2	None	add
12	[BUG]  [BUGGY]  final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  prodLowSum));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  prodLowSum));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  prodLowSum));	  final    double    ai    =    ca    *(Math.log(prodHigh[i]    -    ai));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
13	[BUG]  [BUGGY]  final  double  ai  =  ai  -  (ca  -  ai);  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ai  -  (ca  -  ai);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ai  -  (ca  -  ai);	  final    double    aHigh    =    ai    -    (ca    -    ai);    final    double    ai    =    ai    -    (ca    -    ai);    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	8	None	replace
14	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(b[i]));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(b[i]));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(b[i]));	  final    double    ai    =    ca    *(b    *    Math.log(prodHigh[i]));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	27	None	replace
15	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(b));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(b));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(b));	  final    double    ai    =    ca    *(b    *    Math.log(prodHigh[i]));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	27	None	replace
16	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodLowSum  *  Math.log(prodHigh[i]  -  prodLowSum));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodLowSum  *  Math.log(prodHigh[i]  -  prodLowSum));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodLowSum  *  Math.log(prodHigh[i]  -  prodLowSum));	  final    double    ai    =    ca    *(ca    *    Math.log(prodHigh[i]    -    prodLowSum));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	16	None	replace
17	[BUG]  [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  /  prodLowSum));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  /  prodLowSum));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  /  prodLowSum));	  final    double    ai    =    ca    *(ca    *    Math.log(prodHigh[i]    -    prodLowSum));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	16	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  (ca  -  ai);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  (ca  -  ai);	  final    double    aHigh    =    ai    -    (ca    -    ai);    final    double    aHigh    =    (ca    -    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	3	replace
19	[BUG]  [BUGGY]  final  double  aHigh  =  (ca  -  ai);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  (ca  -  ai);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  (ca  -  ai);	  final    double    aHigh    =    ai    -    (ca    -    ai);    final    double    aHigh    =    (ca    -    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	3	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -  ai;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  ca  -  ai;	  final    double    aHigh    =    ai    -    (ca    -    ai);    final    double    aHigh    =    (ca    -    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	3	replace
21	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -  ai;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -  ai;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -  ai;	  final    double    aHigh    =    ai    -    (ca    -    ai);    final    double    aHigh    =    (ca    -    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	3	replace
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  ai;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  ca  -(ca  -  i)*  ai;	  final    double    aHigh    =    ca    -(ca    -    i)*    prodLowSum;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	replace
23	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  ai;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  ai;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(ca  -  i)*  ai;	  final    double    aHigh    =    ca    -(ca    -    i)*    prodLowSum;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)/  prodLowSum;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  ca  -(ca  -  i)/  prodLowSum;	  final    double    aHigh    =    ca    -(ca    -    i)*    prodLowSum;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	replace
25	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)/  prodLowSum;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)/  prodLowSum;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(ca  -  i)/  prodLowSum;	  final    double    aHigh    =    ca    -(ca    -    i)*    prodLowSum;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	3	replace
26	[BUG]  [BUGGY]  final  double  ai  =  prodHigh[i]  +  ca;  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  prodHigh[i]  +  ca;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  prodHigh[i]  +  ca;	  final    double    ai    =    prodHigh[i];    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	5	None	replace
27	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodHigh;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodHigh;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(ca  -  i)*  prodHigh;	  final    double    aHigh    =    ca    -(ca    -    ai)*    prodHighSum;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	26	None	replace
28	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodHighSum;  [CE]  cannot  find  symbol  prodHighSum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i)*  prodHighSum;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(ca  -  i)*  prodHighSum;	  final    double    aHigh    =    ca    -(ca    -    ai)*    prodHighSum;    	non-compiled	[CE]  cannot  find  symbol  prodHighSum	26	None	replace
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  prodHigh[i]  +  ca;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  prodHigh[i]  +  ca;	  final    double    aHigh    =    prodHigh[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	3	replace
30	[BUG]  [BUGGY]  final  double  aHigh  =  prodHigh[i]  +  ca;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  prodHigh[i]  +  ca;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  prodHigh[i]  +  ca;	  final    double    aHigh    =    prodHigh[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	3	replace
31	[BUG]  [BUGGY]  final  double  aHigh  =  prodHigh[i];  final  double  aHigh  =  prodHigh[i];  [CE]  variable  aHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  prodHigh[i];  final  double  aHigh  =  prodHigh[i];  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final    double    aHigh    =    prodHigh[i];    final  double  aHigh  =  prodHigh[i];	  	non-compiled	[CE]  variable  aHigh  is  already  defined  in  method  linearCombination(double[],double[])	23	None	add
32	[BUG]  [BUGGY]  final  double  aHigh  =  prodHigh[i];  Final  double  aHigh  =  prodHigh[i];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  prodHigh[i];  Final  double  aHigh  =  prodHigh[i];  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final    double    aHigh    =    prodHigh[i];    Final  double  aHigh  =  prodHigh[i];	  	non-compiled	[CE]  not  a  statement	23	None	add
33	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -  (ai  >  aHigh);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -  (ai  >  aHigh);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -  (ai  >  aHigh);	  final    double    aHigh    =    ca    -    (ai    >    ai);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	17	None	replace
34	[BUG]  [BUGGY]  final  double  bHigh  =  ca  -(prodHigh[i  -  ai]);  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  bHigh  =  ca  -(prodHigh[i  -  ai]);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  bHigh  =  ca  -(prodHigh[i  -  ai]);	  final    double    bHigh    =    ca    -(prodHigh    -    ai);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
35	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  ai);  final  double  aHigh  =  ai  -  (ca  *  ai);  [CE]  variable  aHigh  is  already  defined  in  method  linearCombination(double[],double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  ai);  final  double  aHigh  =  ai  -  (ca  *  ai);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final    double    aHigh    =    ai    -    (ca    *    ai);    final  double  aHigh  =  ai  -  (ca  *  ai);	  	non-compiled	[CE]  variable  aHigh  is  already  defined  in  method  linearCombination(double[],double[])	13	None	add
36	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  ai);  final  double  ai  =  ai  -  (ca  *  ai);  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  ai);  final  double  ai  =  ai  -  (ca  *  ai);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final    double    aHigh    =    ai    -    (ca    *    ai);    final  double  ai  =  ai  -  (ca  *  ai);	  	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	13	None	add
37	[BUG]  [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i],  prodLowSum));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i],  prodLowSum));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i],  prodLowSum));	  final    double    ai    =    ca    *(ca    *    Math.log(prodLowSum,    prodHigh[i]));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	20	None	replace
38	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodHigh  *  Math.log(prodLowSum,  prodHigh[i]));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodHigh  *  Math.log(prodLowSum,  prodHigh[i]));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodHigh  *  Math.log(prodLowSum,  prodHigh[i]));	  final    double    ai    =    ca    *(ca    *    Math.log(prodLowSum,    prodHigh[i]));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	20	None	replace
39	[BUG]  [BUGGY]  final  double  ai  =  ca.length  -  1;  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca.length  -  1;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca.length  -  1;	  final    double    ai    =    ca.length;    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	6	None	replace
40	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -  (prodHigh  >  ai);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -  (prodHigh  >  ai);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -  (prodHigh  >  ai);	  final    double    aHigh    =    ca    -    (prodHighSum    >    ai);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	18	None	replace
41	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(ca,  prodLowSum));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(ca,  prodLowSum));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(ca,  prodLowSum));	  final    double    ai    =    ca    *(prodHigh[i]    *    Math.log(ca));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	1	None	replace
42	[BUG]  [BUGGY]  final  double  bHigh  =  prodHigh[i];  [CE]  cannot  find  symbol  aHigh  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  bHigh  =  prodHigh[i];  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  bHigh  =  prodHigh[i];	  final    double    bHigh    =    ca    *    prodHigh[i];    	non-compiled	[CE]  cannot  find  symbol  aHigh	29	None	replace
43	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (ca  >  aHigh);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  >  aHigh);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ai  -  (ca  >  aHigh);	  final    double    aHigh    =    ai    -    (ca    >    ai);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	15	None	replace
44	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (ca  >  aHighSum);  [CE]  cannot  find  symbol  aHighSum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  >  aHighSum);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ai  -  (ca  >  aHighSum);	  final    double    aHigh    =    ai    -    (ca    >    ai);    	non-compiled	[CE]  cannot  find  symbol  aHighSum	15	None	replace
45	[BUG]  [BUGGY]  final  double  ai  =  ca.length  +  1;  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca.length  +  1;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca.length  +  1;	  final    double    ai    =    ca.length;    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	6	None	replace
46	[BUG]  [BUGGY]  final  double  ai  =  ca  *(b  *  Math.log(prodLowSum,  prodHigh[i]));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(b  *  Math.log(prodLowSum,  prodHigh[i]));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(b  *  Math.log(prodLowSum,  prodHigh[i]));	  final    double    ai    =    ca    *(b    *    Math.log(prodHigh[i]));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	27	None	replace
47	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodLow[i]));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodLow[i]));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodLow[i]));	  final    double    ai    =    ca    *(prodHigh[i]    *    Math.log(prodHigh[i]));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	19	None	replace
48	[BUG]  [BUGGY]  final  double  bHigh  =  ca  -(prodHighPrev  -  i);  [CE]  cannot  find  symbol  prodHighPrev  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  bHigh  =  ca  -(prodHighPrev  -  i);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  bHigh  =  ca  -(prodHighPrev  -  i);	  final    double    bHigh    =    ca    -(prodHighSum    -    i);    	non-compiled	[CE]  cannot  find  symbol  prodHighPrev	11	None	replace
49	[BUG]  [BUGGY]  final  double  bHigh  =  prodHigh  *  ca[i];  [CE]  array  required,  but  double  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  bHigh  =  prodHigh  *  ca[i];  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  bHigh  =  prodHigh  *  ca[i];	  final    double    bHigh    =    ca    *    prodHigh[i];    	non-compiled	[CE]  array  required,  but  double  found	29	None	replace
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  prodHigh[i]  -  ca;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  prodHigh[i]  -  ca;	  final    double    aHigh    =    prodHigh[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	3	replace
51	[BUG]  [BUGGY]  final  double  aHigh  =  prodHigh[i]  -  ca;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  prodHigh[i]  -  ca;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  prodHigh[i]  -  ca;	  final    double    aHigh    =    prodHigh[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	3	replace
52	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  ai)*  bHigh;  [CE]  cannot  find  symbol  bHigh  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  ai)*  bHigh;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(ca  -  ai)*  bHigh;	  final    double    aHigh    =    ca    -(ca    -    ai)*    prodHighSum;    	non-compiled	[CE]  cannot  find  symbol  bHigh	26	None	replace
53	[BUG]  [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodLowSum));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodLowSum));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(prodHigh[i]  *  Math.log(prodLowSum));	  final    double    ai    =    ca    *(prodHigh[i]    *    Math.log(ca));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	1	None	replace
54	[BUG]  [BUGGY]  final  double  bHigh  =  ca  -(ai  -  prodHigh);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  bHigh  =  ca  -(ai  -  prodHigh);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  bHigh  =  ca  -(ai  -  prodHigh);	  final    double    bHigh    =    ca    -(prodHigh    -    ai);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	21	None	replace
55	[BUG]  [BUGGY]  final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  ai)+  1);  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  ai)+  1);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  ai)+  1);	  final    double    ai    =    ca    *(Math.log(prodHigh[i]    -    ai));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	25	None	replace
56	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (prodHigh  *  ai);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (prodHigh  *  ai);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ai  -  (prodHigh  *  ai);	  final    double    aHigh    =    ai    -    (ca    *    ai);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
57	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(prodHigh  -  ai)*  ai;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(prodHigh  -  ai)*  ai;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(prodHigh  -  ai)*  ai;	  final    double    aHigh    =    ca    -(ca    -    ai)*    prodHigh;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	4	None	replace
58	[BUG]  [BUGGY]  final  double  bHigh  =  ca  -(prodHighPrev  -  ai);  [CE]  cannot  find  symbol  prodHighPrev  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  bHigh  =  ca  -(prodHighPrev  -  ai);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  bHigh  =  ca  -(prodHighPrev  -  ai);	  final    double    bHigh    =    ca    -(prodHighSum    -    ai);    	non-compiled	[CE]  cannot  find  symbol  prodHighPrev	9	None	replace
59	[BUG]  [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai),  b);  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai),  b);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai),  b);	  final    double    ai    =    ca    *(ca    *    Math.log(prodHigh[i]    -    ai),    prodLowSum);    	non-compiled	[CE]  ')'  expected	31	None	replace
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =(ca  >  0)?  ai  -  0  :(ca  >  0)?  0  :(ca  >  0)?  0  :(ca  >  0)?  1  :  0;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =(ca  >  0)?  ai  -  0  :(ca  >  0)?  0  :(ca  >  0)?  0  :(ca  >  0)?  1  :  0;	  final    double    aHigh    =    ai    -    (ca    -    ai);    final    double    aHigh    =    (ca    -    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	3	replace
61	[BUG]  [BUGGY]  final  double  aHigh  =(ca  >  0)?  ai  -  0  :(ca  >  0)?  0  :(ca  >  0)?  0  :(ca  >  0)?  1  :  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =(ca  >  0)?  ai  -  0  :(ca  >  0)?  0  :(ca  >  0)?  0  :(ca  >  0)?  1  :  0;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =(ca  >  0)?  ai  -  0  :(ca  >  0)?  0  :(ca  >  0)?  0  :(ca  >  0)?  1  :  0;	  final    double    aHigh    =    ai    -    (ca    -    ai);    final    double    aHigh    =    (ca    -    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	3	replace
62	[BUG]  [BUGGY]  final  double  ai  =  ca  *(b  *  Math.log(prodHigh[i]  -  prodLowSum));  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(b  *  Math.log(prodHigh[i]  -  prodLowSum));  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(b  *  Math.log(prodHigh[i]  -  prodLowSum));	  final    double    ai    =    ca    *(ca    *    Math.log(prodHigh[i]    -    prodLowSum));    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	16	None	replace
63	[BUG]  [BUGGY]  final  double  ai  =  ca  *(b  *  Math.log(prodHigh[i]),  prodLowSum);  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(b  *  Math.log(prodHigh[i]),  prodLowSum);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(b  *  Math.log(prodHigh[i]),  prodLowSum);	  final    double    ai    =    ca    *(b    *    Math.log(prodHigh[i]));    	non-compiled	[CE]  ')'  expected	27	None	replace
64	[BUG]  [BUGGY]  final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  ai),  prodLowSum);  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  ai),  prodLowSum);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(Math.log(prodHigh[i]  -  ai),  prodLowSum);	  final    double    ai    =    ca    *(Math.log(prodHigh[i]    -    ai));    	non-compiled	[CE]  ')'  expected	25	None	replace
65	[BUG]  [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai)/  dLowSum);  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai)/  dLowSum);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  ca  *(ca  *  Math.log(prodHigh[i]  -  ai)/  dLowSum);	  final    double    ai    =    ca    *(ca    *    Math.log(prodHigh[i]    -    ai),    prodLowSum);    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	31	None	replace
66	[BUG]  [BUGGY]  final  double  ai  =  prodHigh[i]  -  ca;  [CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  ai  =  prodHigh[i]  -  ca;  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  ai  =  prodHigh[i]  -  ca;	  final    double    ai    =    prodHigh[i];    	non-compiled	[CE]  variable  ai  is  already  defined  in  method  linearCombination(double[],double[])	5	None	replace
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  ca  -(ca  -  i);	  final    double    bHigh    =    ca    -(ai    -    i);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	3	replace
68	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ca  -  i);  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(ca  -  i);	  final    double    bHigh    =    ca    -(ai    -    i);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	3	replace
69	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -(ai  -  ai)*  prodHigh;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -(ai  -  ai)*  prodHigh;  [BUGGY]      final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -(ai  -  ai)*  prodHigh;	  final    double    aHigh    =    ca    -(ca    -    ai)*    prodHigh;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
70	[BUG]  [BUGGY]  final  double  aHigh  =  ca  -  (ai  >  aHighSum);  [CE]  cannot  find  symbol  aHighSum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ca  -  (ai  >  aHighSum);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ca  -  (ai  >  aHighSum);	  final    double    aHigh    =    ca    -    (ai    >    ai);    	non-compiled	[CE]  cannot  find  symbol  aHighSum	17	None	replace
71	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  ai  +  1);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	final  double  aHigh  =  ai  -  (ca  *  ai  +  1);	  final    double    aHigh    =    ai    -    (ca    *    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
72	[BUG]  [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  ai  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;  for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;      [BUGGY]  final  double  aHigh  =  ai  -  (ca  *  ai  +  1);  [BUGGY]      final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  final  double  prodLow  =  aLow  *  bLow  -  (((prodHigh[i]  -  aHigh  *  bHigh)  -  aLow  *  bHigh)  -  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	final  double  aHigh  =  ai  -  (ca  *  ai  +  1);	  final    double    aHigh    =    ai    -    (ca    *    ai);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	3	replace
