bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  len  =  prodLowSum.length;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  double  len  =  prodLowSum.length;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	double  len  =  prodLowSum.length;	  int    len    =    prodLowSum.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  int  len  =  prodHigh.length  -  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  int  len  =  prodHigh.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  prodHigh.length  -  2;	  int    len    =    prodHigh.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  int  i  =  0;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    int    i    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  >  expected	23	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	  if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  For(int  i  =  0;  i  <  len;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	For(int  i  =  0;  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    For(int    i    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
6	[BUG]  [BUGGY]  prodHigh[i]  =  a[i];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  a[i];  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  a[i];	  prodHigh[i]    =    b[i];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
7	[BUG]  [BUGGY]  prodHigh[i]  =  b[i]  *  prodLowSum;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  b[i]  *  prodLowSum;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  b[i]  *  prodLowSum;	  prodHigh[i]    =    b[i];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
8	[BUG]  [BUGGY]  ProdHigh[]  prodHigh  =  a[i]  *  prodHigh;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  ProdHigh[]  prodHigh  =  a[i]  *  prodHigh;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[]  prodHigh  =  a[i]  *  prodHigh;	  ProdHigh[]    prodHigh    =    a[i]    *    prodLowSum;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
9	[BUG]  [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh[i]  *  bLowSum;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh[i]  *  bLowSum;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[]  prodHigh  =  prodHigh[i]  *  bLowSum;	  ProdHigh[]    prodHigh    =    a[i]    *    prodLowSum;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  int  len  =  prodLowSum  -  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  int  len  =  prodLowSum  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  prodLowSum  -  1;	  int    len    =    a.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
11	[BUG]  [BUGGY]  final  int  len  =  0;  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  final  int  len  =  0;  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	final  int  len  =  0;  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }	  for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i];    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }  [CE]  cannot  find  symbol  ProdHigh  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    ProdHigh;    }    	non-compiled	[CE]  cannot  find  symbol  ProdHigh	17	None	replace
13	[BUG]  [BUGGY]  prodHigh[i]  =  a[i]  *  ProdHigh;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  a[i]  *  ProdHigh;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  a[i]  *  ProdHigh;	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    ProdHigh;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum.length;  i++)  {  [CE]  double  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  prodLowSum.length;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  prodLowSum.length;  i++)  {	  for(int    i    =    0;    i    <    prodHigh.length;    i++)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
15	[BUG]  [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodHigh.size()  ]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodHigh.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodHigh.size()  ]);	  ProdHigh[]    prodHigh    =    prodHigh.toArray(new    double[prodLowSum.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodHigh.length;    i++)    {    for(int  i  =  0;  i  <  prodHigh.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  For(int  i  =  0;  i  <  prodHigh.length;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  For(int  i  =  0;  i  <  prodHigh.length;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodHigh.length;    i++)    {    For(int  i  =  0;  i  <  prodHigh.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  int  i  =  0;  i  <  prodHigh.length;  i++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  int  i  =  0;  i  <  prodHigh.length;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodHigh.length;    i++)    {    int  i  =  0;  i  <  prodHigh.length;  i++)  {	  	non-compiled	[CE]  >  expected	3	None	add
19	[BUG]  [BUGGY]  double  lenMinusOne  =  a.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  double  lenMinusOne  =  a.length;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	double  lenMinusOne  =  a.length;	  int    lenMinusOne    =    a.length;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    prodLowSum;    i++)    {    for(int  i  =  1;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
21	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  For(int  i  =  1;  i  <  prodLowSum;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  For(int  i  =  1;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    prodLowSum;    i++)    {    For(int  i  =  1;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
22	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  final  double  ai  =  1;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  final  double  ai  =  1;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    prodLowSum;    i++)    {    final  double  ai  =  1;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  >  expected	18	None	add
23	[BUG]  [BUGGY]  int  lenMinusOne  =  prodHigh.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  int  lenMinusOne  =  prodHigh.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  lenMinusOne  =  prodHigh.length  -  1;	  int    lenMinusOne    =    prodHigh.length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  prodHigh[i]  =  0;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  prodHigh[i]  =  0;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  prodLowSum;  i++)  {  prodHigh[i]  =  0;  }	  for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
25	[BUG]  [BUGGY]  double  len  =  prodLowSum;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  double  len  =  prodLowSum;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	double  len  =  prodLowSum;	  int    len    =    prodLowSum;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }	  if(b    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }	  if(b    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  0;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    final    double    ai    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  >  expected	11	None	replace
29	[BUG]  [BUGGY]  final  double  ai  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  final  double  ai  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	final  double  ai  =  0;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    final    double    ai    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  >  expected	11	None	replace
30	[BUG]  [BUGGY]  prodHigh[i]  =  0;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  0;	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  for(int  i  =  1;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  for(int  i  =  1;  i  <  len;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    len;    i++)    {    for(int  i  =  1;  i  <  len;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
32	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  For(int  i  =  1;  i  <  len;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  For(int  i  =  1;  i  <  len;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    len;    i++)    {    For(int  i  =  1;  i  <  len;  i++)  {	  	non-compiled	[CE]  '.class'  expected	27	None	add
33	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  for(int  i  =  1;  i  <  LEn;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  for(int  i  =  1;  i  <  LEn;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    len;    i++)    {    for(int  i  =  1;  i  <  LEn;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
34	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  final  int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	final  int  i  =  0;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    final    int    i    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  >  expected	22	None	replace
35	[BUG]  [BUGGY]  Context.report(JSError.make(b,  prodHigh,  0));  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  Context.report(JSError.make(b,  prodHigh,  0));  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	Context.report(JSError.make(b,  prodHigh,  0));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  prodHigh[i]  =  a[i]  *  prodHigh;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  a[i]  *  prodHigh;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  a[i]  *  prodHigh;	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }	  if(bLow    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodLowSum;    }    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
38	[BUG]  [BUGGY]  while(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  while(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	while(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }	  if(b    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodLowSum;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	29	None	replace
39	[BUG]  [BUGGY]  double  lenMinusOne  =  prodHigh.length;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  double  lenMinusOne  =  prodHigh.length;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	double  lenMinusOne  =  prodHigh.length;	  double    lenMinusOne    =    b.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len.length;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len.length;  i++)  {	  for(int    i    =    0;    i    <    prodHigh.length;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
41	[BUG]  [BUGGY]  int  len  =  prodHigh;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  int  len  =  prodHigh;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  prodHigh;	  int    len    =    prodLowSum;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
42	[BUG]  [BUGGY]  prodHigh[i]  =  bLow;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  bLow;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  bLow;	  prodHigh[i]    =    b[i];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  final  int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  final  int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  final  int  i  =  0;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    final    int    i    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  >  expected	22	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  final  int  i  =  0;  i  <  prodHigh.length;  i++)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  final  int  i  =  0;  i  <  prodHigh.length;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodHigh.length;    i++)    {    final  int  i  =  0;  i  <  prodHigh.length;  i++)  {	  	non-compiled	[CE]  >  expected	3	None	add
45	[BUG]  [BUGGY]  ProdHigh[]  prodHigh  =  b[i]  *  prodLowSum;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  ProdHigh[]  prodHigh  =  b[i]  *  prodLowSum;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[]  prodHigh  =  b[i]  *  prodLowSum;	  ProdHigh[]    prodHigh    =    a[i]    *    prodLowSum;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  final  int  i  =  1;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  final  int  i  =  1;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    prodLowSum;    i++)    {    final  int  i  =  1;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  >  expected	18	None	add
47	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  int  i  =  1;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  int  i  =  1;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    prodLowSum;    i++)    {    int  i  =  1;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  >  expected	18	None	add
48	[BUG]  [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodLowSum.size()  +  1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodLowSum.size()  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodLowSum.size()  +  1]);	  ProdHigh[]    prodHigh    =    prodHigh.toArray(new    double[prodLowSum.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  For(int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  For(int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  For(int  i  =  0;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    For(int    i    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
50	[BUG]  [BUGGY]  Context.report(JSError.make(b,  0,  prodLowSum));  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  Context.report(JSError.make(b,  0,  prodLowSum));  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	Context.report(JSError.make(b,  0,  prodLowSum));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  int  lenMinusOne  =  a.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  int  lenMinusOne  =  a.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  lenMinusOne  =  a.length  -  1;	  int    lenMinusOne    =    a.length;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
52	[BUG]  [BUGGY]  if(bHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [CE]  cannot  find  symbol  bHigh  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  if(bHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(bHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }	  if(bLow    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodLowSum;    }    	non-compiled	[CE]  cannot  find  symbol  bHigh	21	None	replace
53	[BUG]  [BUGGY]  double  lenMinusOne  =  b.length  -  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  double  lenMinusOne  =  b.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	double  lenMinusOne  =  b.length  -  1;	  double    lenMinusOne    =    b.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  final  int  i  =  1;  i  <  len;  i++)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  final  int  i  =  1;  i  <  len;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    len;    i++)    {    final  int  i  =  1;  i  <  len;  i++)  {	  	non-compiled	[CE]  >  expected	27	None	add
55	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  int  i  =  1;  i  <  len;  i++)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  int  i  =  1;  i  <  len;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    len;    i++)    {    int  i  =  1;  i  <  len;  i++)  {	  	non-compiled	[CE]  >  expected	27	None	add
56	[BUG]  [BUGGY]  int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  i  =  0;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    int    i    =    0;    i    <    prodLowSum;    i++)    {    	non-compiled	[CE]  >  expected	23	None	replace
57	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  i	24	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  *=  0;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  *=  0;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  *=  0;  }	  for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
59	[BUG]  [BUGGY]  Context.report(JSError.make(b,  0,  prodHigh,  0));  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  Context.report(JSError.make(b,  0,  prodHigh,  0));  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	Context.report(JSError.make(b,  0,  prodHigh,  0));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  prodHigh[i]  =  ai  *  bLow;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  ai  *  bLow;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  ai  *  bLow;	  prodHigh[i]    =    b[i];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
61	[BUG]  [BUGGY]  prodHigh[i]  =  ai;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  prodHigh[i]  =  ai;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  ai;	  prodHigh[i]    =    b[i];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  for(int  i  =  0;  i  <  PRODHigh.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  for(int  i  =  0;  i  <  PRODHigh.length;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodHigh.length;    i++)    {    for(int  i  =  0;  i  <  PRODHigh.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
63	[BUG]  [BUGGY]  if(prodHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  if(prodHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(prodHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    ProdHigh;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	17	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  for(int  i  =  1;  i  >=  prodLowSum;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  for(int  i  =  1;  i  >=  prodLowSum;  i++)  {  [BUGGY]      final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    1;    i    <    prodLowSum;    i++)    {    for(int  i  =  1;  i  >=  prodLowSum;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
65	[BUG]  [BUGGY]  int  len  =  prodHigh.length  /  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  int  len  =  prodHigh.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  prodHigh.length  /  1;	  int    len    =    prodHigh.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	replace
67	[BUG]  [BUGGY]  ProdHigh[i]  =  a[i]  *  prodHigh;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;      [BUGGY]  ProdHigh[i]  =  a[i]  *  prodHigh;  [BUGGY]      for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[i]  =  a[i]  *  prodHigh;	  if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
