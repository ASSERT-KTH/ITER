bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  lenMinusOne  =  prodHigh.length;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  int  lenMinusOne  =  prodHigh.length;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  lenMinusOne  =  prodHigh.length;	      int    lenMinusOne    =    b.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  double  lenMinusOne  =  b.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  double  lenMinusOne  =  b.length;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	double  lenMinusOne  =  b.length;	      int    lenMinusOne    =    b.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	add	for(int  i  =  0;  i  <  prodHigh.length;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodHigh.length;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  prodHigh.length;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	replace
5	[BUG]  [BUGGY]  int  len  =  prodHigh.length  -  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  int  len  =  prodHigh.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  prodHigh.length  -  1;	      int    len    =    prodHigh.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  int  len  =  prodLowSum.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  int  len  =  prodLowSum.length;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  prodLowSum.length;	      int    len    =    a.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }	      if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i];    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  if(prodHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(prodHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(prodHigh  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	      if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodLowSum;    i++)    {    for(int  i  =  0;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  For(int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  For(int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodLowSum;    i++)    {    For(int  i  =  0;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  '.class'  expected	4	None	add
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  final  double  ai  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  final  double  ai  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodLowSum;    i++)    {    final  double  ai  =  0;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  >  expected	4	None	add
12	[BUG]  [BUGGY]  ProdHigh[]  prodHigh  =  a[i]  *  prodLowSum;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  ProdHigh[]  prodHigh  =  a[i]  *  prodLowSum;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[]  prodHigh  =  a[i]  *  prodLowSum;	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodLowSum;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  Context.reportCodeChange();  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	Context.reportCodeChange();	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodLowSum;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodLowSum.size()  ]);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodLowSum.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	ProdHigh[]  prodHigh  =  prodHigh.toArray(new  double[prodLowSum.size()  ]);	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  int  len  =  prodLowSum;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  int  len  =  prodLowSum;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  prodLowSum;	      int    len    =    a.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
17	[BUG]  [BUGGY]  if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }  [CE]  cannot  find  symbol  ProdHigh  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  ProdHigh;  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  cannot  find  symbol  ProdHigh	7	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	add	for(int  i  =  1;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
19	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  1;  i  <  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  1;  i  <  prodLowSum;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
20	[BUG]  [BUGGY]  int  lenMinusOne  =  a.length;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  int  lenMinusOne  =  a.length;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  lenMinusOne  =  a.length;	      int    lenMinusOne    =    b.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  if(bLow  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [CE]  cannot  find  symbol  bLow  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(bLow  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(bLow  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodLowSum;    }    	non-compiled	[CE]  cannot  find  symbol  bLow	8	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  final  int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  final  int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodLowSum;    i++)    {    final  int  i  =  0;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  >  expected	4	None	add
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  int  i  =  0;  i  <  prodLowSum;  i++)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  int  i  =  0;  i  <  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodLowSum;    i++)    {    int  i  =  0;  i  <  prodLowSum;  i++)  {	  	non-compiled	[CE]  >  expected	4	None	add
24	[BUG]  [BUGGY]  if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(prodLowSum  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
25	[BUG]  [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodHigh;  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodHigh;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	7	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  0;  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	add	for(int  i  =  1;  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
28	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  1;  i  <  len;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int  i  =  1;  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    prodLowSum;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
29	[BUG]  [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i]  *  prodLowSum;  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i]    *    prodLowSum;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	8	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  for(int  i  =  0;  i  >=  prodLowSum;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  prodLowSum;  i++)  {  for(int  i  =  0;  i  >=  prodLowSum;  i++)  {  [BUGGY]    final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	for(int    i    =    0;    i    <    prodLowSum;    i++)    {    for(int  i  =  0;  i  >=  prodLowSum;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
31	[BUG]  [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  a[i];  }	      if(prodHigh    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    a[i];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	6	None	replace
32	[BUG]  [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	if(b  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  prodHigh[i]  =  b[i];  }	      if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
33	[BUG]  [BUGGY]  prodHigh[i]  =  b[i];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  prodHigh[i]  =  b[i];  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	prodHigh[i]  =  b[i];	      if(prodLowSum    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    prodHigh[i]    =    b[i];    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  int  len  =  a.length  -  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  len  =  a.length;  if  (len  !=  b.length)  {  throw  new  DimensionMismatchException(len,  b.length);  }    final  double[]  prodHigh  =  new  double[len];  double  prodLowSum  =  0;    [BUGGY]  int  len  =  a.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  len;  i++)  {  final  double  ai  =  a[i];  final  double  ca  =  SPLIT_FACTOR  *  ai;  final  double  aHigh  =  ca  -  (ca  -  ai);  final  double  aLow  =  ai  -  aHigh;  final  double  bi  =  b[i];  final  double  cb  =  SPLIT_FACTOR  *  bi;  final  double  bHigh  =  cb  -  (cb  -  bi);  final  double  bLow  =  bi  -  bHigh;  prodHigh[i]  =  ai  *  bi;  [CLASS]  MathArrays  OrderDirection  1  2  [METHOD]  linearCombination  [RETURN_TYPE]  double  final  double[]  a  final  double[]  b  [VARIABLES]  boolean  double[]  a  b  prodHigh  int  SPLIT_FACTOR  comp  i  index  j  len  lenMinusOne  max  numElements  startIndex  sum  yListLen  OrderDirection  DECREASING  INCREASING  dir  double  aHigh  aLow  ai  bHigh  bLow  bi  ca  cb  prodHighCur  prodHighNext  prodLow  prodLowSum  result  sHighCur  sHighPrev  sLowSum  sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	int  len  =  a.length  -  1;	      int    len    =    a.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
