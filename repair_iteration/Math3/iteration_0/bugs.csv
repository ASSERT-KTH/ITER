bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final int len = a.length; [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { [BUGGY] final int len = a.length; [BUGGY] if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	replace	
2	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { [BUGGY] [BUGGY] final int len = a.length; if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	816	816	1	add	
3	[BUG] [BUGGY] if (len != b.length) { [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { final int len = a.length; [BUGGY] if (len != b.length) { [BUGGY] throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	817	817	1	replace	
4	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { final int len = a.length; [BUGGY] [BUGGY] if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	817	817	1	add	
5	[BUG] [BUGGY] final double[] prodHigh = new double[len]; [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { final int len = a.length; if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   [BUGGY] final double[] prodHigh = new double[len]; [BUGGY] double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	replace	
6	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { final int len = a.length; if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   [BUGGY] [BUGGY] final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	823	823	1	add	
7	[BUG] [BUGGY] double prodLowSum = 0; [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { final int len = a.length; if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; [BUGGY] double prodLowSum = 0; [BUGGY]  for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	824	824	1	replace	
8	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throws DimensionMismatchException { final int len = a.length; if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; [BUGGY] [BUGGY] double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	824	824	1	add	
9	[BUG] [BUGGY] for (int i = 0; i < len; i++) { [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] final int len = a.length; if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; [BUGGY] for (int i = 0; i < len; i++) { [BUGGY] final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	replace	
10	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] final int len = a.length; if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; [BUGGY] [BUGGY] for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	826	826	1	add	
11	[BUG] [BUGGY] final double ai = a[i]; [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { [BUGGY] final double ai = a[i]; [BUGGY] final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	827	827	1	replace	
12	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] if (len != b.length) { throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { [BUGGY] [BUGGY] final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	827	827	1	add	
13	[BUG] [BUGGY] final double ca = SPLIT_FACTOR * ai; [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; [BUGGY] final double ca = SPLIT_FACTOR * ai; [BUGGY] final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	828	828	1	replace	
14	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] throw new DimensionMismatchException(len, b.length); }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; [BUGGY] [BUGGY] final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	828	828	1	add	
15	[BUG] [BUGGY] final double aHigh = ca - (ca - ai); [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; [BUGGY] final double aHigh = ca - (ca - ai); [BUGGY] final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	replace	
16	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] }   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; [BUGGY] [BUGGY] final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	829	829	1	add	
17	[BUG] [BUGGY] final double aLow = ai - aHigh; [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT]   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); [BUGGY] final double aLow = ai - aHigh; [BUGGY]  final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow); [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	830	830	1	replace	
18	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT]   final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); [BUGGY] [BUGGY] final double aLow = ai - aHigh; final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow); [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	830	830	1	add	
19	[BUG] [BUGGY] final double bi = b[i]; [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; [BUGGY] final double bi = b[i]; [BUGGY] final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow); prodLowSum += prodLow; } [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	832	832	1	replace	
20	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testLinearCombinationWithSingleElementArray [CONTEXT] final double[] prodHigh = new double[len]; double prodLowSum = 0; for (int i = 0; i < len; i++) { final double ai = a[i]; final double ca = SPLIT_FACTOR * ai; final double aHigh = ca - (ca - ai); final double aLow = ai - aHigh; [BUGGY] [BUGGY] final double bi = b[i]; final double cb = SPLIT_FACTOR * bi; final double bHigh = cb - (cb - bi); final double bLow = bi - bHigh; prodHigh[i] = ai * bi; final double prodLow = aLow * bLow - (((prodHigh[i] - aHigh * bHigh) - aLow * bHigh) - aHigh * bLow); prodLowSum += prodLow; } [CLASS] MathArrays OrderDirection 1 2 [METHOD] linearCombination [RETURN_TYPE] double  final double[] a final double[] b [VARIABLES] boolean double[] a b prodHigh int SPLIT_FACTOR comp i index j len lenMinusOne max numElements startIndex sum yListLen OrderDirection DECREASING INCREASING dir double aHigh aLow ai bHigh bLow bi ca cb prodHighCur prodHighNext prodLow prodLowSum result sHighCur sHighPrev sLowSum sPrime  	projects/Math3/src/main/java/org/apache/commons/math3/util/MathArrays.java	0.5	832	832	1	add	
