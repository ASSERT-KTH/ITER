bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(nextLocal  >  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0)  {	}  else  if  (offsetLocal  >  0)  {  	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
2	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetLocal  <  =  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  =  0)  {	}  else  if  (offsetLocal  >  0)  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}  else  if(offsetLocal  ==  0)  {	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	6	replace
4	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  ==  0)  {	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	6	replace
5	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(nextLocal  <  =  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0)  {	}  else  if  (offsetLocal  >  0)  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetLocal!=  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}  else  if(offsetLocal!=  0)  {	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	1	replace
7	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetLocal!=  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal!=  0)  {	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	1	replace
8	[BUG]  [BUGGY]  }  else  if(nextLocal  <  offsetLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(nextLocal  <  offsetLocal)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  offsetLocal)  {	}  else  if  (offsetLocal  >  0)  {  	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetLocal  <  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}  else  if(offsetLocal  <  0)  {	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	7	replace
10	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetLocal  <  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  0)  {	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	7	replace
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	  	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	7	replace
12	[BUG]  [BUGGY]    [FE]  ComparisonFailure  [FE]                    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	  	}  else  if  (offsetLocal  >  0)  {  	compilable	  [FE]  ComparisonFailure  	1	7	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	    long  prev  =  previousTransition(instantAdjusted);		compilable	  [FE]  ComparisonFailure  	2	1	add
14	[BUG]  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    long  prev  =  previousTransition(instantAdjusted);		compilable	  [FE]  ComparisonFailure  	2	1	add
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  nextTransition(instantAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	    long  prev  =  nextTransition(instantAdjusted);		compilable	  [FE]  ComparisonFailure  	2	1	add
16	[BUG]  [BUGGY]    long  prev  =  nextTransition(instantAdjusted);  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  nextTransition(instantAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    long  prev  =  nextTransition(instantAdjusted);		compilable	  [FE]  ComparisonFailure  	2	1	add
17	[BUG]  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]        ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }		non-compiled	[CE]  cannot  find  symbol  nextLocal	2	None	add
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	    long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);		compilable	  [FE]  ComparisonFailure  	2	1	add
19	[BUG]  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);		compilable	  [FE]  ComparisonFailure  	2	1	add
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }		compilable	  [FE]  ComparisonFailure  	2	1	add
21	[BUG]  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }		compilable	  [FE]  ComparisonFailure  	2	1	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }		compilable	  [FE]  ComparisonFailure  	2	1	add
23	[BUG]  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }		compilable	  [FE]  ComparisonFailure  	2	1	add
24	[BUG]  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]                ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }		non-compiled	[CE]  cannot  find  symbol  nextLocal	2	None	add
25	[BUG]  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }		non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	2	None	add
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  nextTransition(instantLocal);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	    long  prev  =  nextTransition(instantLocal);		compilable	  [FE]  ComparisonFailure  	2	1	add
27	[BUG]  [BUGGY]    long  prev  =  nextTransition(instantLocal);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  nextTransition(instantLocal);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    long  prev  =  nextTransition(instantLocal);		compilable	  [FE]  ComparisonFailure  	2	1	add
28	[BUG]  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);		non-compiled	[CE]  'else'  without  'if'	2	None	add
29	[BUG]  [BUGGY]    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
30	[BUG]  [BUGGY]    if(instantLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
31	[BUG]  [BUGGY]    if(instantLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
32	[BUG]  [BUGGY]    instantAdjusted  =  nextTransition(instantAdjusted);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]          ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    instantAdjusted  =  nextTransition(instantAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    instantAdjusted  =  nextTransition(instantAdjusted);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	2	None	add
33	[BUG]  [BUGGY]    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
34	[BUG]  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
35	[BUG]  [BUGGY]    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
36	[BUG]  [BUGGY]  }  else  if(offsetPrev  >  0)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(offsetPrev  >  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  >  0)  {	}  else  if  (offsetLocal  >  0)  {  	non-compiled	[CE]  cannot  find  symbol  offsetPrev	1	None	replace
37	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]      ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >  0)  {  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetLocal  >  0)  {	}  else  if  (offsetLocal  >  0)  {  	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	1	None	replace
38	[BUG]  [BUGGY]    if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
39	[BUG]  [BUGGY]    if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
40	[BUG]  [BUGGY]    if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
41	[BUG]  [BUGGY]    int  prev  =  previousTransition(instantAdjusted);  [CE]  possible  loss  of  precision  [FE]          ComparisonFailure  [CONTEXT]  if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }  [BUGGY]    int  prev  =  previousTransition(instantAdjusted);  [BUGGY]  }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	    int  prev  =  previousTransition(instantAdjusted);		non-compiled	[CE]  possible  loss  of  precision	2	None	add
