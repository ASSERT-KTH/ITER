bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(nextLocal  ==  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  ==  0)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	5	None	replace
2	[BUG]  [BUGGY]  }  else  if(nextLocal  <  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  0)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	5	None	replace
3	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  nextLocal  <  nextAdjusted)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  nextLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  nextLocal  <  nextAdjusted)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  }  else  if(nextLocal!=  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal!=  0)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	5	None	replace
5	[BUG]  [BUGGY]  }  else  if(nextLocal  >=  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >=  0)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	5	None	replace
6	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantLocal  <  nextAdjusted)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  instantLocal  <  nextAdjusted)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  nextLocal  ==  nextAdjusted)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  nextLocal  ==  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  nextLocal  ==  nextAdjusted)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  nextLocal  >=  nextAdjusted)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  nextLocal  >=  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  nextLocal  >=  nextAdjusted)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	25	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev,  offsetLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  no  suitable  method  found  for  getOffset(int,int)  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev,  offsetLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev,  offsetLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  no  suitable  method  found  for  getOffset(int,int)	25	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev,  offsetPrev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  cannot  find  symbol  offsetPrev  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev,  offsetPrev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev,  offsetPrev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	25	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffsetLocal(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffsetLocal(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffsetLocal(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev),  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  variable  offsetLocal  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev),  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev),  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  variable  offsetLocal  is  already  defined  in  method  getOffsetFromLocal(long)	25	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev));  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev));  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev));  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
15	[BUG]  [BUGGY]  int  prev  =  getOffset(prev);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  getOffset(prev);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  getOffset(prev);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	25	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev),  offsetLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev),  offsetLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev),  offsetLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(nextLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  cannot  find  symbol  nextLocal  [FE]                                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(nextLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(nextLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	25	None	replace
18	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    long  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
19	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  Long  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  Long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    Long  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
20	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  int  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  int  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    int  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
21	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  previousTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  previousTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    long  prev  =  previousTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
22	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  short  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  short  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    short  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
23	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  double  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  double  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    double  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
24	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  nextTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  nextTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    long  prev  =  nextTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
25	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  lastTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  lastTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    long  prev  =  lastTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
26	[BUG]  [BUGGY]  if(nextLocal  <  =  0)  {  if(instantLocal  >  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(nextLocal  <  =  0)  {  if(instantLocal  >  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(nextLocal  <  =  0)  {  if(instantLocal  >  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
27	[BUG]  [BUGGY]  if(instantLocal  <  nextAdjusted)  {  if(instantLocal  >  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  nextAdjusted)  {  if(instantLocal  >  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  nextAdjusted)  {  if(instantLocal  >  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
28	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
29	[BUG]  [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
30	[BUG]  [BUGGY]  instantLocal  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
31	[BUG]  [BUGGY]  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
32	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
33	[BUG]  [BUGGY]  instantLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
34	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	23	7	replace
35	[BUG]  [BUGGY]  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	23	7	replace
36	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  variable  prev  might  not  have  been  initialized  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  variable  prev  might  not  have  been  initialized	23	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  variable  prev  might  not  have  been  initialized  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  variable  prev  might  not  have  been  initialized	23	None	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	23	7	replace
39	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	23	7	replace
40	[BUG]  [BUGGY]  long  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)	23	None	replace
41	[BUG]  [BUGGY]  Integer  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)	23	None	replace
42	[BUG]  [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
43	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
44	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
45	[BUG]  [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
46	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
47	[BUG]  [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  ==  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
49	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  ==  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  >=  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	7	add
51	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  >=  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  >=  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	7	add
52	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(nextLocal  ==  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(nextLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(nextLocal  ==  0)  {	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	3	None	add
53	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
54	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal!=  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	7	add
55	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal!=  0)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal!=  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	7	add
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  ==  1)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
57	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  1)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  ==  1)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
58	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  <  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
59	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  <  0)  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  <  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
60	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  >  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	7	add
61	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  >  0)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  >  0)  {	  	compilable	  [FE]  ComparisonFailure  	3	7	add
62	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  2)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  ==  2)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
63	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  2)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  2)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  ==  2)  {	  	compilable	  [FE]  ComparisonFailure  	3	1	add
64	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  <  =  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  <  =  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
65	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
66	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
67	[BUG]  [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
68	[BUG]  [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
69	[BUG]  [BUGGY]  if(instantLocal  <  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
70	[BUG]  [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
71	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
72	[BUG]  [BUGGY]  instantLocal  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
73	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	21	7	replace
74	[BUG]  [BUGGY]  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	21	7	replace
75	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  variable  prev  might  not  have  been  initialized  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  variable  prev  might  not  have  been  initialized	21	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  variable  prev  might  not  have  been  initialized  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  variable  prev  might  not  have  been  initialized	21	None	replace
77	[BUG]  [BUGGY]  long  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)	21	None	replace
78	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(nextLocal);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(nextLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(nextLocal);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
79	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(instantLocal);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(instantLocal);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
80	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(offsetLocal);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(offsetLocal);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
81	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(secondLocal);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(secondLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(secondLocal);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
82	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	instantLocal  =  nextTransition(instantAdjusted);	      instantAdjusted    =    nextTransition(instantAdjusted);    	compilable	  [FE]  ComparisonFailure  	32	7	replace
83	[BUG]  [BUGGY]  instantLocal  =  nextTransition(instantAdjusted);  [FE]  ComparisonFailure  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  nextTransition(instantAdjusted);	      instantAdjusted    =    nextTransition(instantAdjusted);    	compilable	  [FE]  ComparisonFailure  	32	7	replace
84	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(offsetLocal,  nextAdjusted);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(offsetLocal,  nextAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(offsetLocal,  nextAdjusted);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
85	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(nextLocal,  nextAdjusted);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(nextLocal,  nextAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(nextLocal,  nextAdjusted);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
86	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  nextTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    long  prev  =  nextTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
87	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  Long  prev  =  nextTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  Long  prev  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    Long  prev  =  nextTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
88	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  previousTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  previousTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    long  prev  =  previousTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
89	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  int  prev  =  nextTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  int  prev  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    int  prev  =  nextTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
90	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  nTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  nTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    long  prev  =  nTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
91	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  firstTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  firstTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    long  prev  =  firstTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
92	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  lastTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  lastTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    long  prev  =  lastTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
93	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  currentTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  currentTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    long  prev  =  currentTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
94	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  getOffset(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  long  prev  =  getOffset(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    long  prev  =  getOffset(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
95	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	19	None	replace
96	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal  -  offsetAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal  -  offsetAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal  -  offsetAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetLocal);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	19	None	replace
97	[BUG]  [BUGGY]  long  prev  =  getPreviousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getPreviousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getPreviousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
98	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	19	None	replace
99	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetLocal);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	19	None	replace
100	[BUG]  [BUGGY]  long  prev  =  getOffset(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getOffset(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getOffset(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	19	None	replace
101	[BUG]  [BUGGY]  long  prev  =  getPreviousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getPreviousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getPreviousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
102	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(nextLocal  -  offsetAdjusted);  [CE]  cannot  find  symbol  nextLocal  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(nextLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(nextLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	19	None	replace
103	[BUG]  [BUGGY]  long  prev  =  nextLocal;  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  cannot  find  symbol  nextLocal  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextLocal;  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextLocal;  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	19	None	replace
104	[BUG]  [BUGGY]  double  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  double  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	double  prev  =  previousTransition(instantAdjusted);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	41	None	replace
105	[BUG]  [BUGGY]  float  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  float  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	float  prev  =  previousTransition(instantAdjusted);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	41	None	replace
106	[BUG]  [BUGGY]  short  prev  =  previousTransition(instantAdjusted);  [CE]  possible  loss  of  precision  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  short  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	short  prev  =  previousTransition(instantAdjusted);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
107	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted,  offsetLocal);  [CE]  method  previousTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted,  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted,  offsetLocal);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  method  previousTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	41	None	replace
108	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted,  nextLocal);  [CE]  cannot  find  symbol  nextLocal  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted,  nextLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted,  nextLocal);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	41	None	replace
109	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantLocal);  [CE]  possible  loss  of  precision  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantLocal);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
110	[BUG]  [BUGGY]  int  prev  =  previousTransition(nextLocal);  [CE]  cannot  find  symbol  nextLocal  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(nextLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(nextLocal);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	41	None	replace
111	[BUG]  [BUGGY]      long  instantAdjusted  =  nextTransition(instantLocal);  [CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  instantAdjusted  =  nextTransition(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  instantAdjusted  =  nextTransition(instantLocal);	  	non-compiled	[CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        long  prev  =  getOffset(instantLocal);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
113	[BUG]  [BUGGY]      long  prev  =  getOffset(instantLocal);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  prev  =  getOffset(instantLocal);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
114	[BUG]  [BUGGY]      long  instantLocal  =  nextTransition(instantLocal);  [CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  instantLocal  =  nextTransition(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  instantLocal  =  nextTransition(instantLocal);	  	non-compiled	[CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
115	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      int  prev  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        int  prev  =  getOffset(instantLocal);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
116	[BUG]  [BUGGY]      int  prev  =  getOffset(instantLocal);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      int  prev  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        int  prev  =  getOffset(instantLocal);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
117	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      instantLocal  =  nextTransition(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        instantLocal  =  nextTransition(instantLocal);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
118	[BUG]  [BUGGY]      instantLocal  =  nextTransition(instantLocal);  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      instantLocal  =  nextTransition(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        instantLocal  =  nextTransition(instantLocal);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
119	[BUG]  [BUGGY]      long  prev  =  getOffset(nextLocal);  [CE]  cannot  find  symbol  nextLocal  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  getOffset(nextLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  prev  =  getOffset(nextLocal);	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	11	None	add
120	[BUG]  [BUGGY]      long  instantLocal  =  nextTransition(instantAdjusted);  [CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  instantLocal  =  nextTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  instantLocal  =  nextTransition(instantAdjusted);	  	non-compiled	[CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
121	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  variable  prev  might  not  have  been  initialized  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  variable  prev  might  not  have  been  initialized	28	None	replace
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
123	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(i)-  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
124	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  variable  prev  might  not  have  been  initialized  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  variable  prev  might  not  have  been  initialized	28	None	replace
125	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)+  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(i)+  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
126	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)+  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i)+  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(i)+  1;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
127	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
128	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
129	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(nextLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  nextLocal  [FE]                                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(nextLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(nextLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	28	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffsetLocal(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffsetLocal(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffsetLocal(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
132	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  len  =  getOffset(i);  i  <  len;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  len  =  getOffset(i);  i  <  len;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
134	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  getOffset(i);  i  <  len;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  len  =  getOffset(i);  i  <  len;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  len  =  getOffset(i);  i  <  len;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
135	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
136	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
137	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLo  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLo  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLo	  	non-compiled	[CE]  not  a  statement	20	None	add
138	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
139	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLo  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLo  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLo	  	non-compiled	[CE]  ')'  expected	20	None	add
140	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }	  	non-compiled	[CE]  not  a  statement	20	None	add
141	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal	  	non-compiled	[CE]  ')'  expected	20	None	add
142	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
143	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
144	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }	  	non-compiled	[CE]  not  a  statement	20	None	add
145	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
146	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantL  [CE]  ')'  expected  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantL  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantL	  	non-compiled	[CE]  ')'  expected	20	None	add
147	[BUG]  [BUGGY]  long  prev  =  getPreviousTransition(instantAdjusted);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getPreviousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getPreviousTransition(instantAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
148	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	14	None	replace
149	[BUG]  [BUGGY]  long  prev  =  nextTransition(nextLocal);  [CE]  cannot  find  symbol  nextLocal  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(nextLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(nextLocal);	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	14	None	replace
150	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal,  nextAdjusted);  [CE]  cannot  find  symbol  nextAdjusted  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal,  nextAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal,  nextAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	14	None	replace
151	[BUG]  [BUGGY]  long  prev  =  nextLocal;  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextLocal;  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextLocal;	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	14	None	replace
152	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
153	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
154	[BUG]  [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
155	[BUG]  [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(nextLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
156	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  nextLocal;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  nextLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  nextLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
157	[BUG]  [BUGGY]  Integer  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
158	[BUG]  [BUGGY]  int  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
159	[BUG]  [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
160	[BUG]  [BUGGY]  }  else  if(nextLocal  ==  offsetLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  ==  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  ==  offsetLocal)  {	  }    else    if(offsetLocal    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	4	None	replace
161	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
162	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
163	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  not  a  statement	22	None	add
164	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  not  a  statement	22	None	add
165	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  in  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  cannot  find  symbol  i  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  in  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  in  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  cannot  find  symbol  i	22	None	add
166	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i).getPrev();  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i).getPrev();  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i).getPrev();  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	add
167	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  cannot  find  symbol  i  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  cannot  find  symbol  i	22	None	add
168	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal,  instantLocal  +  offsetAdjusted);  }  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal,  instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal,  instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	22	None	add
169	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  int  prev  =  getOffset(i);  [CE]  cannot  find  symbol  i  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  int  prev  =  getOffset(i);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    int  prev  =  getOffset(i);	  	non-compiled	[CE]  cannot  find  symbol  i	22	None	add
170	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  int  prev  =  getOffset(i);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [CE]  cannot  find  symbol  i  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  int  prev  =  getOffset(i);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    int  prev  =  getOffset(i);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	  	non-compiled	[CE]  cannot  find  symbol  i	22	None	add
171	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	27	None	replace
172	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal  +  1);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal  +  1);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal  +  1);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	27	None	replace
173	[BUG]  [BUGGY]  long  prev  =  getPreviousTransition(instantLocal);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getPreviousTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getPreviousTransition(instantLocal);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
174	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal,  offsetPrev);  [CE]  cannot  find  symbol  offsetPrev  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal,  offsetPrev);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal,  offsetPrev);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	27	None	replace
175	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  <  nextAdjusted)  {  return  prev;  }  [CE]  cannot  find  symbol  nextAdjusted  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  <  nextAdjusted)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  if(prev  <  nextAdjusted)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	24	None	replace
176	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextAdjusted)  {  return  prev;  }  [CE]  cannot  find  symbol  nextAdjusted  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextAdjusted)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextAdjusted)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	24	None	replace
177	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  return  prev;  }  [CE]  possible  loss  of  precision  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
178	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)return  prev;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
179	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	24	None	replace
180	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  <  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  <  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  if(prev  <  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	24	None	replace
181	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }  [CE]  possible  loss  of  precision  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if(prev  <  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
182	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev!=  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev!=  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev!=  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	17	None	replace
183	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextAdjusted)  {  return  prev;  }  [CE]  cannot  find  symbol  nextAdjusted  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextAdjusted)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextAdjusted)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	17	None	replace
184	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  >=  nextAdjusted)  {  return  prev;  }  [CE]  cannot  find  symbol  nextAdjusted  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  >=  nextAdjusted)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  if(prev  >=  nextAdjusted)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	17	None	replace
185	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  ==  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  ==  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  ==  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	17	None	replace
186	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev!=  nextAdjusted)  {  return  prev;  }  [CE]  cannot  find  symbol  nextAdjusted  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev!=  nextAdjusted)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev!=  nextAdjusted)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	17	None	replace
187	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  ==  nextAdjusted)  {  return  prev;  }  [CE]  cannot  find  symbol  nextAdjusted  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  ==  nextAdjusted)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  ==  nextAdjusted)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	17	None	replace
188	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev!=  nextAdjusted)  {  return  prev;  }  [CE]  cannot  find  symbol  nextAdjusted  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev!=  nextAdjusted)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  if(prev!=  nextAdjusted)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	17	None	replace
189	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	17	None	replace
190	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  nextTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  nextTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  nextTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
191	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
192	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  nextTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  nextTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
193	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  Long  prev  =  nextTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  Long  prev  =  nextTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    Long  prev  =  nextTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
194	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  int  prev  =  nextTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  int  prev  =  nextTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    int  prev  =  nextTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
195	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  firstTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  firstTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  firstTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
196	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  nTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  nTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  nTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
197	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  lastTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  lastTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  lastTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
198	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  nextLocal  >  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  nextLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  nextLocal  >  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
199	[BUG]  [BUGGY]  }  else  if(!instantLocal  &&  offsetLocal  >  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantLocal  &&  offsetLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantLocal  &&  offsetLocal  >  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
200	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetLocal  <  =  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
201	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  ==  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetLocal  ==  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
202	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal!=  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetLocal!=  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
203	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  prev  >  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  prev  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  prev  >  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
204	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >=  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetLocal  >=  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
205	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  ||  offsetLocal  >  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  ||  offsetLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  ||  offsetLocal  >  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
206	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  prevLocal  >  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  prevLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  prevLocal  >  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
207	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
208	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
209	[BUG]  [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	nextLocal  =  nextTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
210	[BUG]  [BUGGY]  if(nextLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(nextLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(nextLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
211	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  >  0)  {  return  offsetLocal;  }  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  >  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  >  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	38	None	replace
212	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	38	None	replace
213	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  =  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  =  1)  {	  }    else    if(offsetLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
214	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  offsetLocal  <  nextAdjusted)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  offsetLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  =  0  ||  offsetLocal  <  nextAdjusted)  {	  }    else    if(offsetLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
215	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  nextLocal  <  offsetAdjusted)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  nextLocal  <  offsetAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  =  0  ||  nextLocal  <  offsetAdjusted)  {	  }    else    if(offsetLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
216	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  >=  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
217	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  >=  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
218	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal!=  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
219	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal!=  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal!=  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
220	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  ==  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
221	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  ==  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  ==  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
222	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(nextLocal!=  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(nextLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(nextLocal!=  0)  {	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	6	None	add
223	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(nextLocal  >=  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(nextLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(nextLocal  >=  0)  {	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	6	None	add
224	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(nextLocal  ==  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(nextLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(nextLocal  ==  0)  {	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	6	None	add
225	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >>  0)  {  [CE]  incompatible  types  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >>  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  >>  0)  {	  	non-compiled	[CE]  incompatible  types	6	None	add
226	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  [Delete]  0)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  [Delete]  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  [Delete]  0)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
227	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  >=  1)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
228	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  1)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  >=  1)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
229	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  -1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  >=  -1)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
230	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  -1)  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  >=  -1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  >=  -1)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
231	[BUG]  [BUGGY]  }  else  if(prev  >  0)  {  [CE]  cannot  find  symbol  prev  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(prev  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(prev  >  0)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  prev	36	None	replace
232	[BUG]  [BUGGY]  }  else  if(numberLocal  >  0)  {  [CE]  cannot  find  symbol  numberLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(numberLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(numberLocal  >  0)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  numberLocal	36	None	replace
233	[BUG]  [BUGGY]  }  else  if(len  >  0)  {  [CE]  cannot  find  symbol  len  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(len  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(len  >  0)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  len	36	None	replace
234	[BUG]  [BUGGY]  }  else  if(secondLocal  >  0)  {  [CE]  cannot  find  symbol  secondLocal  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(secondLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(secondLocal  >  0)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  secondLocal	36	None	replace
235	[BUG]  [BUGGY]  }  else  if(currentLocal  >  0)  {  [CE]  cannot  find  symbol  currentLocal  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(currentLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(currentLocal  >  0)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  currentLocal	36	None	replace
236	[BUG]  [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
237	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
238	[BUG]  [BUGGY]  }  else  if(offsetPrev  <  0)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  <  0)  {	  }    else    if(offsetLocal    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	10	None	replace
239	[BUG]  [BUGGY]  }  else  if(nextLocal  <  offsetAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  offsetAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  offsetAdjusted)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	8	None	replace
240	[BUG]  [BUGGY]  }  else  if(nextLocal  <  offsetPrev)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  offsetPrev)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  offsetPrev)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	8	None	replace
241	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  nextLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  nextLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	8	None	replace
242	[BUG]  [BUGGY]  }  else  if(nextLocal  <  instantAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  instantAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  instantAdjusted)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	8	None	replace
243	[BUG]  [BUGGY]  }  else  if(nextAdjusted  <  offsetLocal)  {  [CE]  cannot  find  symbol  nextAdjusted  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextAdjusted  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextAdjusted  <  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	8	None	replace
244	[BUG]  [BUGGY]  }  else  if(nextLocal  <  nextAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  nextAdjusted)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	8	None	replace
245	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  offsetLocal)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
246	[BUG]  [BUGGY]  }  else  if(nextLocal  <  instantLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  instantLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  instantLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	8	None	replace
247	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(instantLocal  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}  else  if(instantLocal  <  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	compilable	  [FE]  ComparisonFailure  	8	7	replace
248	[BUG]  [BUGGY]  }  else  if(instantLocal  <  offsetLocal)  {  [FE]  ComparisonFailure  [FE]                                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(instantLocal  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  <  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	compilable	  [FE]  ComparisonFailure  	8	7	replace
249	[BUG]  [BUGGY]  int  prev  =  nextTransition(instantAdjusted);  [CE]  possible  loss  of  precision  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  nextTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  nextTransition(instantAdjusted);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
250	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted,  offsetLocal);  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted,  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted,  offsetLocal);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	16	None	replace
251	[BUG]  [BUGGY]  long  prev  =  currentTransition(instantAdjusted);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  currentTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  currentTransition(instantAdjusted);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
252	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	1	add
253	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	1	add
254	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
255	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(nextLocal  <  0)  {  [CE]  cannot  find  symbol  nextLocal  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(nextLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(nextLocal  <  0)  {	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	9	None	add
256	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  >=  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
257	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  >=  0)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  >=  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
258	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  >  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
259	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  >  0)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  >  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
260	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  ==  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	1	add
261	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  ==  0)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  ==  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	1	add
262	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(nextLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(nextLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(nextLocal  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal!=  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
264	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal!=  0)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal!=  0)  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
265	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  1)  {	  	compilable	  [FE]  ComparisonFailure  	9	1	add
266	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  1)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  1)  {	  	compilable	  [FE]  ComparisonFailure  	9	1	add
267	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  =  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  =  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
268	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  <  nextAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  instantLocal  <  nextAdjusted)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
269	[BUG]  [BUGGY]  }  else  if(nextAdjusted  >  0)  {  [CE]  cannot  find  symbol  nextAdjusted  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextAdjusted  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextAdjusted  >  0)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	1	None	replace
270	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  >=  nextAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  >=  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  instantLocal  >=  nextAdjusted)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
271	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  ==  nextAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  ==  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  instantLocal  ==  nextAdjusted)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
272	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  nextLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  nextLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  nextLocal  <  =  0)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
273	[BUG]  [BUGGY]  }  else  if(nextLocal!=  offsetLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal!=  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal!=  offsetLocal)  {	  }    else    if(offsetLocal!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	7	None	replace
274	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
275	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
276	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  Long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  Long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    Long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
277	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  int  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  int  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    int  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
278	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  short  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  short  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    short  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
279	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  double  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  double  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    double  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
280	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
281	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  initial  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    long  initial  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	compilable	  [FE]  ComparisonFailure  	18	1	add
282	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  initial  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  initial  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    long  initial  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	compilable	  [FE]  ComparisonFailure  	18	1	add
283	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
284	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  >  0)  {  return  offsetLocal;  }  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  >  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if  (prev  >  0)  {  return  offsetLocal;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	34	None	replace
285	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal);  if  (prev  >  0)  {  return  offsetLocal;  }  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal);  if  (prev  >  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal);  if  (prev  >  0)  {  return  offsetLocal;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	34	None	replace
286	[BUG]  [BUGGY]  long  prev  =  getPreviousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getPreviousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getPreviousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
287	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	34	None	replace
288	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  >=  0)  {  return  offsetLocal;  }  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  >=  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if  (prev  >=  0)  {  return  offsetLocal;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	34	None	replace
289	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  previousTransition(instantAdjusted,  offsetLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  previousTransition(instantAdjusted,  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    long  prev  =  previousTransition(instantAdjusted,  offsetLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
290	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  Short  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  Short  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    Short  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
291	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal  +  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal  +  offsetAdjusted);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	27	None	replace
292	[BUG]  [BUGGY]  long  prev  =  getPrev(instantLocal);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getPrev(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getPrev(instantLocal);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
293	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
294	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	22	1	add
295	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  cannot  find  symbol  i  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  cannot  find  symbol  i	22	None	add
296	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i).getPrev();  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  int  cannot  be  dereferenced  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i).getPrev();  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i).getPrev();  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	add
297	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	  	compilable	  [FE]  ComparisonFailure  	22	1	add
298	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    long  prev  =  previousTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	  	compilable	  [FE]  ComparisonFailure  	22	1	add
299	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	25	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	25	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	25	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  method  nextTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	25	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev),  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev),  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev),  i  <  offsetLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
304	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [CE]  cannot  find  symbol  offsetPrev  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	31	None	replace
305	[BUG]  [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
306	[BUG]  [BUGGY]  if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
307	[BUG]  [BUGGY]  if(instantLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
308	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [CE]  cannot  find  symbol  offsetPrev  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	31	None	replace
309	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted  -  offsetLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted  -  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted  -  offsetLocal);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	16	None	replace
310	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantAdjusted  +  offsetLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantAdjusted  +  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantAdjusted  +  offsetLocal);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	16	None	replace
311	[BUG]  [BUGGY]  long  prev  =  super.prevTransition(instantAdjusted);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  super.prevTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  super.prevTransition(instantAdjusted);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
312	[BUG]  [BUGGY]  if(instantLocal  >=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  >=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  >=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
313	[BUG]  [BUGGY]  if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
314	[BUG]  [BUGGY]  if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
315	[BUG]  [BUGGY]  if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
316	[BUG]  [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
317	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  currentTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  currentTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  currentTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
318	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  getOffset(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  long  prev  =  getOffset(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    long  prev  =  getOffset(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
319	[BUG]  [BUGGY]  long  prev  =  super.previousTransition(instantAdjusted);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  super.previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  super.previousTransition(instantAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
320	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [CE]  possible  loss  of  precision  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
321	[BUG]  [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
322	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [CE]  possible  loss  of  precision  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
323	[BUG]  [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [CE]  incompatible  types  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  incompatible  types	39	None	replace
324	[BUG]  [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [CE]  incompatible  types  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  incompatible  types	39	None	replace
325	[BUG]  [BUGGY]  if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
326	[BUG]  [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetPrev;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
327	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  int  prev  =  getOffset(i);  [CE]  cannot  find  symbol  i  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  int  prev  =  getOffset(i);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    int  prev  =  getOffset(i);	  	non-compiled	[CE]  cannot  find  symbol  i	20	None	add
328	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
329	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
330	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
331	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  i  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    int  prev  =  getOffset(i);  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }	  	non-compiled	[CE]  cannot  find  symbol  i	20	None	add
332	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  offsetPrev  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  offsetPrev  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  offsetPrev  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  offsetPrev  =  nextTransition(instantLocal);  }	  	non-compiled	[CE]  cannot  find  symbol  offsetPrev	20	None	add
333	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal!=    0)    {    long  prev  =  previousTransition(instantAdjusted);	  	compilable	  [FE]  ComparisonFailure  	6	7	add
334	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    long  prev  =  previousTransition(instantAdjusted);	  	compilable	  [FE]  ComparisonFailure  	6	7	add
335	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
336	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
337	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  <  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
338	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  <  0)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  <  0)  {	  	compilable	  [FE]  ComparisonFailure  	6	7	add
339	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetAdjusted  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}  else  if(offsetAdjusted  <  0)  {	  }    else    if(offsetLocal    <    0)    {    	compilable	  [FE]  ComparisonFailure  	10	7	replace
340	[BUG]  [BUGGY]  }  else  if(offsetAdjusted  <  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetAdjusted  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetAdjusted  <  0)  {	  }    else    if(offsetLocal    <    0)    {    	compilable	  [FE]  ComparisonFailure  	10	7	replace
341	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(instantLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}  else  if(instantLocal  <  0)  {	  }    else    if(offsetLocal    <    0)    {    	compilable	  [FE]  ComparisonFailure  	10	7	replace
342	[BUG]  [BUGGY]  }  else  if(instantLocal  <  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(instantLocal  <  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(instantLocal  <  0)  {	  }    else    if(offsetLocal    <    0)    {    	compilable	  [FE]  ComparisonFailure  	10	7	replace
343	[BUG]  [BUGGY]  }  else  if(!instantAdjusted)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted)  {	  }    else    if(offsetLocal    <    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	10	None	replace
344	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    ==    0)    {    long  prev  =  previousTransition(instantAdjusted);	  	compilable	  [FE]  ComparisonFailure  	3	1	add
345	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    long  prev  =  previousTransition(instantAdjusted);	  	compilable	  [FE]  ComparisonFailure  	3	1	add
346	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
347	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
348	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  instantAdjusted  >  nextLocal)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  instantAdjusted  >  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  =  0  ||  instantAdjusted  >  nextLocal)  {	  }    else    if(offsetLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
349	[BUG]  [BUGGY]  }  else  if(offsetPrev  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  <  =  0)  {	  }    else    if(offsetLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
350	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted,  offsetPrev);  if(prev  <  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  offsetPrev  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted,  offsetPrev);  if(prev  <  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted,  offsetPrev);  if(prev  <  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	24	None	replace
351	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  firstLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  firstLocal  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  firstLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  <  firstLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  firstLocal	24	None	replace
352	[BUG]  [BUGGY]  long  prev  =  getPrev(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getPrev(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getPrev(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
353	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  possible  loss  of  precision  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
354	[BUG]  [BUGGY]  long  prev  =  getOffset(prev);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getOffset(prev);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getOffset(prev);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	19	None	replace
355	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  nextLocal)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  nextLocal)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
356	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  offsetLocal)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  offsetLocal)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
357	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  getOffset(nextLocal))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  getOffset(nextLocal))  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  instantAdjusted  >  getOffset(nextLocal))  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
358	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >=  nextLocal)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantAdjusted  >=  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  instantAdjusted  >=  nextLocal)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
359	[BUG]  [BUGGY]  if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  >  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
360	[BUG]  [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
361	[BUG]  [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
362	[BUG]  [BUGGY]  }  else  if(offsetPrev  >=  0)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  >=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  >=  0)  {	  }    else    if(offsetLocal!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	7	None	replace
363	[BUG]  [BUGGY]  }  else  if(offsetPrev!=  0)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev!=  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev!=  0)  {	  }    else    if(offsetLocal!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	7	None	replace
364	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >>  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >>  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  >>  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	17	None	replace
365	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  offsetLocal)  {  return  prev;  }  [CE]  possible  loss  of  precision  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  offsetLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  offsetLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
366	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	23	7	replace
367	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	23	7	replace
368	[BUG]  [BUGGY]  int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  >  expected  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	23	None	replace
369	[BUG]  [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  >  expected  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	23	None	replace
370	[BUG]  [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  >  expected  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	23	None	replace
371	[BUG]  [BUGGY]  int  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  >  expected  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	23	None	replace
372	[BUG]  [BUGGY]  if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
373	[BUG]  [BUGGY]  if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
374	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  prev;  }  [CE]  possible  loss  of  precision  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
375	[BUG]  [BUGGY]  if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
376	[BUG]  [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
377	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  prev;  }  [CE]  possible  loss  of  precision  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
378	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(applyOffset(nextLocal));  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(applyOffset(nextLocal));  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(applyOffset(nextLocal));	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
379	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
380	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
381	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantAdjusted);  InstantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  long  prev  =  previousTransition(instantAdjusted);  InstantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    long  prev  =  previousTransition(instantAdjusted);  InstantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	18	None	add
382	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	21	7	replace
383	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	compilable	  [FE]  ComparisonFailure  	21	7	replace
384	[BUG]  [BUGGY]  int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  >  expected  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	21	None	replace
385	[BUG]  [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  >  expected  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  i  =  0,  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	21	None	replace
386	[BUG]  [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  >  expected  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  i  =  0,  prev  =  getOffset(prev);  i  <  instantLocal;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	21	None	replace
387	[BUG]  [BUGGY]  Integer  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  >  expected  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  Integer  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	Integer  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	21	None	replace
388	[BUG]  [BUGGY]      long  instantAdjusted  =  nextTransition(instantAdjusted);  [CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  instantAdjusted  =  nextTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  instantAdjusted  =  nextTransition(instantAdjusted);	  	non-compiled	[CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
389	[BUG]  [BUGGY]      long  instantAdjusted  =  getOffset(instantLocal);  [CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  instantAdjusted  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  instantAdjusted  =  getOffset(instantLocal);	  	non-compiled	[CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
390	[BUG]  [BUGGY]      long  instantAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  instantAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long  instantAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);	  	non-compiled	[CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
391	[BUG]  [BUGGY]      instantAdjusted  =  getOffset(instantLocal);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      instantAdjusted  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        instantAdjusted  =  getOffset(instantLocal);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	11	None	add
392	[BUG]  [BUGGY]      int  instantAdjusted  =  getOffset(instantLocal);  [CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      int  instantAdjusted  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        int  instantAdjusted  =  getOffset(instantLocal);	  	non-compiled	[CE]  variable  instantAdjusted  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
393	[BUG]  [BUGGY]      int  instantLocal  =  getOffset(instantLocal);  [CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      int  instantLocal  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        int  instantLocal  =  getOffset(instantLocal);	  	non-compiled	[CE]  variable  instantLocal  is  already  defined  in  method  getOffsetFromLocal(long)	11	None	add
394	[BUG]  [BUGGY]  if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
395	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  instantAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  instantAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  instantAdjusted)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
396	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
397	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
398	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantAdjusted);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
399	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getPrev(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getPrev(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getPrev(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
400	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getLocalPrev(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getLocalPrev(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getLocalPrev(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
401	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  offsetAdjusted;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  offsetAdjusted;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
402	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  offsetAdjusted;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  offsetAdjusted;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  offsetAdjusted;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
403	[BUG]  [BUGGY]  if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  =  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
404	[BUG]  [BUGGY]  if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  0)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
405	[BUG]  [BUGGY]  long  instantLocal  =  previousTransition(instantAdjusted);  if  (instantLocal  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  instantLocal  =  previousTransition(instantAdjusted);  if  (instantLocal  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  instantLocal  =  previousTransition(instantAdjusted);  if  (instantLocal  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
406	[BUG]  [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
407	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  instantLocal;  }  [CE]  possible  loss  of  precision  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
408	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  instantLocal;  }  [CE]  possible  loss  of  precision  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
409	[BUG]  [BUGGY]  }  else  if(offsetPrev  <  offsetLocal)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  <  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	8	None	replace
410	[BUG]  [BUGGY]  }  else  if(nextLocal  <  offset)  {  [CE]  cannot  find  symbol  nextLocal  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  offset)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  offset)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	8	None	replace
411	[BUG]  [BUGGY]  }  else  if(currentLocal  <  offsetLocal)  {  [CE]  cannot  find  symbol  currentLocal  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(currentLocal  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(currentLocal  <  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  currentLocal	8	None	replace
412	[BUG]  [BUGGY]  }  else  if(numberLocal  <  offsetLocal)  {  [CE]  cannot  find  symbol  numberLocal  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(numberLocal  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(numberLocal  <  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  numberLocal	8	None	replace
413	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
414	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    long  prev  =  previousTransition(instantAdjusted);	  	compilable	  [FE]  ComparisonFailure  	9	1	add
415	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    long  prev  =  previousTransition(instantAdjusted);	  	compilable	  [FE]  ComparisonFailure  	9	1	add
416	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    long  prev  =  previousTransition(instantAdjusted);  if(prev  <  offsetLocal)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
417	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted,  offsetPrev);  [CE]  cannot  find  symbol  offsetPrev  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted,  offsetPrev);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted,  offsetPrev);	      int    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	41	None	replace
418	[BUG]  [BUGGY]  }  else  if(offsetPrev  ==  0)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  ==  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  ==  0)  {	  }    else    if(offsetLocal    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	4	None	replace
419	[BUG]  [BUGGY]  if(instantLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  ==  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
420	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetPrev  >  0)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  offsetPrev  >  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetPrev  >  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	37	None	replace
421	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjust  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjust  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjust	  	non-compiled	[CE]  ')'  expected	20	None	add
422	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offset  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offset  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offset	  	non-compiled	[CE]  ')'  expected	20	None	add
423	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
424	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  }	  	compilable	  [FE]  ComparisonFailure  	20	1	add
425	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetA  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetA  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetA	  	non-compiled	[CE]  ')'  expected	20	None	add
426	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  >=  nextLocal)  {  return  prev;  }  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal);  if(prev  >=  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal);  if(prev  >=  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  cannot  find  symbol  nextLocal	17	None	replace
427	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)return  prev;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
428	[BUG]  [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }  [CE]  possible  loss  of  precision  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  previousTransition(instantAdjusted);  if(prev  >=  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    >=    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
429	[BUG]  [BUGGY]  long  prev  =  getOffset(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  getOffset(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  getOffset(instantLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
430	[BUG]  [BUGGY]  if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
431	[BUG]  [BUGGY]  if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
432	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantLocal,  nextAdjusted);  [CE]  cannot  find  symbol  nextAdjusted  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantLocal,  nextAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantLocal,  nextAdjusted);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextAdjusted	16	None	replace
433	[BUG]  [BUGGY]  long  prev  =  lastTransition(instantAdjusted);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  lastTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  lastTransition(instantAdjusted);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
434	[BUG]  [BUGGY]  long  prev  =  lastTransition(instantLocal);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  lastTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  lastTransition(instantLocal);	      long    prev    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
435	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal  -  1);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal  -  1);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal  -  1);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	27	None	replace
436	[BUG]  [BUGGY]  long  prev  =  nextTransition(instantLocal  -  offsetLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextTransition(instantLocal  -  offsetLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextTransition(instantLocal  -  offsetLocal);	      long    prev    =    nextTransition(instantLocal);    	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	27	None	replace
437	[BUG]  [BUGGY]  }  else  if(lastLocal  <  offsetLocal)  {  [CE]  cannot  find  symbol  lastLocal  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(lastLocal  <  offsetLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(lastLocal  <  offsetLocal)  {	  }    else    if(nextLocal    <    offsetLocal)    {    	non-compiled	[CE]  cannot  find  symbol  lastLocal	8	None	replace
438	[BUG]  [BUGGY]  if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
439	[BUG]  [BUGGY]  if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
440	[BUG]  [BUGGY]  instantLocal  =  instantLocal  -  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  instantLocal  -  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  instantLocal  -  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  instantLocal;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    instantLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
441	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantLocal);  int  prev  =  previousTransition(instantLocal);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantLocal);  int  prev  =  previousTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantLocal);    int  prev  =  previousTransition(instantLocal);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	26	None	add
442	[BUG]  [BUGGY]  if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  prev)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
443	[BUG]  [BUGGY]  if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  nextLocal)  {  int  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  prev;  }	      if(instantLocal    >    0)    {    int    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
444	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  offsetPrev  >  nextLocal)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  offsetPrev  >  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  =  0  ||  offsetPrev  >  nextLocal)  {	  }    else    if(offsetLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
445	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  offsetPrev  >=  nextLocal)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  =  0  ||  offsetPrev  >=  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetLocal  <  =  0  ||  offsetPrev  >=  nextLocal)  {	  }    else    if(offsetLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
446	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  instantLocal  <  =  0)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
447	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  offsetLocal  <  nextAdjusted)  {  [CE]  cannot  find  symbol  nextLocal  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  offsetLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  offsetLocal  <  nextAdjusted)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
448	[BUG]  [BUGGY]  }  else  if(nextLocal  >  1)  {  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  1)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  1)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
449	[BUG]  [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  <  nextLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  >  0  ||  instantLocal  <  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  >  0  ||  instantLocal  <  nextLocal)  {	  }    else    if(nextLocal    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextLocal	1	None	replace
450	[BUG]  [BUGGY]  }  else  if(offsetPrev  >  0  ||  instantLocal  <  nextLocal)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  >  0  ||  instantLocal  <  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  >  0  ||  instantLocal  <  nextLocal)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	36	None	replace
451	[BUG]  [BUGGY]  }  else  if(offsetPrev  >  0  ||  instantLocal  <  nextAdjusted)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  >  0  ||  instantLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  >  0  ||  instantLocal  <  nextAdjusted)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	36	None	replace
452	[BUG]  [BUGGY]  }  else  if(offsetPrev  >  0  &&  instantAdjusted  <  nextLocal)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  >  0  &&  instantAdjusted  <  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  >  0  &&  instantAdjusted  <  nextLocal)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	36	None	replace
453	[BUG]  [BUGGY]  }  else  if(offsetPrev  >  0  ||  offsetLocal  <  nextAdjusted)  {  [CE]  cannot  find  symbol  offsetPrev  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetPrev  >  0  ||  offsetLocal  <  nextAdjusted)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(offsetPrev  >  0  ||  offsetLocal  <  nextAdjusted)  {	  }    else    if(offsetPrev    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  offsetPrev	36	None	replace
454	[BUG]  [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  firstTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  previousTransition(instantAdjusted);  long  prev  =  firstTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    previousTransition(instantAdjusted);    long  prev  =  firstTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	13	None	add
455	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	compilable	  [FE]  ComparisonFailure  	19	7	replace
456	[BUG]  [BUGGY]  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	compilable	  [FE]  ComparisonFailure  	19	7	replace
457	[BUG]  [BUGGY]  long  prev  =  nextLocal  -  offsetLocal;  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [CE]  cannot  find  symbol  nextLocal  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextLocal  -  offsetLocal;  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextLocal  -  offsetLocal;  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);	      long    prev    =    previousTransition(instantAdjusted);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	19	None	replace
458	[BUG]  [BUGGY]  int  diff  =  getOffset(instantLocal);  [CE]  variable  diff  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  diff  =  getOffset(instantLocal);  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  diff  =  getOffset(instantLocal);	      	non-compiled	[CE]  variable  diff  is  already  defined  in  method  getOffsetFromLocal(long)	12	None	replace
459	[BUG]  [BUGGY]  int  prev  =  getOffset(prev);  if(prev  <  =  0)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  getOffset(prev);  if(prev  <  =  0)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  getOffset(prev);  if(prev  <  =  0)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
460	[BUG]  [BUGGY]  int  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [CE]  >  expected  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  getOffset(prev);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  -  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    -    offsetAdjusted);    }    	non-compiled	[CE]  >  expected	21	None	replace
461	[BUG]  [BUGGY]  if(instantLocal!=  nextLocal)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  nextLocal)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  nextLocal)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
462	[BUG]  [BUGGY]  while((  instantLocal  -  offsetAdjusted)  <  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  while((  instantLocal  -  offsetAdjusted)  <  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	while((  instantLocal  -  offsetAdjusted)  <  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
463	[BUG]  [BUGGY]  if(instantLocal  <  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetPrev;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetPrev;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
464	[BUG]  [BUGGY]  while((  instantLocal  -  offsetAdjusted)  <  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  while((  instantLocal  -  offsetAdjusted)  <  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	while((  instantLocal  -  offsetAdjusted)  <  0)  {  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
465	[BUG]  [BUGGY]  if(instantLocal  <  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
466	[BUG]  [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted,  nextLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted,  nextLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  <  =  0)  {  long  prev  =  previousTransition(instantAdjusted,  nextLocal);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    <    =    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
467	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  nextLocal)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
468	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted,  prev);  if(prev  <  nextLocal)  {  return  prev;  }  [CE]  method  previousTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted,  prev);  if(prev  <  nextLocal)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted,  prev);  if(prev  <  nextLocal)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  method  previousTransition  in  class  DateTimeZone  cannot  be  applied  to  given  types;	24	None	replace
469	[BUG]  [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =)  {  return  prev;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =)  {  return  prev;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  previousTransition(instantAdjusted);  if(prev  <  =)  {  return  prev;  }	      long    prev    =    previousTransition(instantAdjusted);    if(prev    <    nextLocal)    {    return    prev;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
470	[BUG]  [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantLocal  >  nextLocal)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(nextLocal  <  =  0  ||  instantLocal  >  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(nextLocal  <  =  0  ||  instantLocal  >  nextLocal)  {	  }    else    if(nextLocal    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
471	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  Prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  cannot  find  symbol  Prev  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  Prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  Prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	  	non-compiled	[CE]  cannot  find  symbol  Prev	22	None	add
472	[BUG]  [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    for(int  i  =  0,  prev  =  getOffset(i);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);	  	non-compiled	[CE]  'else'  without  'if'	22	None	add
473	[BUG]  [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  int  prev  =  previousTransition(instantAdjusted);  [CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]      long  prev  =  nextTransition(instantAdjusted);  int  prev  =  previousTransition(instantAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	        long    prev    =    nextTransition(instantAdjusted);    int  prev  =  previousTransition(instantAdjusted);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  getOffsetFromLocal(long)	15	None	add
474	[BUG]  [BUGGY]  long  prev  =  nextLocal  -  instantAdjusted;  [CE]  cannot  find  symbol  nextLocal  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextLocal  -  instantAdjusted;  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextLocal  -  instantAdjusted;	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol  nextLocal	14	None	replace
475	[BUG]  [BUGGY]  long  prev  =  nextPrev(instantLocal);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  long  prev  =  nextPrev(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	long  prev  =  nextPrev(instantLocal);	      long    prev    =    previousTransition(instantAdjusted);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
476	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(offsetLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(offsetLocal  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
477	[BUG]  [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(OffsetLocal.isZone())  {  [CE]  cannot  find  symbol  OffsetLocal  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal!=  0)  {  }  else  if(OffsetLocal.isZone())  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal!=    0)    {    }  else  if(OffsetLocal.isZone())  {	  	non-compiled	[CE]  cannot  find  symbol  OffsetLocal	6	None	add
478	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  offsetPrev  >  getOffset(instantLocal))  {  [CE]  cannot  find  symbol  offsetPrev  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  offsetPrev  >  getOffset(instantLocal))  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0  ||  offsetPrev  >  getOffset(instantLocal))  {	  	non-compiled	[CE]  cannot  find  symbol  offsetPrev	9	None	add
479	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  getOffset(instantLocal))  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  getOffset(instantLocal))  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
480	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  getOffset(instantLocal))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  getOffset(instantLocal))  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  getOffset(instantLocal))  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
481	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantLocal  >  getOffset(instantLocal))  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0  ||  instantLocal  >  getOffset(instantLocal))  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
482	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantLocal  >  getOffset(instantLocal))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantLocal  >  getOffset(instantLocal))  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0  ||  instantLocal  >  getOffset(instantLocal))  {	  	compilable	  [FE]  ComparisonFailure  	9	7	add
483	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  nextLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0  ||  instantAdjusted  >  nextLocal)  {	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	9	None	add
484	[BUG]  [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantLocal  >  nextLocal)  {  [CE]  cannot  find  symbol  nextLocal  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  <  0)  {  }  else  if(offsetLocal  <  0  ||  instantLocal  >  nextLocal)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    <    0)    {    }  else  if(offsetLocal  <  0  ||  instantLocal  >  nextLocal)  {	  	non-compiled	[CE]  cannot  find  symbol  nextLocal	9	None	add
485	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffsetLocal(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffsetLocal(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffsetLocal(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
486	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  startOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  startOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  startOffset(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
487	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getLocalPrev(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getLocalPrev(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getLocalPrev(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
488	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	add	for(int  i  =  0,  prev  =  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
489	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [FE]  ComparisonFailure  [FE]                                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  offsetLocal;  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	compilable	  [FE]  ComparisonFailure  	28	7	replace
490	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  previousTransition(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [CE]  possible  loss  of  precision  [FE]                                  ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  previousTransition(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  previousTransition(instantLocal);  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
491	[BUG]  [BUGGY]  int  prev  =  getOffset(prev);  if(prev  <  =  0)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  int  prev  =  getOffset(prev);  if(prev  <  =  0)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	int  prev  =  getOffset(prev);  if(prev  <  =  0)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
492	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal));  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal));  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantLocal));  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantLocal);  instantLocal  =  nextTransition(instantLocal  +  offsetAdjusted);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantLocal);    instantLocal    =    nextTransition(instantLocal    +    offsetAdjusted);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
493	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >  0  &&  instantLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >  0  &&  instantLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetLocal  >  0  &&  instantLocal  <  =  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
494	[BUG]  [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >  0  &&  nextLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(!instantAdjusted  &&  offsetLocal  >  0  &&  nextLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}  else  if(!instantAdjusted  &&  offsetLocal  >  0  &&  nextLocal  <  =  0)  {	  }    else    if(!instantAdjusted    &&    offsetLocal    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
495	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(OffsetLocal  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(OffsetLocal  <  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(OffsetLocal  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
496	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  =  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  ==  =  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  ==  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
497	[BUG]  [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  {  0)  {  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  }  else  if(offsetLocal  ==  0)  {  }  else  if(offsetLocal  {  0)  {  [BUGGY]    long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	}    else    if(offsetLocal    ==    0)    {    }  else  if(offsetLocal  {  0)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
498	[BUG]  [BUGGY]  if(instantLocal!=  nextLocal)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal!=  nextLocal)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal!=  nextLocal)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
499	[BUG]  [BUGGY]  if(instantLocal  ==  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  if(instantLocal  ==  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	if(instantLocal  ==  prev)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  =  0)  {  return  offsetLocal;  }	      if(instantLocal    >    0)    {    long    prev    =    previousTransition(instantAdjusted);    if    (prev    <    =    0)    {    return    offsetLocal;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
500	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal),  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(instantLocal),  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(instantLocal),  i  <  prev;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
501	[BUG]  [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  tempLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [CE]  cannot  find  symbol  tempLocal  [FE]                        ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  for(int  i  =  0,  prev  =  getOffset(prev);  i  <  tempLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	for(int  i  =  0,  prev  =  getOffset(prev);  i  <  tempLocal;  i++)  {  instantLocal  =  nextTransition(instantAdjusted,  prev);  }	      for(int    i    =    0,    prev    =    getOffset(i);    i    <    prev;    i++)    {    instantLocal    =    nextTransition(instantAdjusted,    prev);    }    	non-compiled	[CE]  cannot  find  symbol  tempLocal	25	None	replace
502	[BUG]  [BUGGY]  instantAdjusted  =  nextTransition(instantLocal,  nextAdjusted);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]              ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  nextTransition(instantLocal,  nextAdjusted);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  nextTransition(instantLocal,  nextAdjusted);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
503	[BUG]  [BUGGY]  instantAdjusted  =  previousTransition(instantLocal);  [CE]  cannot  assign  a  value  to  final  variable  instantAdjusted  [FE]                ComparisonFailure    [CONTEXT]    if  ((offsetLocal  -  offsetAdjusted)  <  0)  {    long  nextLocal  =  nextTransition(instantAdjusted);  long  nextAdjusted  =  nextTransition(instantLocal  -  offsetAdjusted);  if  (nextLocal  !=  nextAdjusted)  {  return  offsetLocal;  }  }    [BUGGY]  instantAdjusted  =  previousTransition(instantLocal);  [BUGGY]    }  else  if  (offsetLocal  >  0)  {  long  prev  =  previousTransition(instantAdjusted);  if  (prev  <  instantAdjusted)  {  int  offsetPrev  =  getOffset(prev);  int  diff  =  offsetPrev  -  offsetLocal;  if  (instantAdjusted  -  prev  <=  diff)  {  return  offsetPrev;  }  }  }  return  offsetAdjusted;  [CLASS]  DateTimeZone  1  Stub  [METHOD]  getOffsetFromLocal  [RETURN_TYPE]  int  long  instantLocal  [VARIABLES]  Set  cAvailableIDs  ids  boolean  NameProvider  cNameProvider  nameProvider  String  convId  iID  id  name  nameKey  providerClass  str  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  map  long  instant  instantAdjusted  instantLocal  nextAdjusted  nextLocal  prev  serialVersionUID  DateTimeZone  UTC  cDefault  dtz  temp  zone  int  diff  offsetAdjusted  offsetLocal  offsetPrev  Provider  cProvider  provider  	projects/Time19/src/main/java/org/joda/time/DateTimeZone.java	0.11547005383792514	900	900	1	replace	instantAdjusted  =  previousTransition(instantLocal);	      instantAdjusted    =    nextTransition(instantAdjusted);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  instantAdjusted	32	None	replace
