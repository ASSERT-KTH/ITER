bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);	  	compilable	  [FE]  AssertionFailedError  	7	2	add
2	[BUG]  [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);	  	compilable	  [FE]  AssertionFailedError  	7	2	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	7	2	add
4	[BUG]  [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	7	2	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeInt(i    +    1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	7	2	add
6	[BUG]  [BUGGY]  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(i    +    1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	7	2	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeInt(-1);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
8	[BUG]  [BUGGY]  stream.writeInt(-1);  stream.writeInt(-1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(-1);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
10	[BUG]  [BUGGY]  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeInt(-1);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
12	[BUG]  [BUGGY]  stream.writeInt(-1);  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(-1);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	9	2	add
13	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  0);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  SerialUtilities.writeShape(shape,  stream,  0);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	SerialUtilities.writeShape(shape,  stream,  0);	      SerialUtilities.writeShape(shape,    stream);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	6	None	replace
14	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	SerialUtilities.writeShape(shape,  stream,  i);	      SerialUtilities.writeShape(shape,    stream);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	6	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        stream.writeInt(i);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
16	[BUG]  [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        stream.writeInt(i);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
18	[BUG]  [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	3	2	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
20	[BUG]  [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
21	[BUG]  [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  serialUtilities.writeShape(shape,  stream);  [CE]  cannot  find  symbol  serialUtilities  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  serialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  serialUtilities.writeShape(shape,  stream);	  	non-compiled	[CE]  cannot  find  symbol  serialUtilities	1	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
23	[BUG]  [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
25	[BUG]  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
27	[BUG]  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
28	[BUG]  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeShape(shape,  stream);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeShape(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        SerialUtilities.writeShape(shape,    stream);    stream.writeShape(shape,  stream);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeObject(shape);  stream.writeObject(shape);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeObject(shape);    stream.writeObject(shape);	  	compilable	  [FE]  AssertionFailedError  	11	2	add
30	[BUG]  [BUGGY]  stream.writeObject(shape);  stream.writeObject(shape);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeObject(shape);  stream.writeObject(shape);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeObject(shape);    stream.writeObject(shape);	  	compilable	  [FE]  AssertionFailedError  	11	2	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	11	2	add
32	[BUG]  [BUGGY]  stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	11	2	add
33	[BUG]  [BUGGY]  stream.writeObject(shape);  SerialUtilities.writeShape(shape);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeObject(shape);  SerialUtilities.writeShape(shape);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeObject(shape);    SerialUtilities.writeShape(shape);	  	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	11	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.defaultWriteObject();  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	stream.defaultWriteObject();	      stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    	compilable	  [FE]  AssertionFailedError  	2	2	replace
35	[BUG]  [BUGGY]  stream.defaultWriteObject();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.defaultWriteObject();  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.defaultWriteObject();	      stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    	compilable	  [FE]  AssertionFailedError  	2	2	replace
36	[BUG]  [BUGGY]  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  i);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  i);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(-1);    SerialUtilities.writeShape(shape,  i);	  	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	9	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
38	[BUG]  [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	1	2	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  if(shape!=  null)  {  stream.writeInt(i);  }  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        stream.writeInt(i);    stream.writeInt(i);  if(shape!=  null)  {  stream.writeInt(i);  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
40	[BUG]  [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  if(shape!=  null)  {  stream.writeInt(i);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      stream.writeInt(i);  stream.writeInt(i);  if(shape!=  null)  {  stream.writeInt(i);  }  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        stream.writeInt(i);    stream.writeInt(i);  if(shape!=  null)  {  stream.writeInt(i);  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
41	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  SerialUtilities.writeShape(shape,  i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	SerialUtilities.writeShape(shape,  i);	      SerialUtilities.writeShape(shape,    stream);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	6	None	replace
42	[BUG]  [BUGGY]  SerialUtilities.writeStroke(shape,  stream);  [CE]  method  writeStroke  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  SerialUtilities.writeStroke(shape,  stream);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	SerialUtilities.writeStroke(shape,  stream);	      SerialUtilities.writeShape(shape,    stream);    	non-compiled	[CE]  method  writeStroke  in  class  SerialUtilities  cannot  be  applied  to  given  types;	6	None	replace
43	[BUG]  [BUGGY]  stream.writeInt(-1);  SerialUtilities.writeShape(shape);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]  stream.writeInt(-1);  SerialUtilities.writeShape(shape);  [BUGGY]    SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	stream.writeInt(-1);    SerialUtilities.writeShape(shape);	  	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	9	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	add	        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
45	[BUG]  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {    [BUGGY]      SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	139	139	2	replace	        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
