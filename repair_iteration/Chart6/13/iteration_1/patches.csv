bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  for(int  i  =  0;  i  <  count  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  for(int  i  =  0;  i  <  count  +  1;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int    i    =    0;    i    <    count    +    1;    i++)    {    for(int  i  =  0;  i  <  count  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  ObjectOutputStream  stream  =  new  ObjectOutputStream();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  ObjectOutputStream  stream  =  new  ObjectOutputStream();  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int    i    =    0;    i    <    count    +    1;    i++)    {    ObjectOutputStream  stream  =  new  ObjectOutputStream();	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  int  count  =  size();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  int  count  =  size();  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int    i    =    0;    i    <    count    +    1;    i++)    {    int  count  =  size();	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  1;  i  <  count;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	add	for(int  i  =  1;  i  <  count;  i++)  {	  for(int    i    =    0;    i    <    size;    i++)    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
5	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  count;  i++)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  1;  i  <  count;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int  i  =  1;  i  <  count;  i++)  {	  for(int    i    =    0;    i    <    size;    i++)    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  2;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	add	for(int  i  =  0;  i  <  count  +  2;  i++)  {	  for(int    i    =    0;    i    <    count    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	5	2	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  2;  i++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  2;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int  i  =  0;  i  <  count  +  2;  i++)  {	  for(int    i    =    0;    i    <    count    +    1;    i++)    {    	compilable	  [FE]  AssertionFailedError  	5	2	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  SerialUtilities.writeShape(stream,  stream);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  SerialUtilities.writeShape(stream,  stream);  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int    i    =    0;    i    <    count    +    1;    i++)    {    SerialUtilities.writeShape(stream,  stream);	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  SerialUtilities.writeShape(stream,  i);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  SerialUtilities.writeShape(stream,  i);  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int    i    =    0;    i    <    count    +    1;    i++)    {    SerialUtilities.writeShape(stream,  i);	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  count;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  For(int  i  =  0;  i  <  count;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	For(int  i  =  0;  i  <  count;  i++)  {	  for(int    i    =    0;    i    <    size;    i++)    {    	non-compiled	[CE]  '.class'  expected	7	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  count  <  size;  i++)  {  [CE]  size  has  private  access  in  AbstractObjectList  [FE]        AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  count  <  size;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int  i  =  0;  count  <  size;  i++)  {	  for(int    i    =    0;    i    <    size;    i++)    {    	non-compiled	[CE]  size  has  private  access  in  AbstractObjectList	7	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  int  i  =  0;  i  <  count  +  1;  i++)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError    [CONTEXT]    private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);    [BUGGY]  for(int  i  =  0;  i  <  count  +  1;  i++)  {  int  i  =  0;  i  <  count  +  1;  i++)  {  [BUGGY]    Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	136	136	2	replace	for(int    i    =    0;    i    <    count    +    1;    i++)    {    int  i  =  0;  i  <  count  +  1;  i++)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	4	None	add
