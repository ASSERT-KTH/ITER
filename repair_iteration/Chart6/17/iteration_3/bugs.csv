bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.defaultWriteObject();  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.defaultWriteObject();	          stream.writeInt(-1);    stream.writeInt(-1);    	compilable	  [FE]  AssertionFailedError  	26	2	replace
2	[BUG]  [BUGGY]  stream.defaultWriteObject();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.defaultWriteObject();  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.defaultWriteObject();	          stream.writeInt(-1);    stream.writeInt(-1);    	compilable	  [FE]  AssertionFailedError  	26	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
4	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
6	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
8	[BUG]  [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.writeInt(i    +    1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
10	[BUG]  [BUGGY]  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i    +    1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
12	[BUG]  [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i  +  1);  stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i    +    1);    stream.writeInt(i  +  1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	15	2	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  stream.writeObject(shape);  stream.writeObject(shape);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeObject(shape);        stream.writeObject(shape);    stream.writeObject(shape);  stream.writeObject(shape);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
14	[BUG]  [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  stream.writeObject(shape);  stream.writeObject(shape);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  stream.writeObject(shape);  stream.writeObject(shape);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        stream.writeObject(shape);    stream.writeObject(shape);  stream.writeObject(shape);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
15	[BUG]  [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  SerialUtilities.writeShape(shape);  stream.writeObject(shape);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  SerialUtilities.writeShape(shape);  stream.writeObject(shape);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        stream.writeObject(shape);    SerialUtilities.writeShape(shape);  stream.writeObject(shape);	  	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	5	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeObject(shape);        stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
17	[BUG]  [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	5	2	add
18	[BUG]  [BUGGY]  SerialUtilities.writePaint(shape,  stream,  i);  [CE]  method  writePaint  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writePaint(shape,  stream,  i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writePaint(shape,  stream,  i);	  SerialUtilities.writePaint(shape,    stream);    	non-compiled	[CE]  method  writePaint  in  class  SerialUtilities  cannot  be  applied  to  given  types;	39	None	replace
19	[BUG]  [BUGGY]  SerialUtilities.writePaint(shape,  stream,  count);  [CE]  method  writePaint  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writePaint(shape,  stream,  count);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writePaint(shape,  stream,  count);	  SerialUtilities.writePaint(shape,    stream);    	non-compiled	[CE]  method  writePaint  in  class  SerialUtilities  cannot  be  applied  to  given  types;	39	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
21	[BUG]  [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    stream.writeObject(shape);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
23	[BUG]  [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    stream.writeObject(shape);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
24	[BUG]  [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  Stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [CE]  cannot  find  symbol  Stream  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  Stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    Stream.writeObject(shape);  SerialUtilities.writeShape(shape,  stream);	  	non-compiled	[CE]  cannot  find  symbol  Stream	8	None	add
25	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i,  count,  stream);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i,  count,  stream);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i,  count,  stream);	  SerialUtilities.writeShape(shape,    stream,    count,    i);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	4	None	replace
26	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i,  count,  pattern);  [CE]  cannot  find  symbol  pattern  [FE]                  AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i,  count,  pattern);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i,  count,  pattern);	  SerialUtilities.writeShape(shape,    stream,    count,    i);    	non-compiled	[CE]  cannot  find  symbol  pattern	4	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.defaultWriteObject();  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.defaultWriteObject();  SerialUtilities.writeShape(shape,  stream);	          stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
28	[BUG]  [BUGGY]  stream.defaultWriteObject();  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.defaultWriteObject();  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.defaultWriteObject();  SerialUtilities.writeShape(shape,  stream);	          stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    	compilable	  [FE]  AssertionFailedError  	20	2	replace
29	[BUG]  [BUGGY]  stream.writeInt(i,  count);  SerialUtilities.writeShape(shape,  stream);  [CE]  method  writeInt  in  class  ObjectOutputStream  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i,  count);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i,  count);  SerialUtilities.writeShape(shape,  stream);	          stream.writeInt(i);    SerialUtilities.writeShape(shape);    	non-compiled	[CE]  method  writeInt  in  class  ObjectOutputStream  cannot  be  applied  to  given  types;	40	None	replace
30	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i);  stream.writeInt(-1);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i);  stream.writeInt(-1);	          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	36	None	replace
31	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().writeShape(shape,  stream);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  Thread.currentThread().getContextClassLoader().writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	Thread.currentThread().getContextClassLoader().writeShape(shape,  stream);	          SerialUtilities.writeShape(shape,    stream);    Thread.currentThread().getContextClassLoader().writeShape(shape,    stream);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(-1);        stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	25	2	add
33	[BUG]  [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(-1);  stream.writeInt(-1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(-1);        stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	25	2	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(-1);        stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	25	2	add
35	[BUG]  [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(-1);        stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	25	2	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	19	2	add
37	[BUG]  [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	19	2	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	19	2	add
39	[BUG]  [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	19	2	add
40	[BUG]  [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  serialUtilities.writeShape(shape,  stream);  [CE]  cannot  find  symbol  serialUtilities  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  serialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  serialUtilities.writeShape(shape,  stream);	  	non-compiled	[CE]  cannot  find  symbol  serialUtilities	19	None	add
41	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i);	          stream.writeInt(-1);    SerialUtilities.writeShape(shape,    i);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	34	None	replace
42	[BUG]  [BUGGY]  stream.writeInt(i,  -1);  SerialUtilities.writeShape(shape,  stream);  [CE]  method  writeInt  in  class  ObjectOutputStream  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i,  -1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i,  -1);  SerialUtilities.writeShape(shape,  stream);	          stream.writeInt(-1);    SerialUtilities.writeShape(shape);    	non-compiled	[CE]  method  writeInt  in  class  ObjectOutputStream  cannot  be  applied  to  given  types;	38	None	replace
43	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  0,  count);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  0,  count);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  i,  0,  count);	  SerialUtilities.writeShape(shape,    stream,    0,    count);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	1	None	replace
44	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  0,  count,  i);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  0,  count,  i);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  0,  count,  i);	  SerialUtilities.writeShape(shape,    stream,    0,    count);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	1	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
46	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(1);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
48	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(1);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(0);  stream.writeInt(0);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.writeInt(0);    stream.writeInt(0);	  	compilable	  [FE]  AssertionFailedError  	23	2	add
50	[BUG]  [BUGGY]  stream.writeInt(0);  stream.writeInt(0);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(0);  stream.writeInt(0);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(0);    stream.writeInt(0);	  	compilable	  [FE]  AssertionFailedError  	23	2	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(0);  stream.writeInt(1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.writeInt(0);    stream.writeInt(1);	  	compilable	  [FE]  AssertionFailedError  	23	2	add
52	[BUG]  [BUGGY]  stream.writeInt(0);  stream.writeInt(1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(0);  stream.writeInt(1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(0);    stream.writeInt(1);	  	compilable	  [FE]  AssertionFailedError  	23	2	add
53	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  count,  1,  0);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  count,  1,  0);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  count,  1,  0);	  SerialUtilities.writeShape(shape,    stream,    1,    0);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	2	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
55	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
57	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
59	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	13	2	add
60	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  count,  0,  i);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  count,  0,  i);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  count,  0,  i);	  SerialUtilities.writeShape(shape,    stream,    0,    i);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	33	None	replace
61	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i,  stream,  0,  i);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i,  stream,  0,  i);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i,  stream,  0,  i);	  SerialUtilities.writeShape(shape,    stream,    0,    i);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	33	None	replace
62	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i,  stream,  count);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i,  stream,  count);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i,  stream,  count);	  SerialUtilities.writeShape(shape,    stream,    i,    count);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	32	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
64	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
66	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
68	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	10	2	add
70	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	10	2	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	10	2	add
72	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	10	2	add
73	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  serialUtilities.writeShape(shape,  stream);  [CE]  cannot  find  symbol  serialUtilities  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  serialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);  serialUtilities.writeShape(shape,  stream);	  	non-compiled	[CE]  cannot  find  symbol  serialUtilities	10	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(-1);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
75	[BUG]  [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(-1);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(-1);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
77	[BUG]  [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(-1);        SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(-1);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
79	[BUG]  [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(-1);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	27	2	add
80	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  -1);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  -1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  -1);	          stream.writeInt(-1);    SerialUtilities.writeShape(shape,    -1);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	29	None	replace
81	[BUG]  [BUGGY]  stream.writeInt(i,  -1);  SerialUtilities.writeShape(shape,  -1);  [CE]  method  writeInt  in  class  ObjectOutputStream  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i,  -1);  SerialUtilities.writeShape(shape,  -1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i,  -1);  SerialUtilities.writeShape(shape,  -1);	          stream.writeInt(-1);    SerialUtilities.writeShape(shape,    -1);    	non-compiled	[CE]  method  writeInt  in  class  ObjectOutputStream  cannot  be  applied  to  given  types;	29	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
83	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(0);  stream.writeInt(0);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(0);  stream.writeInt(0);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
85	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(0);  stream.writeInt(0);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(0);  stream.writeInt(0);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(0);  stream.writeInt(0);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
86	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i,  stream,  buffer);  [CE]  cannot  find  symbol  buffer  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i,  stream,  buffer);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i,  stream,  buffer);	  SerialUtilities.writeShape(shape,    i,    stream);    	non-compiled	[CE]  cannot  find  symbol  buffer	3	None	replace
87	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  1,  0);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  1,  0);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  i,  1,  0);	  SerialUtilities.writeShape(shape,    stream,    1,    0);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	2	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
89	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
91	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	21	2	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	19	2	add
93	[BUG]  [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	19	2	add
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(size());  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.writeInt(size());	          stream.writeInt(i);    stream.writeInt(i);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
95	[BUG]  [BUGGY]  stream.writeInt(size());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(size());  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(size());	          stream.writeInt(i);    stream.writeInt(i);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
96	[BUG]  [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(-);  stream.writeInt(-1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(-);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(-1);        stream.writeInt(-1);    stream.writeInt(-);  stream.writeInt(-1);	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
97	[BUG]  [BUGGY]  stream.writeInt(size  +  1);  [CE]  size  has  private  access  in  AbstractObjectList  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(size  +  1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(size  +  1);	  stream.writeInt(i    +    1);    	non-compiled	[CE]  size  has  private  access  in  AbstractObjectList	16	None	replace
98	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  i,  0,  stream);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  i,  0,  stream);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  i,  0,  stream);	  SerialUtilities.writeShape(shape,    stream,    0,    i);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	33	None	replace
99	[BUG]  [BUGGY]  stream.writeInt(i,  size);  SerialUtilities.writeShape(shape,  stream);  [CE]  size  has  private  access  in  AbstractObjectList  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i,  size);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i,  size);  SerialUtilities.writeShape(shape,  stream);	          stream.writeInt(i);    SerialUtilities.writeShape(shape);    	non-compiled	[CE]  size  has  private  access  in  AbstractObjectList	40	None	replace
100	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  count,  type);  [CE]  cannot  find  symbol  type  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  count,  type);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  i,  count,  type);	  SerialUtilities.writeShape(shape,    stream,    i,    count);    	non-compiled	[CE]  cannot  find  symbol  type	32	None	replace
101	[BUG]  [BUGGY]  stream.writeInt(i);  SerialUtilities.writeShape(shape,  -1);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(i);  SerialUtilities.writeShape(shape,  -1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(i);  SerialUtilities.writeShape(shape,  -1);	          stream.writeInt(-1);    SerialUtilities.writeShape(shape,    -1);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	29	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
103	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
105	[BUG]  [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  SerialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,  stream);	  	compilable	  [FE]  AssertionFailedError  	8	2	add
106	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  0,  size);  [CE]  size  has  private  access  in  AbstractObjectList  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  0,  size);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  i,  0,  size);	  SerialUtilities.writeShape(shape,    stream,    0,    i);    	non-compiled	[CE]  size  has  private  access  in  AbstractObjectList	33	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(-1);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
108	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  stream.writeInt(-1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(-1);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	35	2	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
110	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(-1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
112	[BUG]  [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          SerialUtilities.writeShape(shape,    stream);    stream.writeInt(i);  stream.writeInt(i);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                SerialUtilities.writeShape(shape,        stream);        stream.writeInt(i);    stream.writeInt(i);	  	compilable	  [FE]  AssertionFailedError  	30	2	add
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(size()  -  1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	stream.writeInt(size()  -  1);	          stream.writeInt(i);    stream.writeInt(i);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
114	[BUG]  [BUGGY]  stream.writeInt(size()  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  stream.writeInt(size()  -  1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	stream.writeInt(size()  -  1);	          stream.writeInt(i);    stream.writeInt(i);    	compilable	  [FE]  AssertionFailedError  	18	2	replace
115	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  count,  null);  [CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  i,  count,  null);  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  i,  count,  null);	  SerialUtilities.writeShape(shape,    stream,    i,    count);    	non-compiled	[CE]  method  writeShape  in  class  SerialUtilities  cannot  be  applied  to  given  types;	32	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(-1);  stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
117	[BUG]  [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(-1);  stream.writeInt(-1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(i);    stream.writeInt(i);  stream.writeInt(-1);  stream.writeInt(-1);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(i);        stream.writeInt(i);    stream.writeInt(-1);  stream.writeInt(-1);	  	compilable	  [FE]  AssertionFailedError  	17	2	add
118	[BUG]  [BUGGY]  SerialUtilities.writeStroke(shape,  stream);  [CE]  method  writeStroke  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeStroke(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeStroke(shape,  stream);	          SerialUtilities.writeShape(shape,    stream);    SerialUtilities.writeShape(shape,    stream);    	non-compiled	[CE]  method  writeStroke  in  class  SerialUtilities  cannot  be  applied  to  given  types;	11	None	replace
119	[BUG]  [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  serialUtilities.writeShape(shape,  stream);  [CE]  cannot  find  symbol  serialUtilities  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeObject(shape);    SerialUtilities.writeShape(shape,  stream);  stream.writeObject(shape);  serialUtilities.writeShape(shape,  stream);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeObject(shape);        SerialUtilities.writeShape(shape,    stream);    stream.writeObject(shape);  serialUtilities.writeShape(shape,  stream);	  	non-compiled	[CE]  cannot  find  symbol  serialUtilities	8	None	add
120	[BUG]  [BUGGY]  SerialUtilities.writeShape(shape,  stream,  0,  stream.readInt());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writeShape(shape,  stream,  0,  stream.readInt());  [BUGGY]      }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writeShape(shape,  stream,  0,  stream.readInt());	  SerialUtilities.writeShape(shape,    stream,    0,    count);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(0);  stream.writeInt(0);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	add	                stream.writeInt(-1);        stream.writeInt(-1);    stream.writeInt(0);  stream.writeInt(0);	  	compilable	  [FE]  AssertionFailedError  	25	2	add
122	[BUG]  [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(0);  stream.writeInt(0);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]          stream.writeInt(-1);    stream.writeInt(-1);  stream.writeInt(0);  stream.writeInt(0);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	                stream.writeInt(-1);        stream.writeInt(-1);    stream.writeInt(0);  stream.writeInt(0);	  	compilable	  [FE]  AssertionFailedError  	25	2	add
123	[BUG]  [BUGGY]  SerialUtilities.writePaint(shape,  stream,  null);  [CE]  method  writePaint  in  class  SerialUtilities  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  void  writeObject(ObjectOutputStream  stream)  throws  IOException  {  stream.defaultWriteObject();  int  count  =  size();  stream.writeInt(count);  for  (int  i  =  0;  i  <  count;  i++)  {  Shape  shape  =  getShape(i);  if  (shape  !=  null)  {  stream.writeInt(i);      [BUGGY]  SerialUtilities.writePaint(shape,  stream,  null);  [BUGGY]      SerialUtilities.writeShape(shape,  stream);  }  else  {  stream.writeInt(-1);  }  }  }  [CLASS]  ShapeList  [METHOD]  writeObject  [RETURN_TYPE]  void  ObjectOutputStream  stream  [VARIABLES]  Shape  shape  boolean  ObjectOutputStream  stream  int  count  i  	projects/Chart6/source/org/jfree/chart/util/ShapeList.java	0.7071067811865475	140	140	2	replace	SerialUtilities.writePaint(shape,  stream,  null);	  SerialUtilities.writePaint(shape,    stream);    	non-compiled	[CE]  method  writePaint  in  class  SerialUtilities  cannot  be  applied  to  given  types;	39	None	replace
