bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  body  =  finallyNode.getLastChild(),  cfa);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getLastChild(),  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getLastChild(),  cfa);	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
2	[BUG]  [BUGGY]  Node  body  =  cfg.getLastChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cfg.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cfg.getLastChild();	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	30	None	replace
3	[BUG]  [BUGGY]  Node  body  =  cfa.getLastChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cfa.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cfa.getLastChild();	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	30	None	replace
4	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  node.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  node.getLastChild();	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	30	None	replace
5	[BUG]  [BUGGY]  Node  body  =  finallyNode.getLastChild(),  cfg);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getLastChild(),  cfg);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getLastChild(),  cfg);	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
6	[BUG]  [BUGGY]  Node  body  =  finallyNode.getLastChild(),  parent);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getLastChild(),  parent);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getLastChild(),  parent);	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
7	[BUG]  [BUGGY]  Node  body  =  finallyNode.getLastChild(),  node);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getLastChild(),  node);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getLastChild(),  node);	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
8	[BUG]  [BUGGY]  Node  finallyNode  =  parent.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  parent.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  parent.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      Node    finallyNode    =    finallyNode.getLastChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
9	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      Node    finallyNode    =    finallyNode.getLastChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
10	[BUG]  [BUGGY]  Node  finallyNode  =  node.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      Node    finallyNode    =    finallyNode.getLastChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
11	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);	      Node    finallyNode    =    finallyNode.getLastChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
12	[BUG]  [BUGGY]  Node  finallyNode  =  firstNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  firstNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  firstNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      Node    finallyNode    =    finallyNode.getLastChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
13	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);	      Node    finallyNode    =    finallyNode.getLastChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
14	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);	      Node    finallyNode    =    finallyNode.getLastChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
15	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  node);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  edgeAnnotations);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  parent);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  parent);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  nextSibling);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  nextSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  node,  edgeAnnotations);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  node,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  node,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  cfa);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  cfa);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
21	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  node);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
22	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
23	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  firstSibling);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  firstSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  firstSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
24	[BUG]  [BUGGY]  Node  cfa  =  node.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  node.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  node.getNext();	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
25	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getParent();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getParent();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getParent();	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
26	[BUG]  [BUGGY]  Node  cfa  =  nextSibling.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  nextSibling.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  nextSibling.getNext();	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
27	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getNext()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getNext()  +  1;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getNext()  +  1;	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
28	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getNext(),  parent);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getNext(),  parent);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getNext(),  parent);	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	21	None	replace
29	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getNext(),  parent;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getNext(),  parent;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getNext(),  parent;	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
30	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getNext(),  nextSibling;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getNext(),  nextSibling;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getNext(),  nextSibling;	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
31	[BUG]  [BUGGY]  Node  finallyNode  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  parent.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  parent.getLastChild();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
32	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild().cloneTree();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild().cloneTree();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild().cloneTree();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
33	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild().getNext();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild().getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild().getNext();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
34	[BUG]  [BUGGY]  Node  finallyNode  =  node.getLastChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getLastChild();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
35	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode,  parent.getLastChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode,  parent.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode,  parent.getLastChild();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
36	[BUG]  [BUGGY]  Node  finallyNode  =  finalNode.getLastChild();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finalNode.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finalNode.getLastChild();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
37	[BUG]  [BUGGY]  Node  body  =  cfg.getFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cfg.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cfg.getFirstChild();	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
38	[BUG]  [BUGGY]  Node  body  =  cfa.getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cfa.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cfa.getFirstChild();	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
39	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  node.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  node.getFirstChild();	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
40	[BUG]  [BUGGY]  Node  body  =  finallyNode.getFirstChild(),  cfa);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getFirstChild(),  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getFirstChild(),  cfa);	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	31	None	replace
41	[BUG]  [BUGGY]  Node  body  =  finalNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finalNode.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finalNode.getFirstChild();	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
42	[BUG]  [BUGGY]  Node  body  =  finallyNode.getFirstChild(),  cfg);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getFirstChild(),  cfg);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getFirstChild(),  cfg);	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	31	None	replace
43	[BUG]  [BUGGY]  cfa.createEdge(node,  Branch.UNCOND,  fromNode);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(node,  Branch.UNCOND,  fromNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(node,  Branch.UNCOND,  fromNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  Branch.UNCOND,  node);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  Branch.UNCOND,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  cfa.createEdge(afterNode,  Branch.UNCOND,  node);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(afterNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(afterNode,  Branch.UNCOND,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  cfa.createEdge(toNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(toNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(toNode,  Branch.UNCOND,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  Branch.UNCOND);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  Branch.UNCOND);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  Branch.UNCOND);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  Cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getLastChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  Node  cfa  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  node.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  node.getFirstChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
51	[BUG]  [BUGGY]  Node  cfa  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  parent.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  parent.getFirstChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
52	[BUG]  [BUGGY]  Node  cfa  =  finallyNode,  parent.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode,  parent.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode,  parent.getFirstChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
53	[BUG]  [BUGGY]  Node  cfa  =  finalNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finalNode.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finalNode.getFirstChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
54	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getPreviousChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getPreviousChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getPreviousChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
55	[BUG]  [BUGGY]  Node  cfa  =  firstNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  firstNode.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  firstNode.getFirstChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
56	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  parent);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  parent);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  edgeAnnotations);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  parent,  cfa);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  parent,  cfa);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
60	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  parent,  finallyNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  parent,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  parent,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  edgeAnnotations);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
62	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node.firstChild);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node.firstChild);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node.firstChild);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
63	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa.firstChild);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa.firstChild);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa.firstChild);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
64	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
65	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastChild);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastChild);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastChild);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
66	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  nextSibling);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  nextSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
67	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa.firstChild,  edgeAnnotations);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa.firstChild,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa.firstChild,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
68	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  parent);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  parent);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
69	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.nextSibling);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.nextSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
70	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstNode);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  lastJump);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  lastJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  lastJump);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nodePriorities);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nodePriorities);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nodePriorities);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
73	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  child);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  child);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  child);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
74	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  return  computeFallThrough(finallyNode,  parent,  cfa);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFallThrough(finallyNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFallThrough(finallyNode,  parent,  cfa);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFollowNode(fromNode,  parent,  cfa);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
78	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  finallyNode);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(parent,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(parent,  finallyNode);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
79	[BUG]  [BUGGY]  NodeUtil.removeChild(finallyNode);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(finallyNode);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
80	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFallThrough(node.getNext());	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
81	[BUG]  [BUGGY]  return  computeFallThrough(finallyNode.getNext());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFallThrough(finallyNode.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFallThrough(finallyNode.getNext());	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  NodeUtil.removeChild(nextNode);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(nextNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(nextNode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
83	[BUG]  [BUGGY]  return  computeFallThrough(finallyNode);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFallThrough(finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFallThrough(finallyNode);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
84	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
85	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  clone);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
86	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  clone);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
87	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  parent);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
88	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  node);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
89	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  nextSibling);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  nextSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
90	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  firstNode);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  firstNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone,  firstNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
91	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  clone);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
92	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getNext(),  cfa);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getNext(),  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getNext(),  cfa);	      Node    finallyNode    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
93	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getParent();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getParent();	      Node    finallyNode    =    finallyNode.getNext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
94	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getNext()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getNext()  -  1;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getNext()  -  1;	      Node    finallyNode    =    finallyNode.getNext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
95	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getNext(),  nextSibling);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getNext(),  nextSibling);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getNext(),  nextSibling);	      Node    finallyNode    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
96	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getNext(),  parent);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getNext(),  parent);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getNext(),  parent);	      Node    finallyNode    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
97	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  dataArea,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  dataArea,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  dataArea,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    edgeAnnotations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
98	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  this.edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  this.edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  this.edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    edgeAnnotations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
99	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  curHandler);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  curHandler);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  curHandler);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    edgeAnnotations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
100	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edges);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edges);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edges);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    edgeAnnotations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode,  this);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode,  this);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  node,  finallyNode,  this);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  node,  this);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  node,  finallyNode);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  this);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  this);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  this,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  this,  edgeAnnotations);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  this,  edgeAnnotations);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  finallyNode,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  finallyNode,  this);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  cfa,  finallyNode,  this);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  this,  cfg);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  this,  cfg);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  this,  cfg);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
109	[BUG]  [BUGGY]  Node  finallyNode  =  parent.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  parent.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  parent.getFirstChild();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
110	[BUG]  [BUGGY]  Node  finallyNode  =  node.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getFirstChild();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
111	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFirstChild().cloneTree();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFirstChild().cloneTree();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFirstChild().cloneTree();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
112	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode,  cfa.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode,  cfa.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode,  cfa.getFirstChild();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
113	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFirstChild().getNext();  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFirstChild().getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFirstChild().getNext();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
114	[BUG]  [BUGGY]  Node  finallyNode  =  finalNode.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finalNode.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finalNode.getFirstChild();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
115	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
116	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  nextSibling);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  nextSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
117	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
118	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  firstNode);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  firstNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  firstNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
119	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  root);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  root);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
120	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
121	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  nextSibling);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  nextSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
122	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  node);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
123	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  parent);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
124	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa.lastJump);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa.lastJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  cfa.lastJump);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
125	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  firstNode);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  firstNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  firstNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
126	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  n);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  n);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  n);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
127	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa.lastJump,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa.lastJump,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode,  cfa.lastJump,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
128	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node.lastJump);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node.lastJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node.lastJump);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
129	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  parent);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
130	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  node);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
131	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  nextSibling);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  nextSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
132	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  nodePriorities);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  nodePriorities);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  nodePriorities);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
133	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  n);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  n);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent,  n);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
134	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  edgeAnnotations);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
135	[BUG]  [BUGGY]  Node  body  =  finallyNode.getNext(),  cfa);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getNext(),  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getNext(),  cfa);	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	33	None	replace
136	[BUG]  [BUGGY]  Node  body  =  finallyNode.getNext(),  cfg);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getNext(),  cfg);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getNext(),  cfg);	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	33	None	replace
137	[BUG]  [BUGGY]  Node  body  =  node.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  node.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  node.getNext();	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
138	[BUG]  [BUGGY]  Node  body  =  finallyNode.getNext(),  parent);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getNext(),  parent);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getNext(),  parent);	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	33	None	replace
139	[BUG]  [BUGGY]  Node  body  =  cfg.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cfg.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cfg.getNext();	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
140	[BUG]  [BUGGY]  Node  body  =  finallyNode.getNext(),  nextSibling);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getNext(),  nextSibling);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getNext(),  nextSibling);	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	33	None	replace
141	[BUG]  [BUGGY]  Node  body  =  finallyNode.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getParent();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getParent();	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
142	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
143	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  cfa  =  finallyNode.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
144	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  AssertionFailedError  cfa  =  finallyNode.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  AssertionFailedError  cfa  =  finallyNode.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    AssertionFailedError  cfa  =  finallyNode.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
145	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  ';'  expected	5	None	add
146	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  (Node)cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  (Node)cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    (Node)cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
147	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
148	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
149	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFollowNode(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFollowNode(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFollowNode(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
150	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFollowNode(fromNode,  branch.UNCOND,  node);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFollowNode(fromNode,  branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFollowNode(fromNode,  branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
151	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
152	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
153	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
154	[BUG]  [BUGGY]  Node  finallyNode  =  parent.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  parent.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  parent.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
155	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
156	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
157	[BUG]  [BUGGY]  Node  finallyNode  =  node.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode,  cfa);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  node,  finallyNode,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  cfa);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  cfa);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  parent,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  edgeAnnotations);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  edgeAnnotations);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  cfa,  edgeAnnotations);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  finallyNode);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  cfa,  finallyNode);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finalNode,  cfa,  edgeAnnotations);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  finalNode,  cfa,  edgeAnnotations);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  finalNode,  cfa,  edgeAnnotations);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  finallyNode,  cfa);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  child,  finallyNode,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  child,  finallyNode,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodes,  finallyNode,  cfa);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  nodes,  finallyNode,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  nodes,  finallyNode,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
166	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode,  parent.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode,  parent.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode,  parent.getFirstChild();	      Node    finallyNode    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
167	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.nextChild();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.nextChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.nextChild();	      Node    finallyNode    =    finallyNode.getFirstChild();    	non-compiled	[CE]  not  a  statement	12	None	replace
168	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.cloneTree();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.cloneTree();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.cloneTree();	      Node    finallyNode    =    finallyNode.getFirstChild();    	non-compiled	[CE]  not  a  statement	12	None	replace
169	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  parent.UNCOND,  finallyNode);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  parent.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  parent.UNCOND,  finallyNode);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
170	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  parent);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  parent);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
171	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  parent,  finallyNode);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  parent,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  parent,  finallyNode);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
172	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode.UNCOND,  finallyNode);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode.UNCOND,  finallyNode);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
173	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  UNCOND);  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  UNCOND);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  UNCOND);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
174	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  branch.UNCOND);  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  branch.UNCOND);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  branch.UNCOND);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
175	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  branch);  [CE]  not  a  statement  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  branch);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  branch);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
176	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  child);  [CE]  not  a  statement  [FE]                                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  child);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  child);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	8	None	replace
177	[BUG]  [BUGGY]  Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	18	None	replace
178	[BUG]  [BUGGY]  Node  finallyNode  =  parent.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  parent.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  parent.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	18	None	replace
179	[BUG]  [BUGGY]  Node  finallyNode  =  nextSibling.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  nextSibling.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  nextSibling.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	18	None	replace
180	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	18	None	replace
181	[BUG]  [BUGGY]      NodeUtil.removeChild(finallyNode,  cfa);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]      NodeUtil.removeChild(finallyNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	        NodeUtil.removeChild(finallyNode,  cfa);	  	non-compiled	[CE]  not  a  statement	9	None	add
182	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
183	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node,  parent));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node,  parent));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node,  parent));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
184	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  node));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  node));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  node));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
185	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(node,  parent));  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(node,  parent));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(node,  parent));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
186	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(fromNode,  parent));  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(fromNode,  parent));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(fromNode,  parent));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
187	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  nextSibling));  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  nextSibling));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  nextSibling));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
188	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node,  finallyNode));  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node,  finallyNode));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node,  finallyNode));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
189	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  firstNode));  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  firstNode));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  firstNode));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
190	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  finallyNode));  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  finallyNode));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  finallyNode));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
191	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  not  a  statement	14	None	replace
192	[BUG]  [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  not  a  statement	14	None	replace
193	[BUG]  [BUGGY]  if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  not  a  statement	14	None	replace
194	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  not  a  statement	14	None	replace
195	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  not  a  statement	14	None	replace
196	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  not  a  statement	14	None	replace
197	[BUG]  [BUGGY]  Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getFirstChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
198	[BUG]  [BUGGY]  Node  finallyNode  =  parent.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  parent.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  parent.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getFirstChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
199	[BUG]  [BUGGY]  Node  finallyNode  =  nextSibling.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  nextSibling.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  nextSibling.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getFirstChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
200	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getFirstChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	15	None	replace
201	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild(),  cfa);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild(),  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild(),  cfa);	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
202	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild(),  node);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild(),  node);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild(),  node);	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
203	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild(),  parent);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild(),  parent);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild(),  parent);	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
204	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild().cloneTree();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild().cloneTree();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild().cloneTree();	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  not  a  statement	13	None	replace
205	[BUG]  [BUGGY]  Node  finallyNode  =  node.getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getNext();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
206	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode,  cfa.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode,  cfa.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode,  cfa.getNext();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
207	[BUG]  [BUGGY]  Node  finallyNode  =  nextSibling.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  nextSibling.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  nextSibling.getNext();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
208	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFinalNode();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFinalNode();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFinalNode();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
209	[BUG]  [BUGGY]  Node  finallyNode  =  finalNode.getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finalNode.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finalNode.getNext();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
210	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	16	None	replace
211	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstNode);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstNode);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	16	None	replace
212	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.cloneTree();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.cloneTree();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.cloneTree();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
213	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getFirstChild().getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getFirstChild().getNext();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
214	[BUG]  [BUGGY]  Node  body  =  finalNode.getLastChild();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finalNode.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finalNode.getLastChild();	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
215	[BUG]  [BUGGY]  Node  body  =  finallyNode.getLastChild().getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getLastChild().getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getLastChild().getNext();	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
216	[BUG]  [BUGGY]  Node  body  =  n.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  n.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  n.getLastChild();	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
217	[BUG]  [BUGGY]  Node  body  =  finallyNode.getLastChild()  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getLastChild()  +  1;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getLastChild()  +  1;	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
218	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  finallyNode);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  ';'  expected	4	None	replace
219	[BUG]  [BUGGY]  Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
220	[BUG]  [BUGGY]  Node  finallyNode  =  n.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  n.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  n.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
221	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getFirstChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  ';'  expected	18	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  this,  cfa);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  this,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  this,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  ';'  expected	23	None	replace
223	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  ';'  expected	20	None	replace
224	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  node));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  node));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  node));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  ';'  expected	20	None	replace
225	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  firstNode));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  firstNode));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(parent,  firstNode));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  ';'  expected	20	None	replace
226	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  edgeAnnotations));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  edgeAnnotations));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent,  edgeAnnotations));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  ';'  expected	20	None	replace
227	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(fromNode));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(fromNode));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(fromNode));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  ';'  expected	20	None	replace
228	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  ';'  expected	14	None	replace
229	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n);  return  computeFollowNode(fromNode,  parent,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  ';'  expected	14	None	replace
230	[BUG]  [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  ';'  expected	14	None	replace
231	[BUG]  [BUGGY]  Node  cfa  =  finalNode.getNext();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finalNode.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finalNode.getNext();	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	21	None	replace
232	[BUG]  [BUGGY]  Node  cfa  =  firstNode.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  firstNode.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  firstNode.getNext();	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	21	None	replace
233	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getPrevious();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getPrevious();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getPrevious();	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	21	None	replace
234	[BUG]  [BUGGY]  Node  finallyNode  =  n.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  n.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  n.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }	      Node    finallyNode    =    finallyNode.getFirstChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  ';'  expected	15	None	replace
235	[BUG]  [BUGGY]  Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      Node    finallyNode    =    finallyNode.getFirstChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  ';'  expected	15	None	replace
236	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa.lastJump);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa.lastJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa.lastJump);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  ';'  expected	26	None	replace
237	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  thenBlock);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  thenBlock);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  thenBlock);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  ';'  expected	26	None	replace
238	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  seedAnnotations);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  seedAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  seedAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  ';'  expected	26	None	replace
239	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstJump);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstJump);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  ';'  expected	26	None	replace
240	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  lastJump);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  lastJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  lastJump);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  ';'  expected	26	None	replace
241	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.removeFirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.removeFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.removeFirstChild();	      Node    finallyNode    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
242	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getNext()  +  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getNext()  +  1;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getNext()  +  1;	      Node    finallyNode    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
243	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.finallyMap.get(parent));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.finallyMap.get(parent));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa.finallyMap.get(parent));	      	non-compiled	[CE]  ';'  expected	10	None	replace
244	[BUG]  [BUGGY]  NodeUtil.removeChild(finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);	      	non-compiled	[CE]  ';'  expected	10	None	replace
245	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.next());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.next());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa.next());	      	non-compiled	[CE]  ';'  expected	10	None	replace
246	[BUG]  [BUGGY]  NodeUtil.removeChild(finalNode);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(finalNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(finalNode);	      	non-compiled	[CE]  ';'  expected	10	None	replace
247	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild().getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild().getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild().getFirstChild();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
248	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild().getString();  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild().getString();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild().getString();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
249	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild()  +  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild()  +  1;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild()  +  1;	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
250	[BUG]  [BUGGY]  Node  finallyNode  =  n.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  n.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  n.getFirstChild();	      Node    finallyNode    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
251	[BUG]  [BUGGY]  Node  body  =  cloneTree(finallyNode.getFirstChild());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cloneTree(finallyNode.getFirstChild());  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cloneTree(finallyNode.getFirstChild());	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	31	None	replace
252	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  n.getFirstChild();	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	31	None	replace
253	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild().getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild().getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild().getNext();	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
254	[BUG]  [BUGGY]  Node  finallyNode  =  n.getLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  n.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  n.getLastChild();	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
255	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild()  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getLastChild()  +  1;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getLastChild()  +  1;	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
256	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  astPositionCounter);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  astPositionCounter);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  astPositionCounter);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  ';'  expected	29	None	replace
257	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  ';'  expected	1	None	replace
258	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfg,  edgeAnnotations);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfg,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfg,  edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  ';'  expected	1	None	replace
259	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  seedAnnotations);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  seedAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  seedAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  ';'  expected	1	None	replace
260	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa.firstChild);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa.firstChild);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  cfa.firstChild);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
261	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.nextChild);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.nextChild);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.nextChild);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
262	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.parent,  cfa.firstChild);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.parent,  cfa.firstChild);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.parent,  cfa.firstChild);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
263	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Cfa  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Cfa  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Cfa  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
264	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.getFirstChild();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.getFirstChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  cfa  =  finallyNode.getFirstChild();	  	non-compiled	[CE]  ';'  expected	5	None	add
265	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.getNext();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.getNext();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  cfa  =  finallyNode.getNext();	  	non-compiled	[CE]  ';'  expected	5	None	add
266	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.getLastChild();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  finallyNode.getLastChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  cfa  =  finallyNode.getLastChild();	  	non-compiled	[CE]  ';'  expected	5	None	add
267	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  AssertionFailedError  cfa  =  finallyNode.getInitializingFunction();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  AssertionFailedError  cfa  =  finallyNode.getInitializingFunction();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    AssertionFailedError  cfa  =  finallyNode.getInitializingFunction();	  	non-compiled	[CE]  ';'  expected	5	None	add
268	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFirstChild().getLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFirstChild().getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFirstChild().getLastChild();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
269	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.finallyMap.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.finallyMap.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.finallyMap.getFirstChild();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
270	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFinallyNode();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFinallyNode();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFinallyNode();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
271	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getParent();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getParent();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getParent();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
272	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getFullNode();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getFullNode();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getFullNode();	      Node    finallyNode    =    cfa.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  toNode,  finallyNode,  cfa);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  toNode,  finallyNode,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  toNode,  finallyNode,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  ';'  expected	22	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  node,  cfa);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  node,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  root,  node,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  ';'  expected	22	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  finallyNode);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  cfg,  finallyNode);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  ';'  expected	22	None	replace
276	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  null);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  null);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  null);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	8	None	replace
277	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  uncond);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  uncond);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  uncond);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	8	None	replace
278	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  NONCOND);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  NONCOND);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  NONCOND);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	8	None	replace
279	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  sourceFactory);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  sourceFactory);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  sourceFactory);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	8	None	replace
280	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  NON_SYNTHETIC);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  NON_SYNTHETIC);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  NON_SYNTHETIC);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	8	None	replace
281	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.getFirstChild(),  node);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.getFirstChild(),  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.getFirstChild(),  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  ';'  expected	6	None	replace
282	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.NONE,  node);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.NONE,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.NONE,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  ';'  expected	6	None	replace
283	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNDEFINED,  finallyNode);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNDEFINED,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNDEFINED,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  ';'  expected	6	None	replace
284	[BUG]  [BUGGY]  Node  body  =  cfa.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cfa.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cfa.getNext();	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	33	None	replace
285	[BUG]  [BUGGY]  Node  body  =  n.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  n.getNext();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  n.getNext();	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	33	None	replace
286	[BUG]  [BUGGY]  Node  body  =  finallyNode.getNext(),  cfa;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.getNext(),  cfa;  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.getNext(),  cfa;	      Node    body    =    finallyNode.getNext();    	non-compiled	[CE]  ';'  expected	33	None	replace
287	[BUG]  [BUGGY]      NodeUtil.removeChild(finalNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]      NodeUtil.removeChild(finalNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	        NodeUtil.removeChild(finalNode);  return  computeFollowNode(fromNode,  parent,  cfa);	  	non-compiled	[CE]  ';'  expected	9	None	add
288	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node.getNext()));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node.getNext()));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node.getNext()));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    edgeAnnotations);    	non-compiled	[CE]  ';'  expected	2	None	replace
289	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextNode);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  ';'  expected	3	None	replace
290	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode,  clone);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
291	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  dataArea,  clone);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  dataArea,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  dataArea,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
292	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseUri,  clone);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseUri,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseUri,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
293	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode,  clone);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
294	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root,  clone);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
295	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseNode);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  ';'  expected	7	None	replace
296	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root,  node);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  root,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  ';'  expected	7	None	replace
297	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  sourceFile);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  finallyNode,  sourceFile);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  finallyNode,  sourceFile);	  cfa.createEdge(fromNode,    branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	8	None	replace
298	[BUG]  [BUGGY]  Node  body  =  finallyNode.removeFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  finallyNode.removeFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  finallyNode.removeFirstChild();	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	31	None	replace
299	[BUG]  [BUGGY]  Node  body  =  cloneTree(parent.getFirstChild());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cloneTree(parent.getFirstChild());  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cloneTree(parent.getFirstChild());	      Node    body    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	31	None	replace
300	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  ';'  expected	14	None	replace
301	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  cf  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  cf  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  cf	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  ';'  expected	14	None	replace
302	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  ';'  expected	14	None	replace
303	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  firstSibling);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  firstSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  firstSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  ';'  expected	26	None	replace
304	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  0);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  0);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump,  0);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.lastJump);    	non-compiled	[CE]  ';'  expected	26	None	replace
305	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body,  clone);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
306	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  collection,  clone);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  collection,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  collection,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
307	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  sourceFile,  clone);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  sourceFile,  clone);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  sourceFile,  clone);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    clone);    	non-compiled	[CE]  ';'  expected	27	None	replace
308	[BUG]  [BUGGY]  NodeUtil.removeChild(finallyNode);  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(finallyNode);  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(finallyNode);  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }	      	non-compiled	[CE]  ';'  expected	10	None	replace
309	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.next()  ==  null)  {  return  computeFallThrough(cfa.next());  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.next()  ==  null)  {  return  computeFallThrough(cfa.next());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.next()  ==  null)  {  return  computeFallThrough(cfa.next());  }	      	non-compiled	[CE]  ';'  expected	10	None	replace
310	[BUG]  [BUGGY]  NodeUtil.removeChild(finallyNode);  return  computeFallThrough(finallyNode.getNext());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(finallyNode);  return  computeFallThrough(finallyNode.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(finallyNode);  return  computeFallThrough(finallyNode.getNext());	      	non-compiled	[CE]  ';'  expected	10	None	replace
311	[BUG]  [BUGGY]  return  computeFallThrough(finallyNode.getFirstChild());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  return  computeFallThrough(finallyNode.getFirstChild());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	return  computeFallThrough(finallyNode.getFirstChild());	      	non-compiled	[CE]  ';'  expected	10	None	replace
312	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.lastJump  ==  node)  {  return  computeFallThrough(cfa.getLastChild());  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.lastJump  ==  node)  {  return  computeFallThrough(cfa.getLastChild());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.lastJump  ==  node)  {  return  computeFallThrough(cfa.getLastChild());  }	      	non-compiled	[CE]  ';'  expected	10	None	replace
313	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.lastJump  ==  node)  {  return  computeFallThrough(cfa.getNext());  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.lastJump  ==  node)  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.lastJump  ==  node)  {  return  computeFallThrough(cfa.getNext());  }	      	non-compiled	[CE]  ';'  expected	10	None	replace
314	[BUG]  [BUGGY]  NodeUtil.removeChild(finallyNode);  return  computeFallThrough(finallyNode.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeUtil.removeChild(finallyNode);  return  computeFallThrough(finallyNode.getFirstChild());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeUtil.removeChild(finallyNode);  return  computeFallThrough(finallyNode.getFirstChild());	      	non-compiled	[CE]  ';'  expected	10	None	replace
315	[BUG]  [BUGGY]  Node  body  =  cloneTree(finallyNode.getLastChild());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cloneTree(finallyNode.getLastChild());  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cloneTree(finallyNode.getLastChild());	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
316	[BUG]  [BUGGY]  Node  body  =  cloneTree(finallyNode,  parent.getLastChild());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cloneTree(finallyNode,  parent.getLastChild());  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cloneTree(finallyNode,  parent.getLastChild());	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
317	[BUG]  [BUGGY]  Node  body  =  cloneTree(parent.getLastChild());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  body  =  cloneTree(parent.getLastChild());  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  body  =  cloneTree(parent.getLastChild());	      Node    body    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	30	None	replace
318	[BUG]  [BUGGY]  Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(finallyNode.getNext());  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(finallyNode.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(finallyNode.getNext());  }	      Node    finallyNode    =    finallyNode.getFirstChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  ';'  expected	15	None	replace
319	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  finallyMap);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  finallyMap);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  finallyMap);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  ';'  expected	4	None	replace
320	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cloneTree);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cloneTree);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cloneTree);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    parent);    	non-compiled	[CE]  ';'  expected	4	None	replace
321	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.finallyNode.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.finallyNode.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.finallyNode.getFirstChild();	      Node    finallyNode    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
322	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.lastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.lastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.lastChild();	      Node    finallyNode    =    finallyNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
323	[BUG]  [BUGGY]  Node  finallyNode  =  cloneTree.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cloneTree.getFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cloneTree.getFirstChild();	      Node    finallyNode    =    cfa.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
324	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  this);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  this);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  this);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  ';'  expected	3	None	replace
325	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  ';'  expected	3	None	replace
326	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstJump);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  firstJump);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  ';'  expected	3	None	replace
327	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseUri);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseUri);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  baseUri);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    nextSibling);    	non-compiled	[CE]  ';'  expected	3	None	replace
328	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	16	None	replace
329	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  thenBlock);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  thenBlock);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  thenBlock);	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  ';'  expected	16	None	replace
330	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  cfa.create  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  cfa.create  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  cfa.create	      Node    finallyNode    =    finallyNode.getFirstChild();    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  not  a  statement	16	None	replace
331	[BUG]  [BUGGY]  Node  finallyNode  =  cloneTree.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cloneTree.getLastChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cloneTree.getLastChild();	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
332	[BUG]  [BUGGY]  Node  finallyNode  =  finallyNode.getfirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  finallyNode.getfirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  finallyNode.getfirstChild();	      Node    finallyNode    =    finallyNode.getLastChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finalNode,  this,  edgeAnnotations);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  finalNode,  this,  edgeAnnotations);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  finalNode,  this,  edgeAnnotations);	      NodeTraversal.traverse(compiler,    finallyNode,    this);    	non-compiled	[CE]  ';'  expected	23	None	replace
334	[BUG]  [BUGGY]      if(finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]      if(finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	        if(finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  not  a  statement	9	None	add
335	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  null);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  null);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  null);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	1	None	replace
336	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  getFallThrough(node));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  getFallThrough(node));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa,  getFallThrough(node));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	1	None	replace
337	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  collection);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  collection);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  collection);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    edgeAnnotations);    	non-compiled	[CE]  not  a  statement	2	None	replace
338	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node.getFirstChild()));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node.getFirstChild()));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node.getFirstChild()));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    edgeAnnotations);    	non-compiled	[CE]  not  a  statement	2	None	replace
339	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  this.edgeAnnotations);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  this.edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node,  this.edgeAnnotations);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  not  a  statement	7	None	replace
340	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body,  node);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  body,  node);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    node);    	non-compiled	[CE]  not  a  statement	7	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  cfa);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  node,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  finallyNode,  cfa);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  finallyNode,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  sourceFile,  finallyNode,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finalNode);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  finalNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  node,  finalNode);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  cfa);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  cfa);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	NodeTraversal.traverse(compiler,  root,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  not  a  statement	22	None	replace
345	[BUG]  [BUGGY]  cfa.createEdges(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdges(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdges(fromNode,  Branch.UNCOND,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  not  a  statement	6	None	replace
346	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.uncond,  finallyNode);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  branch.uncond,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.uncond,  finallyNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  not  a  statement	6	None	replace
347	[BUG]  [BUGGY]  Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(finallyNode.getNext());  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(finallyNode.getNext());  }  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  node.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(finallyNode.getNext());  }	      Node    finallyNode    =    finallyNode.getLastChild();    if(finallyNode!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  not  a  statement	18	None	replace
348	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.removeFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.removeFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.removeFirstChild();	      Node    cfa    =    finallyNode.getFirstChild();    	non-compiled	[CE]  not  a  statement	24	None	replace
349	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  firstSibling);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  firstSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  firstSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  not  a  statement	29	None	replace
350	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  thenBlock);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  thenBlock);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n,  thenBlock);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    n);    	non-compiled	[CE]  not  a  statement	29	None	replace
351	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getNext()  ||  cfa.hasFinally(nextSibling);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getNext()  ||  cfa.hasFinally(nextSibling);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getNext()  ||  cfa.hasFinally(nextSibling);	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  not  a  statement	21	None	replace
352	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getNext()  ||  cfa.isEmpty();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getNext()  ||  cfa.isEmpty();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getNext()  ||  cfa.isEmpty();	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  not  a  statement	21	None	replace
353	[BUG]  [BUGGY]  Node  cfa  =  finallyNode.getNext()  ||  cfa.hasFinally(finallyNode);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  cfa  =  finallyNode.getNext()  ||  cfa.hasFinally(finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  cfa  =  finallyNode.getNext()  ||  cfa.hasFinally(finallyNode);	      Node    cfa    =    finallyNode.getNext();    	non-compiled	[CE]  not  a  statement	21	None	replace
354	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  	non-compiled	[CE]  not  a  statement	5	None	add
355	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  collection  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  collection  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  collection  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
356	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(fromNode,  Branch.UNCOND,  node);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(fromNode,  Branch.UNCOND,  node);  }	  	non-compiled	[CE]  not  a  statement	5	None	add
357	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
358	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
359	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  cfa  =  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  cfa  =  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
360	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  finallyNode  =  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  Node  finallyNode  =  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    Node  finallyNode  =  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  not  a  statement	5	None	add
361	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  return  computeFallThrough(fromNode,  Branch.UNCOND,  node);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  return  computeFallThrough(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,    Branch.UNCOND,    node);    for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  return  computeFallThrough(fromNode,  Branch.UNCOND,  node);  }	  	non-compiled	[CE]  not  a  statement	5	None	add
362	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(node));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(node));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFollowNode(node));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
363	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(finallyNode));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(finallyNode));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(finallyNode));	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    computeFallThrough(parent));    	non-compiled	[CE]  not  a  statement	20	None	replace
364	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.secondNode);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.secondNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.secondNode);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  not  a  statement	28	None	replace
365	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  this);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  this);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  this);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  not  a  statement	28	None	replace
366	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  firstSibling);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  firstSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild,  firstSibling);	  cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode,    cfa.firstChild);    	non-compiled	[CE]  not  a  statement	28	None	replace
367	[BUG]  [BUGGY]  Node  finallyNode  =  cfa.getLastChild().removeFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {    [BUGGY]  Node  finallyNode  =  cfa.getLastChild().removeFirstChild();  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	Node  finallyNode  =  cfa.getLastChild().removeFirstChild();	      Node    finallyNode    =    cfa.getLastChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
