bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);  [CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	replace
2	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	1	None	replace
3	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [CE]  cannot  find  symbol  nextSibling  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  cannot  find  symbol  nextSibling	1	None	replace
4	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);  [CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	add	cfa.createEdge(fromNode,  Branch.UNCOND,  node);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	compilable	  [FE]  AssertionFailedError  	1	3	replace
6	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  node);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	compilable	  [FE]  AssertionFailedError  	1	3	replace
7	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	replace
8	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);  [CE]  cannot  find  symbol  branch  [FE]                AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  cannot  find  symbol  branch	1	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	add	  	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	compilable	  [FE]  AssertionFailedError  	1	3	replace
10	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	  	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	compilable	  [FE]  AssertionFailedError  	1	3	replace
11	[BUG]  [BUGGY]    Node  finallyNode  =  finallyNode.getNext();  [CE]  variable  finallyNode  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  finallyNode.getNext();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  finallyNode.getNext();		non-compiled	[CE]  variable  finallyNode  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)	2	None	add
12	[BUG]  [BUGGY]    Node  finallyNode  =  finallyNode.getFirstChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  finallyNode.getFirstChild();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  finallyNode.getFirstChild();		non-compiled	[CE]  cannot  find  symbol	2	None	add
13	[BUG]  [BUGGY]    Node  finallyNode  =  finallyNode.getLastChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  finallyNode.getLastChild();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  finallyNode.getLastChild();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
14	[BUG]  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
15	[BUG]  [BUGGY]    Node  finallyNode  =  finallyNode.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  finallyNode.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  finallyNode.getFirstChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
16	[BUG]  [BUGGY]    Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  finallyNode.getFirstChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
17	[BUG]  [BUGGY]    Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  finallyNode.getLastChild();  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
18	[BUG]  [BUGGY]    Node  finallyNode  =  finallyNode.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  finallyNode.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  finallyNode.getLastChild();  if(finallyNode!=  null)  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
19	[BUG]  [BUGGY]    Node  finallyNode  =  cfa.getLastChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  cfa.getLastChild();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  cfa.getLastChild();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
20	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent));  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent));  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent));	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	1	None	replace
21	[BUG]  [BUGGY]    Node  cfa  =  finallyNode.getNext();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  cfa  =  finallyNode.getNext();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  cfa  =  finallyNode.getNext();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
22	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  finallyNode,  cfa);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    NodeTraversal.traverse(compiler,  finallyNode,  cfa);  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    NodeTraversal.traverse(compiler,  finallyNode,  cfa);		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
23	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  finallyNode,  this);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    NodeTraversal.traverse(compiler,  finallyNode,  this);  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    NodeTraversal.traverse(compiler,  finallyNode,  this);		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
24	[BUG]  [BUGGY]    Node  cfa  =  finallyNode.getFirstChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  cfa  =  finallyNode.getFirstChild();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  cfa  =  finallyNode.getFirstChild();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
25	[BUG]  [BUGGY]    Node  finallyNode  =  cfa.getFirstChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  cfa.getFirstChild();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  cfa.getFirstChild();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
26	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	1	None	replace
27	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  clone);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	1	None	replace
28	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.firstChild);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	1	None	replace
29	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  n);	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	1	None	replace
30	[BUG]  [BUGGY]    Node  body  =  finallyNode.getLastChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  body  =  finallyNode.getLastChild();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  body  =  finallyNode.getLastChild();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
31	[BUG]  [BUGGY]    Node  body  =  finallyNode.getFirstChild();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  body  =  finallyNode.getFirstChild();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  body  =  finallyNode.getFirstChild();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
32	[BUG]  [BUGGY]    Node  finallyNode  =  cfa.getNext();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  finallyNode  =  cfa.getNext();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  finallyNode  =  cfa.getNext();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
33	[BUG]  [BUGGY]    Node  body  =  finallyNode.getNext();  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  [BUGGY]    Node  body  =  finallyNode.getNext();  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	    Node  body  =  finallyNode.getNext();		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	2	None	add
