bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
3	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
4	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
5	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
7	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
8	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
9	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
10	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
11	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
12	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
13	[BUG]  [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFallThrough(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFallThrough(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFallThrough(fromNode,  parent,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  for(Node  parent  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  parent  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  parent  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  For(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(finallyNode))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(finallyNode))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(finallyNode))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  for(Node  parent  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  parent  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  parent  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
26	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
27	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
28	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
29	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  parent);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  parent);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
30	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfa,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  cfa,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  cfa,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
31	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfa)&&  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  cfa)&&  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  cfa)&&  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
32	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  parent,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  parent,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  parent,  finallyNode);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
33	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
34	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
35	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
36	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
37	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
38	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
39	[BUG]  [BUGGY]  for(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  for(Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  For(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  Node  nextSibling  =  cfa.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  nextSibling  =  cfa.getFirstChild();  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  nextSibling  =  cfa.getFirstChild();	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
47	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
48	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
49	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
50	[BUG]  [BUGGY]  node.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  node.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	node.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
51	[BUG]  [BUGGY]  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
52	[BUG]  [BUGGY]  Node  nextSibling  =  finallyNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  nextSibling  =  finallyNode.getFirstChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  nextSibling  =  finallyNode.getFirstChild();	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
53	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  nextSibling  =  node.getFirstChild();	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
54	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
55	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
56	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
57	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
58	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
59	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
60	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
61	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
62	[BUG]  [BUGGY]  parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
63	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
64	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  Node  finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
71	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
72	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
73	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
74	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finalNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finalNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finalNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
75	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(node,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(node,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(node,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
76	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
77	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  parent);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  cfa);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  cfa);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  cfa);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
79	[BUG]  [BUGGY]  NodeUtil.removeChild(nextSibling,  cfa);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(nextSibling,  cfa);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(nextSibling,  cfa);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(node.getLastChild());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(node.getLastChild());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  nextSibling);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  nextSibling);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  nextSibling);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  node,  finallyNode);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  node,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  parent,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  edgeAnnotations);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  cfa,  edgeAnnotations);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  fromNode,  finallyNode,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  node);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  cfa,  node);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  cfa,  finallyNode);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  this);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  cfa,  this);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  astAnnotations);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  astAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  cfa,  astAnnotations);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
92	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
93	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
94	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext()  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext()	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
95	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
96	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
97	[BUG]  [BUGGY]  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
98	[BUG]  [BUGGY]  For(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
99	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
100	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
101	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
102	[BUG]  [BUGGY]  for(Node  cfa  :  finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
103	[BUG]  [BUGGY]  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
104	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finally  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finally  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finally	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
106	[BUG]  [BUGGY]  if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode  ==  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
107	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(node.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(node.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
108	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
109	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(node.getType()  ==  Token.NAME)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(node.getType()  ==  Token.NAME)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
110	[BUG]  [BUGGY]  parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
111	[BUG]  [BUGGY]  parent.setType(Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setType(Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setType(Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
112	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
113	[BUG]  [BUGGY]  finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  if(finallyNode.getType()!=  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()!=  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()!=  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
115	[BUG]  [BUGGY]  parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
116	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
118	[BUG]  [BUGGY]  parent!=  nextSibling.getType())  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  nextSibling.getType())  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  nextSibling.getType())  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
119	[BUG]  [BUGGY]  parent  ==  nextSibling.getType())  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  nextSibling.getType())  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  nextSibling.getType())  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
120	[BUG]  [BUGGY]  parent.setType(Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setType(Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setType(Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
121	[BUG]  [BUGGY]  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
122	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
123	[BUG]  [BUGGY]  Node  nextSibling  =  finallyNode.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  nextSibling  =  finallyNode.getNext();  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  nextSibling  =  finallyNode.getNext();	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
124	[BUG]  [BUGGY]  parent!=  nextSibling.getType())  {  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  nextSibling.getType())  {  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  nextSibling.getType())  {  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
125	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
126	[BUG]  [BUGGY]  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
127	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
128	[BUG]  [BUGGY]  For(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
129	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
130	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.firstMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
131	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
132	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
133	[BUG]  [BUGGY]  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
134	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
135	[BUG]  [BUGGY]  parent!=  nextSibling.getFirstChild())  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  nextSibling.getFirstChild())  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  nextSibling.getFirstChild())  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
136	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFollowNode(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFollowNode(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFollowNode(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
137	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
138	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
139	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
141	[BUG]  [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
142	[BUG]  [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
143	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext()  ||  cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext()  ||  cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext()  ||  cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
144	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
145	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getLastChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
146	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
147	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
148	[BUG]  [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
149	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
150	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
151	[BUG]  [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
152	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
153	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
154	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  parent));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
155	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  fromNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  fromNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  fromNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
156	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
157	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finalNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finalNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finalNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
158	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
159	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  firstNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
160	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
161	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
162	[BUG]  [BUGGY]  parent!=  null  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
163	[BUG]  [BUGGY]  parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
164	[BUG]  [BUGGY]  parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
165	[BUG]  [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
166	[BUG]  [BUGGY]  parent  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
167	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
168	[BUG]  [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
169	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  finallyNode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getNext(),  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getNext(),  finallyNode);	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
170	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getLastChild());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getLastChild());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
171	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent.getNext());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
172	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getFirstChild());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getFirstChild());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
173	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getNext(),  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getNext(),  parent);	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
174	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(node.getNext());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
175	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode.getNext());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
176	[BUG]  [BUGGY]  return  computeFallThrough(node.getParent());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getParent());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getParent());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
177	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
178	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
179	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
180	[BUG]  [BUGGY]  parent.removeChild(node);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.removeChild(node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.removeChild(node);	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
181	[BUG]  [BUGGY]  Node  lastJump  =  finallyNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  lastJump  =  finallyNode.getLastChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  lastJump  =  finallyNode.getLastChild();	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
182	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  if(lastJump  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  if(lastJump  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  if(lastJump  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
183	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  return  computeFallThrough(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
184	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
185	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
186	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
187	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
188	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
189	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  parent);	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
190	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFallThrough(cfa.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFallThrough(cfa.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  parent);  return  computeFallThrough(cfa.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
191	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(cfa.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  node);  return  computeFallThrough(cfa.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  node);  return  computeFallThrough(cfa.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
192	[BUG]  [BUGGY]  cfa.createEdge(node,  Branch.UNCOND,  fromNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(node,  Branch.UNCOND,  fromNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(node,  Branch.UNCOND,  fromNode);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
193	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  branch.UNCOND,  finallyNode);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
194	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
195	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
196	[BUG]  [BUGGY]  cfa.createEdges(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdges(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdges(fromNode,  Branch.UNCOND,  finallyNode);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
197	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  endNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  endNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  endNode);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
198	[BUG]  [BUGGY]  cfa.createEdge(toNode,  Branch.UNCOND,  node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(toNode,  Branch.UNCOND,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(toNode,  Branch.UNCOND,  node);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
199	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
200	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  nextSibling);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
201	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  edgeAnnotations);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
202	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  node);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
203	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  parent);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
204	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
205	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
206	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
207	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.clon  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.clon  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.clon	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
208	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
209	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTre  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTre  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTre	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
210	[BUG]  [BUGGY]  for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
211	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.clone  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.clone  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.clone	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
212	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
213	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  parent,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
214	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
215	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
216	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finallyNode,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
217	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  finallyNode);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
218	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node,  parent,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
219	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finalNode,  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finalNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finalNode,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
220	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  node,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
221	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
222	[BUG]  [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
223	[BUG]  [BUGGY]  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	node.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
224	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
225	[BUG]  [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
226	[BUG]  [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()!=  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()!=  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&  finallyNode.getFirstChild()!=  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
227	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
228	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
229	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getLastChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
230	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
231	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
232	[BUG]  [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
233	[BUG]  [BUGGY]  For(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
234	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext()  ||  cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext()  ||  cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext()  ||  cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
235	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
236	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
237	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCON  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCON  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCON	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
238	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
239	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
240	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCON  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCON  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCON	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
241	[BUG]  [BUGGY]  for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
242	[BUG]  [BUGGY]  For(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
243	[BUG]  [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
244	[BUG]  [BUGGY]  For(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
245	[BUG]  [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
246	[BUG]  [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
247	[BUG]  [BUGGY]  For(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
248	[BUG]  [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&  finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
249	[BUG]  [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  firstNode);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  firstNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  firstNode);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
250	[BUG]  [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
251	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
252	[BUG]  [BUGGY]  for(Node  parent  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  parent  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  parent  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
253	[BUG]  [BUGGY]  for(Node  cfa  :  node.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
254	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
255	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
256	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
257	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
258	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
259	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
260	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
261	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
262	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  node,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
263	[BUG]  [BUGGY]  if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
264	[BUG]  [BUGGY]  if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
265	[BUG]  [BUGGY]  if(finalNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finalNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finalNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
266	[BUG]  [BUGGY]  if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finalNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFollowNode(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finalNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
267	[BUG]  [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
268	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
269	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  parent);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
270	[BUG]  [BUGGY]  Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
271	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
272	[BUG]  [BUGGY]  Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
273	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
274	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
275	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa,  fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa,  fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa,  fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
276	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
277	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finally  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finally  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finally	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
278	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
279	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finalNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  finalNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  node,  finalNode);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  child,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  child,  cfa);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
282	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  node.getNext());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
283	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode.getNext());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finallyNode.getNext());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
284	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.getNext());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
285	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
286	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  node.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  node.getNext());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
287	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  finallyNode);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  finallyNode);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  finallyNode);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
288	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
289	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
290	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
291	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
292	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
293	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
294	[BUG]  [BUGGY]  Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
295	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
296	[BUG]  [BUGGY]  Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
297	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
298	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.parentMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.parentMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.parentMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
299	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.nextMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.nextMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.nextMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
300	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  parent  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  parent  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  parent	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
301	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
302	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeF  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeF  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeF	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
303	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFollowNode(fromNode,	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
304	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
305	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
306	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
307	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
308	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getNext(),  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getNext(),  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
309	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  node,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
310	[BUG]  [BUGGY]  return  computeFallThrough(node,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
311	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(fromNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(fromNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
312	[BUG]  [BUGGY]  parent!=  null)  {  if(finallyNode.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null)  {  if(finallyNode.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null)  {  if(finallyNode.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
313	[BUG]  [BUGGY]  parent  ==  null)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  null)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  null)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
314	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
315	[BUG]  [BUGGY]  parent  ==  null)  {  if(finallyNode.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  null)  {  if(finallyNode.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  null)  {  if(finallyNode.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
316	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
317	[BUG]  [BUGGY]  parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getType()  ==  Token.GETPROP))  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getType()  ==  Token.GETPROP))  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getType()  ==  Token.GETPROP))  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
318	[BUG]  [BUGGY]  cfa.createEdge(node,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(node,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(node,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
319	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  parent);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
320	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
321	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFollowNode(fromNode,  node.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  parent);  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  parent);  return  computeFollowNode(fromNode,  node.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
322	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  firstNode);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  firstNode);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  firstNode);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
323	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(parent));	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
324	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  computeFallThrough(node));	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
325	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
326	[BUG]  [BUGGY]  Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
327	[BUG]  [BUGGY]  for(Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  nextSibling.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
328	[BUG]  [BUGGY]  parent.replaceChild(node,  finallyNode)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.replaceChild(node,  finallyNode)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.replaceChild(node,  finallyNode)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
329	[BUG]  [BUGGY]  parent.setLastChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setLastChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setLastChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
330	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext()  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext()	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
331	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
332	[BUG]  [BUGGY]  parent  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
333	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
334	[BUG]  [BUGGY]  lastJump  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  lastJump  =  node.getLastChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	lastJump  =  node.getLastChild();	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
335	[BUG]  [BUGGY]  parent.replaceChild(node,  finallyNode)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.replaceChild(node,  finallyNode)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.replaceChild(node,  finallyNode)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
336	[BUG]  [BUGGY]  Node  parent  =  finallyNode.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  parent  =  finallyNode.getParent();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  parent  =  finallyNode.getParent();	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
337	[BUG]  [BUGGY]  Node  lastJump  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  lastJump  =  node.getLastChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  lastJump  =  node.getLastChild();	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
338	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
339	[BUG]  [BUGGY]  parent  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
340	[BUG]  [BUGGY]  Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
341	[BUG]  [BUGGY]  Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  node.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
342	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
343	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
344	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
345	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa,  fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa,  fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa,  fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
346	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.firstMap.get(parent))  {  if(cfa!=  null)  {  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
347	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getNext(),  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getNext(),  parent,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
348	[BUG]  [BUGGY]  return  computeFallThrough(node,  finallyNode,  cfa);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node,  finallyNode,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node,  finallyNode,  cfa);	      return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
349	[BUG]  [BUGGY]  parent.replaceChild(node,  finallyNode)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.replaceChild(node,  finallyNode)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.replaceChild(node,  finallyNode)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
350	[BUG]  [BUGGY]  parent.replaceChild(node,  lastJump)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.replaceChild(node,  lastJump)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.replaceChild(node,  lastJump)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
351	[BUG]  [BUGGY]  parent.replaceChild(node,  lastJump);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.replaceChild(node,  lastJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.replaceChild(node,  lastJump);	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
352	[BUG]  [BUGGY]  Node  lastJump  =  finallyNode.getLastChild();  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  lastJump  =  finallyNode.getLastChild();  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  lastJump  =  finallyNode.getLastChild();  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
353	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  n);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  n);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
354	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
355	[BUG]  [BUGGY]  parent.replaceChild(node,  finallyNode)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.replaceChild(node,  finallyNode)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.replaceChild(node,  finallyNode)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
356	[BUG]  [BUGGY]  parent.setFirstChild(node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setFirstChild(node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setFirstChild(node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
357	[BUG]  [BUGGY]  Node  parent  =  finallyNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  parent  =  finallyNode.getFirstChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  parent  =  finallyNode.getFirstChild();	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
358	[BUG]  [BUGGY]  Node  node  =  finallyNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  node  =  finallyNode.getFirstChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  node  =  finallyNode.getFirstChild();	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
359	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
360	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
361	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION  ||  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION  ||  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION  ||  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
362	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.GETPROP)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.GETPROP)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.GETPROP)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
363	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.nextlyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
364	[BUG]  [BUGGY]  Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
365	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.cloneTreeMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.cloneTreeMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.cloneTreeMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
366	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
367	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()!=  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
368	[BUG]  [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
369	[BUG]  [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  lastJump);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  lastJump);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  lastJump);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
370	[BUG]  [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  endNode);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  endNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  endNode);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
371	[BUG]  [BUGGY]  parent  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
372	[BUG]  [BUGGY]  parent.replaceChild(node,  finallyNode)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.replaceChild(node,  finallyNode)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.replaceChild(node,  finallyNode)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
373	[BUG]  [BUGGY]  parent  ==  node)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
374	[BUG]  [BUGGY]  Node  nextSibling  =  finallyNode.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  nextSibling  =  finallyNode.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  nextSibling  =  finallyNode.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
375	[BUG]  [BUGGY]  node.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  node.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	node.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
376	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
377	[BUG]  [BUGGY]  parent.setType(Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.setType(Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.setType(Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
378	[BUG]  [BUGGY]  node.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  node.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	node.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
379	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFollowNode(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFollowNode(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFollowNode(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
380	[BUG]  [BUGGY]  Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
381	[BUG]  [BUGGY]  Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
382	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFollowNode(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFollowNode(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFollowNode(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
383	[BUG]  [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(final))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(final))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  parent.getFirstChild())  {  if(cfa.hasFinally(final))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
384	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.clon  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.clon  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.clon	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
385	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
386	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.clone  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.clone  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.clone	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
387	[BUG]  [BUGGY]  for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  fromNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeF	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
388	[BUG]  [BUGGY]  cfa.createEdge(toNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(toNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(toNode,  Branch.UNCOND,  finallyNode);	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
389	[BUG]  [BUGGY]  parent!=  null  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
390	[BUG]  [BUGGY]  parent!=  node  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
391	[BUG]  [BUGGY]  if(nextSibling.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(nextSibling.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(nextSibling.getType()  ==  Token.FUNCTION)  {  if(finallyNode!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
392	[BUG]  [BUGGY]  if(nextSibling.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(nextSibling.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(nextSibling.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
393	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION  &&  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION  &&  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION  &&  nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
394	[BUG]  [BUGGY]  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
395	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
396	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
397	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent)&&  cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent)&&  cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent)&&  cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
398	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(!cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(!cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(!cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(parent))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  astPositionCounter);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  cfa,  astPositionCounter);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  this.edgeAnnotations);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeTraversal.traverse(compiler,  finallyNode,  cfa,  this.edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeTraversal.traverse(compiler,  finallyNode,  cfa,  this.edgeAnnotations);	      NodeTraversal.traverse(compiler,    finallyNode,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
401	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(parent,  node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(parent,  node);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
402	[BUG]  [BUGGY]  NodeUtil.removeChild(lastJump,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(lastJump,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(lastJump,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
403	[BUG]  [BUGGY]  Pentru(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Pentru(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Pentru(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
404	[BUG]  [BUGGY]  Pentru(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  Pentru(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	Pentru(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      if(finallyNode.getFirstChild()    ==    node)    {    for(Node    child    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    child);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
405	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
406	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(node))  {  if(cfa!=  null)  {  return  computeFowThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
407	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(node))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    if(cfa!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
408	[BUG]  [BUGGY]  for(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  nextSibling  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFollowNode(fromNode,  parent,  cfa.getNext());  }	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
409	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling)&&  cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.get  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling)&&  cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.get  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling)&&  cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.get	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasFinally(nextSibling))    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
410	[BUG]  [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
411	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
412	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {	      cfa.createEdge(fromNode,    Branch.UNCOND,    node);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
413	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
414	[BUG]  [BUGGY]  parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getFirstChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getFirstChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getFirstChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
415	[BUG]  [BUGGY]  parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getType()  ==  Token.EXPR_RESULT))  {  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getType()  ==  Token.EXPR_RESULT))  {  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  null  &&(finallyNode.getType()  ==  Token.FUNCTION  ||  finallyNode.getType()  ==  Token.EXPR_RESULT))  {  return  computeFollowNode(fromNode,  parent,  cfa);	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
416	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION  ||  parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION  ||  parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION  ||  parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  if(finallyNode.getType()    ==    Token.FUNCTION)    {    if(parent!=    null)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
417	[BUG]  [BUGGY]  For(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  For(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	For(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
418	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    cfa.createEdge(fromNode,    Branch.UNCOND,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
419	[BUG]  [BUGGY]  if(node.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(node.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(node.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
420	[BUG]  [BUGGY]  parent  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
421	[BUG]  [BUGGY]  aughtAnnotations  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  aughtAnnotations  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	aughtAnnotations  =  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
422	[BUG]  [BUGGY]  if(node.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(node.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(node.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    nextSibling);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
423	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node);	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
424	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  nextSibling);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  nextSibling);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  nextSibling);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
425	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  node);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  node);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  node);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
426	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node,  parent);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node,  parent);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.redeclareVarsInsideBranch(node,  parent);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    node);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
427	[BUG]  [BUGGY]  return  computeFallThrough(node,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node,  finallyNode,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
428	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(node.getNext(),  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(node.getNext(),  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
429	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
430	[BUG]  [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
431	[BUG]  [BUGGY]  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
432	[BUG]  [BUGGY]  parent!=  node  &&  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
433	[BUG]  [BUGGY]  parent!=  node  &&  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  nextSibling!=  null)  {  return  computeFallThrough(node.getNext());	      if(finallyNode.getFirstChild()    ==    node)    {    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
434	[BUG]  [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
435	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
436	[BUG]  [BUGGY]  parent  ==  node  &&  lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&  lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&  lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
437	[BUG]  [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  cfa.getLastChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  cfa.getLastChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&(lastJump  ==  node  ||  cfa.getLastChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
438	[BUG]  [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  parent.getFirstChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  parent.getFirstChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&(lastJump  ==  node  ||  parent.getFirstChild()  ==  node))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
439	[BUG]  [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  cfa.hasNext()))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  cfa.hasNext()))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&(lastJump  ==  node  ||  cfa.hasNext()))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
440	[BUG]  [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  cfa.hasChildren()))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent  ==  node  &&(lastJump  ==  node  ||  cfa.hasChildren()))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent  ==  node  &&(lastJump  ==  node  ||  cfa.hasChildren()))  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
441	[BUG]  [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
442	[BUG]  [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
443	[BUG]  [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent!=  node  &&  finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getFirstChild()    ==    node)    {    return    computeFallThrough(node.getNext());    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
444	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.cloneTree()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFollowNode(cfa.cloneTree()	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
445	[BUG]  [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFowThrough(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFowThrough(cfa.cloneTree()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  node.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFowThrough(cfa.cloneTree()	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
446	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.containsKey(cfa.cloneTree()))    {    return    computeFallThrough(cfa.cloneTree()    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
447	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  }	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    return    computeFollowNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
448	[BUG]  [BUGGY]  for(Node  cfa  :  finalNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  finalNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finalNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
449	[BUG]  [BUGGY]  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  }	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
450	[BUG]  [BUGGY]  lastJump  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  lastJump  =  node.getFirstChild();  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	lastJump  =  node.getFirstChild();	      if(finallyNode.getFirstChild()    ==    node)    {    if(lastJump    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
451	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UN  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UN  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UN	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
452	[BUG]  [BUGGY]  for(Node  parent  :  node.getFirstChild())  {  if(cfa.finallyMap.get(parent)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  parent  :  node.getFirstChild())  {  if(cfa.finallyMap.get(parent)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  parent  :  node.getFirstChild())  {  if(cfa.finallyMap.get(parent)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND	  for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.finallyMap.get(cfa)!=    null)    {    return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
453	[BUG]  [BUGGY]  if(finallyNode.getType()!=  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()!=  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()!=  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
454	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.hasFinally(finallyNode))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.hasFinally(finallyNode))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.hasFinally(finallyNode))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
455	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getType()  ==  Token.FUNCTION)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cf    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
456	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
457	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.getLastChild());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.getLastChild());	      return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
458	[BUG]  [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	parent.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa	      if(finallyNode.getFirstChild()    ==    node)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFollowNode(fromNode,    parent,    cfa);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
459	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFollowNode(fromNode,    parent,    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
460	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }	      for(Node    cfa    :    finallyNode.getFirstChild())    {    if(cfa.hasNext())    {    return    computeFallThrough(cfa.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
461	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.hasFinally(finallyNode))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.hasFinally(finallyNode))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.hasFinally(finallyNode))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeF	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
462	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
463	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT  &&  finallyNode!=  null)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
464	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.EXPR_RESULT  ||  finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
465	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FOR)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  if(finallyNode.getType()  ==  Token.FOR)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FOR)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }	      if(finallyNode.getType()    ==    Token.EXPR_RESULT)    {    cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    }    else    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
466	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.lastlyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.lastlyMap.get(node))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
467	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.nextMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  for(Node  cfa  :  cfa.nextMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]    }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.nextMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	  for(Node    cfa    :    cfa.finallyMap.get(parent))    {    cfa.createEdge(fromNode,    Branch.UNCOND,    node);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
468	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  cfa);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(node,  cfa);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(node,  cfa);	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
469	[BUG]  [BUGGY]  NodeUtil.removeChild(lastJump,  node);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  NodeUtil.removeChild(lastJump,  node);  return  computeFallThrough(node.getNext());  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	NodeUtil.removeChild(lastJump,  node);  return  computeFallThrough(node.getNext());	      NodeUtil.removeChild(parent,    cfa);    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
470	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cloneTree);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cloneTree);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cloneTree);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
471	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.lastJump);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
472	[BUG]  [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.edgeAnnotations);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);    [BUGGY]  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.edgeAnnotations);  [BUGGY]    }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode,  cfa.edgeAnnotations);	      cfa.createEdge(fromNode,    Branch.UNCOND,    finallyNode);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
