bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    return  computeFallThrough(node.getNext());  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    return  computeFallThrough(node.getNext());		non-compiled	[CE]  illegal  start  of  expression	4	None	add
2	[BUG]  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    for(Node  cfa  :  finallyNode.getFirstChild())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
3	[BUG]  [BUGGY]    return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    return  computeFollowNode(fromNode,  parent,  cfa);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
4	[BUG]  [BUGGY]    NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(node.getNext());  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    NodeUtil.removeChild(parent,  cfa);  return  computeFallThrough(node.getNext());		non-compiled	[CE]  illegal  start  of  expression	4	None	add
5	[BUG]  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(parent))  {  return  computeFallThrough(cfa.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
6	[BUG]  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.containsKey(cfa.cloneTree()))  {  return  computeFallThrough(cfa.cloneTree()		non-compiled	[CE]  illegal  start  of  expression	4	None	add
7	[BUG]  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
8	[BUG]  [BUGGY]    if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasNext())  {  return  computeFallThrough(cfa.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]    if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getType()  ==  Token.EXPR_RESULT)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cf		non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.hasFinally(nextSibling))  {  return  computeFallThrough(cfa.getNext());  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  finallyNode.getFirstChild())  {  if(cfa.finallyMap.get(cfa)!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
14	[BUG]  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  return  computeFollowNode(fromNode,  parent,  cfa);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
15	[BUG]  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    cfa.createEdge(fromNode,  Branch.UNCOND,  node);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
16	[BUG]  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    cfa.createEdge(fromNode,  Branch.UNCOND,  node);  return  computeFollowNode(fromNode,  parent,  cfa);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
17	[BUG]  [BUGGY]    NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    NodeUtil.removeChild(parent,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
18	[BUG]  [BUGGY]    NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getNext());  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    NodeUtil.removeChild(parent,  node);  return  computeFallThrough(node.getNext());		non-compiled	[CE]  illegal  start  of  expression	4	None	add
19	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  finallyNode,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    NodeTraversal.traverse(compiler,  finallyNode,  cfa);  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    NodeTraversal.traverse(compiler,  finallyNode,  cfa);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
20	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  if(finallyNode.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	if(finallyNode.getType()  ==  Token.FUNCTION)  {  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  for(Node  child  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  child);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
25	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
26	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
27	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
28	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  else  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
29	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
30	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  if(lastJump  ==  node)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
31	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finalNode);  }  else  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
32	[BUG]  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]  }  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	    if(finallyNode.getFirstChild()  ==  node)  {  cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling);  }  else  {  return  computeFallThrough(node.getNext());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
33	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  cfa);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  [BUGGY]  for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [BUGGY]  }  return  computeFollowNode(fromNode,  parent,  cfa);  }  }    Node  nextSibling  =  node.getNext();    [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	for(Node  cfa  :  cfa.finallyMap.get(parent))  {  if(cfa!=  null)  {  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
