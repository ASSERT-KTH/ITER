bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); [FE] AssertionFailedError [CONTEXT] } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { [BUGGY] cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); [BUGGY] } } return computeFollowNode(fromNode, parent, cfa); } }   Node nextSibling = node.getNext();  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { [BUGGY] [BUGGY] cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } }   Node nextSibling = node.getNext();  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	767	767	3	add	
3	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); [BUGGY] } [BUGGY] } return computeFollowNode(fromNode, parent, cfa); } }   Node nextSibling = node.getNext();   [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); [BUGGY] [BUGGY] } } return computeFollowNode(fromNode, parent, cfa); } }   Node nextSibling = node.getNext();   [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.6123724356957946	768	768	3	add	
5	[BUG] [BUGGY] finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); [FE] AssertionFailedError [CONTEXT] if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { if (lastJump == node) { createEdge(lastJump, Branch.UNCOND, computeFallThrough( cur.getLastChild())); } else { [BUGGY] finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); [BUGGY] } lastJump = cur; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5773502691896258	579	579	3	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { if (lastJump == node) { createEdge(lastJump, Branch.UNCOND, computeFallThrough( cur.getLastChild())); } else { [BUGGY] [BUGGY] finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); } lastJump = cur; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5773502691896258	579	579	3	add	
7	[BUG] [BUGGY] finallyMap.put(lastJump, handler.getLastChild()); [FE] AssertionFailedError [CONTEXT] if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { [BUGGY] finallyMap.put(lastJump, handler.getLastChild()); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5773502691896258	844	844	3	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { [BUGGY] [BUGGY] finallyMap.put(lastJump, handler.getLastChild()); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5773502691896258	844	844	3	add	
9	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] if (node.isBlock() && parent != null && parent.isTry() && NodeUtil.getCatchBlock(parent) == node && !NodeUtil.hasCatchHandler(node)) { [BUGGY] return; [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5222329678670935	491	491	3	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (node.isBlock() && parent != null && parent.isTry() && NodeUtil.getCatchBlock(parent) == node && !NodeUtil.hasCatchHandler(node)) { [BUGGY] [BUGGY] return; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5222329678670935	491	491	3	add	
11	[BUG] [BUGGY] } else if (parent.getLastChild() == node){ [FE] AssertionFailedError [CONTEXT] return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  [BUGGY] } else if (parent.getLastChild() == node){ [BUGGY] if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } }   [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	764	764	3	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  [BUGGY] [BUGGY] } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } }   [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	764	764	3	add	
13	[BUG] [BUGGY] if (cfa != null) { [FE] AssertionFailedError [CONTEXT] }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ [BUGGY] if (cfa != null) { [BUGGY] for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } }    [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	765	765	3	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ [BUGGY] [BUGGY] if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } }    [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	765	765	3	add	
15	[BUG] [BUGGY] for (Node finallyNode : cfa.finallyMap.get(parent)) { [FE] AssertionFailedError [CONTEXT]  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { [BUGGY] for (Node finallyNode : cfa.finallyMap.get(parent)) { [BUGGY] cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } }   Node nextSibling = node.getNext(); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	766	766	3	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { [BUGGY] [BUGGY] for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } return computeFollowNode(fromNode, parent, cfa); } }   Node nextSibling = node.getNext(); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	766	766	3	add	
17	[BUG] [BUGGY] return computeFollowNode(fromNode, parent, cfa); [FE] AssertionFailedError [CONTEXT] } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } [BUGGY] return computeFollowNode(fromNode, parent, cfa); [BUGGY] } }   Node nextSibling = node.getNext();  while (nextSibling != null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); } } [BUGGY] [BUGGY] return computeFollowNode(fromNode, parent, cfa); } }   Node nextSibling = node.getNext();  while (nextSibling != null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	add	
19	[BUG] [BUGGY] return computeFallThrough(parent.getLastChild()); [FE] AssertionFailedError [CONTEXT] } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. [BUGGY] return computeFallThrough(parent.getLastChild()); [BUGGY] } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.48038446141526137	752	752	3	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. [BUGGY] [BUGGY] return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.48038446141526137	752	752	3	add	
21	[BUG] [BUGGY] if (lastJump == cfgNode) { [FE] AssertionFailedError [CONTEXT] if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); Node catchBlock = NodeUtil.getCatchBlock(handler); if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. [BUGGY] if (lastJump == cfgNode) { [BUGGY] createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	841	841	3	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); Node catchBlock = NodeUtil.getCatchBlock(handler); if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. [BUGGY] [BUGGY] if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	841	841	3	add	
23	[BUG] [BUGGY] createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); [FE] AssertionFailedError [CONTEXT] Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); Node catchBlock = NodeUtil.getCatchBlock(handler); if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. if (lastJump == cfgNode) { [BUGGY] createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); [BUGGY] } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	842	842	3	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); Node catchBlock = NodeUtil.getCatchBlock(handler); if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. if (lastJump == cfgNode) { [BUGGY] [BUGGY] createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	842	842	3	add	
25	[BUG] [BUGGY] lastJump = handler; [FE] AssertionFailedError [CONTEXT] finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); } } [BUGGY] lastJump = handler; [BUGGY] } } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	854	854	3	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); } } [BUGGY] [BUGGY] lastJump = handler; } } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	854	854	3	add	
27	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); } } lastJump = handler; [BUGGY] } [BUGGY] } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	855	855	3	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { finallyMap.put(lastJump, catchBlock); } } lastJump = handler; [BUGGY] [BUGGY] } } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	855	855	3	add	
29	[BUG] [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); [FE] AssertionFailedError [CONTEXT] return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  if (parent.getFirstChild() == node) { [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.   return computeFallThrough(parent.getLastChild()); [BUGGY] return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.43301270189221935	751	752	3	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  if (parent.getFirstChild() == node) { [BUGGY] [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.   return computeFallThrough(parent.getLastChild()); return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.43301270189221935	751	752	3	add	
31	[BUG] [BUGGY] } else if (NodeUtil.getCatchBlock(parent) == node){ [FE] AssertionFailedError [CONTEXT] return parent; case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  [BUGGY] } else if (NodeUtil.getCatchBlock(parent) == node){ [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.42008402520840293	757	757	3	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return parent; case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  [BUGGY] [BUGGY] } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); }  } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.42008402520840293	757	757	3	add	
33	[BUG] [BUGGY] createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { [BUGGY] createEdge(node, Branch.ON_FALSE,   computeFollowNode(node, this)); // not taken branch  } else { [BUGGY] computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	363	365	3	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { [BUGGY] [BUGGY] createEdge(node, Branch.ON_FALSE,   computeFollowNode(node, this)); // not taken branch  } else { computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	363	365	3	add	
35	[BUG] [BUGGY] if (lastJump == node) { [FE] AssertionFailedError [CONTEXT]      for (cur = node, lastJump = node; !isBreakTarget(cur, label); cur = parent, parent = parent.getParent()) { if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { [BUGGY] if (lastJump == node) { [BUGGY] createEdge(lastJump, Branch.UNCOND, computeFallThrough( cur.getLastChild())); } else { finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); } lastJump = cur; } if (parent == null) { if (compiler.isIdeMode()) {  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	575	575	3	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]      for (cur = node, lastJump = node; !isBreakTarget(cur, label); cur = parent, parent = parent.getParent()) { if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { [BUGGY] [BUGGY] if (lastJump == node) { createEdge(lastJump, Branch.UNCOND, computeFallThrough( cur.getLastChild())); } else { finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); } lastJump = cur; } if (parent == null) { if (compiler.isIdeMode()) {  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	575	575	3	add	
37	[BUG] [BUGGY] createEdge(lastJump, Branch.UNCOND, computeFallThrough( cur.getLastChild())); [FE] AssertionFailedError [CONTEXT] if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { if (lastJump == node) { [BUGGY] createEdge(lastJump, Branch.UNCOND, computeFallThrough(    cur.getLastChild())); [BUGGY] cur.getLastChild())); } else { finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); } lastJump = cur; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	576	577	3	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { if (lastJump == node) { [BUGGY] [BUGGY] createEdge(lastJump, Branch.UNCOND, computeFallThrough(    cur.getLastChild())); cur.getLastChild())); } else { finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); } lastJump = cur; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	576	577	3	add	
39	[BUG] [BUGGY] lastJump = cur; [FE] AssertionFailedError [CONTEXT] if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { if (lastJump == node) { createEdge(lastJump, Branch.UNCOND, computeFallThrough( cur.getLastChild())); } else { finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); } [BUGGY] lastJump = cur; [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	581	581	3	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (cur.isTry() && NodeUtil.hasFinally(cur) && cur.getLastChild() != previous) { if (lastJump == node) { createEdge(lastJump, Branch.UNCOND, computeFallThrough( cur.getLastChild())); } else { finallyMap.put(lastJump, computeFallThrough(cur.getLastChild())); } [BUGGY] [BUGGY] lastJump = cur; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	581	581	3	add	
41	[BUG] [BUGGY] finallyMap.put(lastJump, computeFollowNode(cur, this)); [FE] AssertionFailedError [CONTEXT] if (lastJump == node) { createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this)); } else { [BUGGY] finallyMap.put(lastJump, computeFollowNode(cur, this)); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	597	597	3	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (lastJump == node) { createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this)); } else { [BUGGY] [BUGGY] finallyMap.put(lastJump, computeFollowNode(cur, this)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleBreak [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value String label Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4082482904638631	597	597	3	add	
43	[BUG] [BUGGY] return n != parent.getFirstChild(); [FE] AssertionFailedError [CONTEXT] if (parent != null) { switch (parent.getType()) { case Token.FOR:  return n == parent.getLastChild();  case Token.IF: case Token.WHILE: case Token.WITH: [BUGGY] return n != parent.getFirstChild(); [BUGGY] case Token.DO: return n != parent.getFirstChild().getNext();  case Token.SWITCH: case Token.CASE: case Token.CATCH: case Token.LABEL: return n != parent.getFirstChild(); case Token.FUNCTION: return n == parent.getFirstChild().getNext().getNext(); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.408248290463863	260	260	3	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (parent != null) { switch (parent.getType()) { case Token.FOR:  return n == parent.getLastChild();  case Token.IF: case Token.WHILE: case Token.WITH: [BUGGY] [BUGGY] return n != parent.getFirstChild(); case Token.DO: return n != parent.getFirstChild().getNext();  case Token.SWITCH: case Token.CASE: case Token.CATCH: case Token.LABEL: return n != parent.getFirstChild(); case Token.FUNCTION: return n == parent.getFirstChild().getNext().getNext(); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.408248290463863	260	260	3	add	
45	[BUG] [BUGGY] exceptionHandler.push(n); [FE] AssertionFailedError [CONTEXT] astPosition.put(n, astPositionCounter++); switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: [BUGGY] exceptionHandler.push(n); [BUGGY] return true; }         [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	230	230	3	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] astPosition.put(n, astPositionCounter++); switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: [BUGGY] [BUGGY] exceptionHandler.push(n); return true; }         [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	230	230	3	add	
47	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: exceptionHandler.push(n); [BUGGY] return true; [BUGGY] }          [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	231	231	3	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: exceptionHandler.push(n); [BUGGY] [BUGGY] return true; }          [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	231	231	3	add	
49	[BUG] [BUGGY] if (n == parent.getFirstChild().getNext()) { [FE] AssertionFailedError [CONTEXT] case Token.RETURN: case Token.THROW: return false; case Token.TRY:       [BUGGY] if (n == parent.getFirstChild().getNext()) { [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	285	285	3	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.RETURN: case Token.THROW: return false; case Token.TRY:       [BUGGY] [BUGGY] if (n == parent.getFirstChild().getNext()) { Preconditions.checkState(exceptionHandler.peek() == parent); exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	285	285	3	add	
51	[BUG] [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); [FE] AssertionFailedError [CONTEXT] case Token.THROW: return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); [BUGGY] exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	286	286	3	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.THROW: return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { [BUGGY] [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	286	286	3	add	
53	[BUG] [BUGGY] exceptionHandler.pop(); [FE] AssertionFailedError [CONTEXT] return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { Preconditions.checkState(exceptionHandler.peek() == parent); [BUGGY] exceptionHandler.pop(); [BUGGY] } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	287	287	3	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { Preconditions.checkState(exceptionHandler.peek() == parent); [BUGGY] [BUGGY] exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	287	287	3	add	
55	[BUG] [BUGGY] handleTry(n); [FE] AssertionFailedError [CONTEXT] case Token.FUNCTION: handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: [BUGGY] handleTry(n); [BUGGY] return; case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	332	332	3	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.FUNCTION: handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: [BUGGY] [BUGGY] handleTry(n); return; case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	332	332	3	add	
57	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); [BUGGY] return; [BUGGY] case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	333	333	3	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); [BUGGY] [BUGGY] return; case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	333	333	3	add	
59	[BUG] [BUGGY] createEdge(node, Branch.UNCOND, node.getFirstChild()); [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { [BUGGY] createEdge(node, Branch.UNCOND, node.getFirstChild()); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	544	544	3	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { [BUGGY] [BUGGY] createEdge(node, Branch.UNCOND, node.getFirstChild()); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	544	544	3	add	
61	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { createEdge(node, Branch.UNCOND, node.getFirstChild()); [BUGGY] } [BUGGY]  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	545	545	3	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { createEdge(node, Branch.UNCOND, node.getFirstChild()); [BUGGY] [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	545	545	3	add	
63	[BUG] [BUGGY] if (parent.getFirstChild() == node) { [FE] AssertionFailedError [CONTEXT] if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  [BUGGY] if (parent.getFirstChild() == node) { [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	750	750	3	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  [BUGGY] [BUGGY] if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent, cfa); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node ControlFlowAnalysis cfa [VARIABLES] Multimap finallyMap AbstractCompiler compiler ControlFlowAnalysis cfa boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.39735970711951313	750	750	3	add	
65	[BUG] [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); [FE] AssertionFailedError [CONTEXT] if (child != null) { createEdge(node, Branch.UNCOND, computeFallThrough(child)); } else { [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3692744729379982	506	506	3	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (child != null) { createEdge(node, Branch.UNCOND, computeFallThrough(child)); } else { [BUGGY] [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3692744729379982	506	506	3	add	
67	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] } else { createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); }  if (parent != null) { switch (parent.getType()) { case Token.DEFAULT_CASE: case Token.CASE: case Token.TRY: [BUGGY] break; [BUGGY] default: if (node.isBlock() && node.isSyntheticBlock()) { createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this)); } break; } } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3611575592573076	515	515	3	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); }  if (parent != null) { switch (parent.getType()) { case Token.DEFAULT_CASE: case Token.CASE: case Token.TRY: [BUGGY] [BUGGY] break; default: if (node.isBlock() && node.isSyntheticBlock()) { createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this)); } break; } } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3611575592573076	515	515	3	add	
69	[BUG] [BUGGY] handleStmt(n); [FE] AssertionFailedError [CONTEXT] return; case Token.RETURN: handleReturn(n); return; case Token.WITH: handleWith(n); return; case Token.LABEL: return; default: [BUGGY] handleStmt(n); [BUGGY] return; } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	352	352	3	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; case Token.RETURN: handleReturn(n); return; case Token.WITH: handleWith(n); return; case Token.LABEL: return; default: [BUGGY] [BUGGY] handleStmt(n); return; } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	352	352	3	add	
71	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] case Token.RETURN: handleReturn(n); return; case Token.WITH: handleWith(n); return; case Token.LABEL: return; default: handleStmt(n); [BUGGY] return; [BUGGY] } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	353	353	3	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.RETURN: handleReturn(n); return; case Token.WITH: handleWith(n); return; case Token.LABEL: return; default: handleStmt(n); [BUGGY] [BUGGY] return; } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	353	353	3	add	
73	[BUG] [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); [FE] AssertionFailedError [CONTEXT] private void handleStmt(Node node) {  [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); [BUGGY] connectToPossibleExceptionHandler(node, node); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmt [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	670	670	3	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleStmt(Node node) {  [BUGGY] [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); connectToPossibleExceptionHandler(node, node); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmt [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	670	670	3	add	
75	[BUG] [BUGGY] connectToPossibleExceptionHandler(node, node); [FE] AssertionFailedError [CONTEXT] private void handleStmt(Node node) {  createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); [BUGGY] connectToPossibleExceptionHandler(node, node); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmt [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	671	671	3	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleStmt(Node node) {  createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); [BUGGY] [BUGGY] connectToPossibleExceptionHandler(node, node); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmt [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	671	671	3	add	
77	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void handleStmt(Node node) {  createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); connectToPossibleExceptionHandler(node, node); [BUGGY] } [BUGGY]  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmt [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	672	672	3	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleStmt(Node node) {  createEdge(node, Branch.UNCOND, computeFollowNode(node, this)); connectToPossibleExceptionHandler(node, node); [BUGGY] [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmt [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent previous root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3110855084191276	672	672	3	add	
79	[BUG] [BUGGY] handleIf(n); [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.IF: [BUGGY] handleIf(n); [BUGGY] return; case Token.WHILE: handleWhile(n); return; case Token.DO: handleDo(n); return; case Token.FOR: handleFor(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	298	298	3	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.IF: [BUGGY] [BUGGY] handleIf(n); return; case Token.WHILE: handleWhile(n); return; case Token.DO: handleDo(n); return; case Token.FOR: handleFor(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	298	298	3	add	
81	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.IF: handleIf(n); [BUGGY] return; [BUGGY] case Token.WHILE: handleWhile(n); return; case Token.DO: handleDo(n); return; case Token.FOR: handleFor(n); return; case Token.SWITCH: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	299	299	3	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.IF: handleIf(n); [BUGGY] [BUGGY] return; case Token.WHILE: handleWhile(n); return; case Token.DO: handleDo(n); return; case Token.FOR: handleFor(n); return; case Token.SWITCH: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	299	299	3	add	
83	[BUG] [BUGGY] Node thenBlock = node.getFirstChild().getNext(); [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { [BUGGY] Node thenBlock = node.getFirstChild().getNext(); [BUGGY] Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	358	358	3	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { [BUGGY] [BUGGY] Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	358	358	3	add	
85	[BUG] [BUGGY] Node elseBlock = thenBlock.getNext(); [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); [BUGGY] Node elseBlock = thenBlock.getNext(); [BUGGY] createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	359	359	3	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); [BUGGY] [BUGGY] Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	359	359	3	add	
87	[BUG] [BUGGY] createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); [BUGGY] createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); [BUGGY]  if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	360	360	3	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); [BUGGY] [BUGGY] createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	360	360	3	add	
89	[BUG] [BUGGY] if (elseBlock == null) { [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); [BUGGY] if (elseBlock == null) { [BUGGY] createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	362	362	3	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleIf(Node node) { Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); [BUGGY] [BUGGY] if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	362	362	3	add	
91	[BUG] [BUGGY] connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); [FE] AssertionFailedError [CONTEXT] Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } [BUGGY] connectToPossibleExceptionHandler(  node, NodeUtil.getConditionExpression(node)); [BUGGY] node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	368	369	3	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node thenBlock = node.getFirstChild().getNext(); Node elseBlock = thenBlock.getNext(); createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } [BUGGY] [BUGGY] connectToPossibleExceptionHandler(  node, NodeUtil.getConditionExpression(node)); node, NodeUtil.getConditionExpression(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	368	369	3	add	
93	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); [BUGGY] } [BUGGY]  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	370	370	3	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock)); if (elseBlock == null) { createEdge(node, Branch.ON_FALSE, computeFollowNode(node, this)); // not taken branch } else { createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock)); } connectToPossibleExceptionHandler( node, NodeUtil.getConditionExpression(node)); [BUGGY] [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleIf [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node elseBlock entry externs n node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	370	370	3	add	
95	[BUG] [BUGGY] Preconditions.checkState(handler.isTry()); [FE] AssertionFailedError [CONTEXT] private void connectToPossibleExceptionHandler(Node cfgNode, Node target) { if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } [BUGGY] Preconditions.checkState(handler.isTry()); [BUGGY] Node catchBlock = NodeUtil.getCatchBlock(handler); if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	837	837	3	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void connectToPossibleExceptionHandler(Node cfgNode, Node target) { if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } [BUGGY] [BUGGY] Preconditions.checkState(handler.isTry()); Node catchBlock = NodeUtil.getCatchBlock(handler); if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	837	837	3	add	
97	[BUG] [BUGGY] Node catchBlock = NodeUtil.getCatchBlock(handler); [FE] AssertionFailedError [CONTEXT] private void connectToPossibleExceptionHandler(Node cfgNode, Node target) { if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); [BUGGY] Node catchBlock = NodeUtil.getCatchBlock(handler); [BUGGY]  if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	838	838	3	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void connectToPossibleExceptionHandler(Node cfgNode, Node target) { if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); [BUGGY] [BUGGY] Node catchBlock = NodeUtil.getCatchBlock(handler); if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	838	838	3	add	
99	[BUG] [BUGGY] if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY. if (lastJump == cfgNode) { [FE] AssertionFailedError [CONTEXT] private void connectToPossibleExceptionHandler(Node cfgNode, Node target) { if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); Node catchBlock = NodeUtil.getCatchBlock(handler); [BUGGY] if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.   if (lastJump == cfgNode) { [BUGGY] if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	840	841	3	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void connectToPossibleExceptionHandler(Node cfgNode, Node target) { if (mayThrowException(target) && !exceptionHandler.isEmpty()) { Node lastJump = cfgNode; for (Node handler : exceptionHandler) { if (handler.isFunction()) { return; } Preconditions.checkState(handler.isTry()); Node catchBlock = NodeUtil.getCatchBlock(handler); [BUGGY] [BUGGY] if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.   if (lastJump == cfgNode) { if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, handler.getLastChild()); } else { finallyMap.put(lastJump, handler.getLastChild()); } } else { // Has a catch. if (lastJump == cfgNode) { createEdge(cfgNode, Branch.ON_EX, catchBlock); return; } else { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] connectToPossibleExceptionHandler [RETURN_TYPE] void  Node cfgNode Node target [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean edgeAnnotations shouldTraverseFunctions ControlFlowGraph cfg Node body catchBlock cfgNode child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode handler init item iter lastJump n next nextSibling node parent previous root target thenBlock toNode value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	840	841	3	add	
