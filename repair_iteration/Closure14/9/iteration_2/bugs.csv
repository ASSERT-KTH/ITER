bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  node,  cfa);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	6	None	replace
2	[BUG]  [BUGGY]  return  computeFunctionNode(fromNode,  parent,  cfa);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFunctionNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFunctionNode(fromNode,  parent,  cfa);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
3	[BUG]  [BUGGY]  return  computeFilledNode(fromNode,  parent,  cfa);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFilledNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFilledNode(fromNode,  parent,  cfa);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
4	[BUG]  [BUGGY]  return  computeFunction(fromNode,  parent,  cfa);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFunction(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFunction(fromNode,  parent,  cfa);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
5	[BUG]  [BUGGY]  return  computeFullNode(fromNode,  parent,  cfa);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFullNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFullNode(fromNode,  parent,  cfa);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
6	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  node,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  node,  parent);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  node,  parent);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
7	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  node,  edgeAnnotations);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	16	None	replace
8	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  fromNode,  parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  fromNode,  parent,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  fromNode,  parent,  node);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
9	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent,  cfa);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(node,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(node,  parent,  cfa);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
10	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  cfa,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  cfa,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  cfa,  edgeAnnotations);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	16	None	replace
11	[BUG]  [BUGGY]  return  computeFallThrough(toNode,  parent,  cfa);  [CE]  cannot  find  symbol  toNode  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(toNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(toNode,  parent,  cfa);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  toNode	16	None	replace
12	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  cfa.edgeAnnotations);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  cfa.edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  node,  cfa.edgeAnnotations);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
13	[BUG]  [BUGGY]  return  computeFallThrough(parent,  cfa,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(parent,  cfa,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(parent,  cfa,  node);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
14	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent.getFirstChild(),  cfa);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent.getFirstChild(),  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent.getFirstChild(),  cfa);	  	non-compiled	[CE]  unreachable  statement	10	None	add
15	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.getLastChild());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.getLastChild());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.getLastChild());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
16	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.nextChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.nextChild());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.nextChild());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
17	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.cloneTree());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.cloneTree());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.cloneTree());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
18	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.firstChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.firstChild());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.firstChild());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
19	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.next());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.next());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.next());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
20	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.edgeAnnotations);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,boolean)  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.edgeAnnotations);	  	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,boolean)	10	None	add
21	[BUG]  [BUGGY]  return  computeFollowNode(cfa,  parent,  cfa);  [CE]  no  suitable  method  found  for  computeFollowNode(ControlFlowAnalysis,Node,ControlFlowAnalysis)  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(cfa,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(cfa,  parent,  cfa);	  return    computeFollowNode(toNode,    parent,    cfa);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(ControlFlowAnalysis,Node,ControlFlowAnalysis)	13	None	replace
22	[BUG]  [BUGGY]  Return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  Return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	Return  computeFollowNode(fromNode,  parent,  cfa);	  return    computeFollowNode(toNode,    parent,    cfa);    	non-compiled	[CE]  ';'  expected	13	None	replace
23	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode,  null);  [CE]  cannot  find  symbol  finallyNode  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  cannot  find  symbol  finallyNode	15	None	replace
24	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  nodePriorities);  [CE]  non-static  variable  nodePriorities  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  nodePriorities);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  non-static  variable  nodePriorities  cannot  be  referenced  from  a  static  context	15	None	replace
25	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  cfa,  null);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,<null>)  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  cfa,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  node,  parent,  cfa,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,<null>)	15	None	replace
26	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  null,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  null,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  null,  edgeAnnotations);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	15	None	replace
27	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  firstNode,  null);  [CE]  cannot  find  symbol  firstNode  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  firstNode,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  firstNode,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  cannot  find  symbol  firstNode	15	None	replace
28	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  root,  null);  [CE]  non-static  variable  root  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  root,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  root,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  non-static  variable  root  cannot  be  referenced  from  a  static  context	15	None	replace
29	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  node,  edgeAnnotations);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	7	None	replace
30	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfa);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cfa);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	7	None	replace
31	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  cfa);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  node,  parent,  cfa);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	7	None	replace
32	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  n,  node);  [CE]  cannot  find  symbol  n  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  n,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  n,  node);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  cannot  find  symbol  n	7	None	replace
33	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node.cloneTree());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,Node)  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node.cloneTree());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  node.cloneTree());	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,Node)	7	None	replace
34	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa,  edgeAnnotations);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	9	None	replace
35	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  finallyNode);  [CE]  cannot  find  symbol  finallyNode  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  finallyNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa,  finallyNode);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  finallyNode	9	None	replace
36	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.cloneTree());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.cloneTree());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa.cloneTree());	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
37	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  nextSibling);  [CE]  cannot  find  symbol  nextSibling  [FE]                            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  nextSibling);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa,  nextSibling);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  nextSibling	9	None	replace
38	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  node);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa,  node);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
39	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  endNode);  [CE]  cannot  find  symbol  endNode  [FE]                                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  endNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa,  endNode);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  endNode	9	None	replace
40	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  node);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  node);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
41	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  node,  cfa);  }  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  node,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  node,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
42	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    return  computeFollowNode(fromNode,  parent,  cfa);	  	non-compiled	[CE]  unreachable  statement	5	None	add
43	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  node,  cfa);  }  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  node,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  node,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
44	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node,  cfa);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  node,  cfa);	  	non-compiled	[CE]  unreachable  statement	5	None	add
45	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  cfa.next();  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  cfa.next();  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  cfa.next();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
46	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  unreachable  statement  [FE]              StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
47	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  parent  =  cfa.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)  [FE]                StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  parent  =  cfa.getParent();  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  parent  =  cfa.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)	5	None	add
48	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  node,  cfa);  [CE]  unreachable  statement  [FE]                  StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  parent.getLastChild();  return  computeFollowNode(fromNode,  node,  cfa);	  	non-compiled	[CE]  unreachable  statement	5	None	add
49	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  cfa.getNext();  [CE]  cannot  find  symbol  [FE]                    StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  cfa.getNext();  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  cfa.getNext();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
50	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  unreachable  statement  [FE]                      StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
51	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  lastJump);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  lastJump);	  return    computeFollowNode(fromNode,    parent,    cfa,    nextSibling);    	non-compiled	[CE]  cannot  find  symbol  lastJump	4	None	replace
52	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  endNode);  [CE]  cannot  find  symbol  endNode  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  endNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  endNode);	  return    computeFollowNode(fromNode,    parent,    cfa,    nextSibling);    	non-compiled	[CE]  cannot  find  symbol  endNode	4	None	replace
53	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  thenBlock);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    cfa,    nextSibling);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	4	None	replace
54	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  parent);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  node,  parent);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	12	None	replace
55	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node));	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  'void'  type  not  allowed  here	12	None	replace
56	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  branch.UNCOND,  node));  [CE]  cannot  find  symbol  branch  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  branch.UNCOND,  node));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  branch.UNCOND,  node));	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  branch	12	None	replace
57	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  ')'  expected	12	None	replace
58	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfa.edgeAnnotations);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,boolean)  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfa.edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cfa.edgeAnnotations);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,boolean)	12	None	replace
59	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  node,  edgeAnnotations);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	12	None	replace
60	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  parent));  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  parent));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  parent));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  'void'  type  not  allowed  here	14	None	replace
61	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [CE]  cannot  find  symbol  finallyNode  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  cannot  find  symbol  finallyNode	14	None	replace
62	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node),  cfa);  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node),  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node),  cfa);	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  'void'  type  not  allowed  here	14	None	replace
63	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode));  [CE]  cannot  find  symbol  finallyNode  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node,  finallyNode));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  cannot  find  symbol  finallyNode	14	None	replace
64	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node,  edgeAnnotations));  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node,  edgeAnnotations));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node,  edgeAnnotations));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	14	None	replace
65	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  branch.UNCOND,  node));  [CE]  cannot  find  symbol  branch  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  branch.UNCOND,  node));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  branch.UNCOND,  node));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  cannot  find  symbol  branch	14	None	replace
66	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling));  [CE]  cannot  find  symbol  nextSibling  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  nextSibling));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  cannot  find  symbol  nextSibling	14	None	replace
67	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa,  edgeAnnotations);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	2	None	replace
68	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  fromNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  fromNode);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	2	None	replace
69	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  cfa);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  node,  cfa);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	2	None	replace
70	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  cfa,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  cfa,  parent);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  cfa,  parent);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	2	None	replace
71	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  cfa);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  node,  parent,  cfa);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	2	None	replace
72	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  finallyNode);  [CE]  cannot  find  symbol  finallyNode  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  finallyNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa,  finallyNode);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  finallyNode	2	None	replace
73	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  exceptionHandler);  [CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  exceptionHandler);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa,  exceptionHandler);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context	2	None	replace
74	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  secondNode);  [CE]  cannot  find  symbol  secondNode  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  secondNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  secondNode);	  return    computeFollowNode(fromNode,    parent,    cfa,    firstNode);    	non-compiled	[CE]  cannot  find  symbol  secondNode	8	None	replace
75	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  edges);  [CE]  cannot  find  symbol  edges  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  edges);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  edges);	  return    computeFollowNode(fromNode,    parent,    cfa,    edgeAnnotations);    	non-compiled	[CE]  cannot  find  symbol  edges	1	None	replace
76	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  shouldTraverseFunctions);  [CE]  non-static  variable  shouldTraverseFunctions  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  shouldTraverseFunctions);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  shouldTraverseFunctions);	  return    computeFollowNode(fromNode,    parent,    cfa,    edgeAnnotations);    	non-compiled	[CE]  non-static  variable  shouldTraverseFunctions  cannot  be  referenced  from  a  static  context	1	None	replace
77	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.edgeAnnotations);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  this.edgeAnnotations);	  return    computeFollowNode(fromNode,    parent,    cfa,    edgeAnnotations);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
78	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  dataArea,  edgeAnnotations);  [CE]  cannot  find  symbol  dataArea  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  dataArea,  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  dataArea,  edgeAnnotations);	  return    computeFollowNode(fromNode,    parent,    cfa,    edgeAnnotations);    	non-compiled	[CE]  cannot  find  symbol  dataArea	1	None	replace
79	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  root);  [CE]  non-static  variable  root  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  root);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  root);	  return    computeFollowNode(fromNode,    parent,    cfa,    finallyNode);    	non-compiled	[CE]  non-static  variable  root  cannot  be  referenced  from  a  static  context	3	None	replace
80	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  deflt);  [CE]  cannot  find  symbol  deflt  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  deflt);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  deflt);	  return    computeFollowNode(fromNode,    parent,    cfa,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol  deflt	3	None	replace
81	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.finallyMap.get(parent));  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Collection<Node>)  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.finallyMap.get(parent));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.finallyMap.get(parent));	  	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Collection<Node>)	10	None	add
82	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.node);  [CE]  cannot  find  symbol  node  [FE]      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.node);	  	non-compiled	[CE]  cannot  find  symbol  node	10	None	add
83	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  cfa);  [CE]  non-static  variable  compiler  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      NodeTraversal.traverse(compiler,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        NodeTraversal.traverse(compiler,  node,  cfa);	  	non-compiled	[CE]  non-static  variable  compiler  cannot  be  referenced  from  a  static  context	10	None	add
84	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.lastChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.lastChild());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.lastChild());	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
85	[BUG]  [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>)  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      return  computeFollowNode(fromNode,  parent,  cfa.finallyMap);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        return  computeFollowNode(fromNode,  parent,  cfa.finallyMap);	  	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>)	10	None	add
86	[BUG]  [BUGGY]  return  computeFollowNode(FromNode,  parent,  cfa);  [CE]  cannot  find  symbol  FromNode  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(FromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(FromNode,  parent,  cfa);	  return    computeFollowNode(toNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  FromNode	13	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(parent,  fromNode,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	add	return  computeFollowNode(parent,  fromNode,  cfa);	  return    computeFollowNode(toNode,    parent,    cfa);    	compilable	  [FE]  AssertionFailedError  	13	5	replace
88	[BUG]  [BUGGY]  return  computeFollowNode(parent,  fromNode,  cfa);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(parent,  fromNode,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(parent,  fromNode,  cfa);	  return    computeFollowNode(toNode,    parent,    cfa);    	compilable	  [FE]  AssertionFailedError  	13	5	replace
89	[BUG]  [BUGGY]  return  computeFowNode(fromNode,  parent,  cfa);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFowNode(fromNode,  parent,  cfa);	  return    computeFollowNode(toNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
90	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.cloneTree());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.cloneTree());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa.cloneTree());	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
91	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  edgesAnnotations);  [CE]  cannot  find  symbol  edgesAnnotations  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  edgesAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa,  edgesAnnotations);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  edgesAnnotations	2	None	replace
92	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);  [CE]  non-static  variable  astPositionCounter  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  non-static  variable  astPositionCounter  cannot  be  referenced  from  a  static  context	12	None	replace
93	[BUG]  [BUGGY]  return  computeFollowNode(toNode,  parent,  node);  [CE]  cannot  find  symbol  toNode  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(toNode,  parent,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(toNode,  parent,  node);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  toNode	12	None	replace
94	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  node,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  node,  fromNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  node,  fromNode);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	6	None	replace
95	[BUG]  [BUGGY]  return  computeFallThrough(node,  fromNode,  cfa);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(node,  fromNode,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(node,  fromNode,  cfa);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	6	None	replace
96	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.firstNode);  [CE]  cannot  find  symbol  firstNode  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.firstNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa.firstNode);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  firstNode	9	None	replace
97	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  cfa,  parent);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  cfa,  parent);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  cfa,  parent);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
98	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  curHandler);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  curHandler);	  return    computeFollowNode(fromNode,    parent,    cfa,    firstNode);    	non-compiled	[CE]  cannot  find  symbol  curHandler	8	None	replace
99	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  n,  node);  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  n,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  n,  node);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  n	16	None	replace
100	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  fromNode,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  fromNode,  node);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
101	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  toNode,  parent);  [CE]  cannot  find  symbol  toNode  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  toNode,  parent);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  toNode,  parent);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  toNode	16	None	replace
102	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  dataArea);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  dataArea);	  return    computeFollowNode(fromNode,    parent,    cfa,    edgeAnnotations);    	non-compiled	[CE]  cannot  find  symbol  dataArea	1	None	replace
103	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node),  edgeAnnotations);  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node),  edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node),  edgeAnnotations);	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  'void'  type  not  allowed  here	14	None	replace
104	[BUG]  [BUGGY]  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(cfa.createEdge(fromNode,  Branch.UNCOND,  node));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  'void'  type  not  allowed  here	14	None	replace
105	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  firstNode));  [CE]  cannot  find  symbol  firstNode  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  firstNode));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  firstNode));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  cannot  find  symbol  firstNode	14	None	replace
106	[BUG]  [BUGGY]  return  computeFunctionThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFunctionThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFunctionThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node));	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  'void'  type  not  allowed  here	14	None	replace
107	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa,  parent);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,Node)  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa,  parent);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  node,  cfa,  parent);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,Node)	7	None	replace
108	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  NodeTraversal.traverse(compiler,  node,  cfa);  [CE]  non-static  variable  compiler  cannot  be  referenced  from  a  static  context  [FE]    StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  NodeTraversal.traverse(compiler,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    NodeTraversal.traverse(compiler,  node,  cfa);	  	non-compiled	[CE]  non-static  variable  compiler  cannot  be  referenced  from  a  static  context	5	None	add
109	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  return  computeFollowNode(fromNode,  node,  cfa);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  return  computeFollowNode(fromNode,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    return  computeFollowNode(fromNode,  node,  cfa);	  	non-compiled	[CE]  unreachable  statement	5	None	add
110	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  parent  =  cfa.getParent();  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)  [FE]        StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  parent  =  cfa.getParent();  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  parent  =  cfa.getParent();  return  computeFollowNode(fromNode,  parent,  cfa);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)	5	None	add
111	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  return  computeFallThrough(fromNode,  parent,  cfa);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  return  computeFallThrough(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    return  computeFallThrough(fromNode,  parent,  cfa);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	5	None	add
112	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getFirstChild();  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)  [FE]            StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getFirstChild();  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  node  =  cfa.getFirstChild();  return  computeFollowNode(fromNode,  parent,  cfa);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)	5	None	add
113	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getLastChild();  return  computeFollowNode(fromNode,  parent,  cfa);  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)  [FE]              StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getLastChild();  return  computeFollowNode(fromNode,  parent,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  node  =  cfa.getLastChild();  return  computeFollowNode(fromNode,  parent,  cfa);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)	5	None	add
114	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)  [FE]                StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getFirstChild();  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  node  =  cfa.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)	5	None	add
115	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getFirstChild();  return  computeFollowNode(fromNode,  node,  cfa);  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)  [FE]                  StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  node  =  cfa.getFirstChild();  return  computeFollowNode(fromNode,  node,  cfa);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  node  =  cfa.getFirstChild();  return  computeFollowNode(fromNode,  node,  cfa);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node,ControlFlowAnalysis)	5	None	add
116	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  baseUri,  null);  [CE]  cannot  find  symbol  baseUri  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  baseUri,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  baseUri,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  cannot  find  symbol  baseUri	15	None	replace
117	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  exceptionHandler);  [CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  exceptionHandler);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    cfa,    firstNode);    	non-compiled	[CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context	8	None	replace
118	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  body);  [CE]  cannot  find  symbol  body  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  body);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  body);	  return    computeFollowNode(fromNode,    parent,    cfa,    firstNode);    	non-compiled	[CE]  cannot  find  symbol  body	8	None	replace
119	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  initNode);  [CE]  cannot  find  symbol  initNode  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  initNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  initNode);	  return    computeFollowNode(fromNode,    parent,    cfa,    firstNode);    	non-compiled	[CE]  cannot  find  symbol  initNode	8	None	replace
120	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  cond);  [CE]  cannot  find  symbol  cond  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  cond);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  cond);	  return    computeFollowNode(fromNode,    parent,    cfa,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol  cond	3	None	replace
121	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  rect);  [CE]  cannot  find  symbol  rect  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  rect);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  rect);	  return    computeFollowNode(fromNode,    parent,    cfa,    finallyNode);    	non-compiled	[CE]  cannot  find  symbol  rect	3	None	replace
122	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.nextNode);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.nextNode);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  this.nextNode);	  return    computeFollowNode(fromNode,    parent,    cfa,    finallyNode);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	3	None	replace
123	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.lastJump);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.lastJump);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  this.lastJump);	  return    computeFollowNode(fromNode,    parent,    cfa,    finallyNode);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	3	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	add	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	compilable	  [FE]  AssertionFailedError  	10	3	add
125	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	compilable	  [FE]  AssertionFailedError  	10	3	add
126	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.VAR)  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.VAR)  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.VAR)  {  return  computeFollowNode(fromNode,  parent,  cf	  	non-compiled	[CE]  ')'  expected	10	None	add
127	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.NAME)  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.NAME)  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.NAME)  {  return  computeFollowNode(fromNode,  parent,  cf	  	non-compiled	[CE]  ')'  expected	10	None	add
128	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cf  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cf  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cf	  	non-compiled	[CE]  ')'  expected	10	None	add
129	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.NAME)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.NAME)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.NAME)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
130	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.VAR)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.VAR)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  if(next.getType()  ==  Token.VAR)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  n);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	add	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  n);  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
132	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  n);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  n);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  null;  n  =  n.getNext())  {  cfa.createEdge(fromNode,  Branch.UNCOND,  n);  }	  	compilable	  [FE]  AssertionFailedError  	10	4	add
133	[BUG]  [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  node.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]      for(Node  n  =  fromNode.getFirstChild();  n!=  node.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	        for(Node  n  =  fromNode.getFirstChild();  n!=  node.getNext())  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  ';'  expected	10	None	add
134	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  nodeAnnotations);  [CE]  cannot  find  symbol  nodeAnnotations  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  nodeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  nodeAnnotations);	  return    computeFollowNode(fromNode,    parent,    cfa,    edgeAnnotations);    	non-compiled	[CE]  cannot  find  symbol  nodeAnnotations	1	None	replace
135	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
136	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
137	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  node,  cfa);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  node,  cfa);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  node,  cfa);  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
138	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  return  computeFollowNode(fromNode,  node,  cfa);  }  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  return  computeFollowNode(fromNode,  node,  cfa);  }  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    if(node.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  else  {  return  computeFollowNode(fromNode,  node,  cfa);  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
139	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  firstJump  =  cfa.lastJump();  return  computeFollowNode(fromNode,  parent,  firstJump);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  firstJump  =  cfa.lastJump();  return  computeFollowNode(fromNode,  parent,  firstJump);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  firstJump  =  cfa.lastJump();  return  computeFollowNode(fromNode,  parent,  firstJump);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
140	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  cfa.next();  return  computeFollowNode(fromNode,  parent,  nextSibling);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  nextSibling  =  cfa.next();  return  computeFollowNode(fromNode,  parent,  nextSibling);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  nextSibling  =  cfa.next();  return  computeFollowNode(fromNode,  parent,  nextSibling);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
141	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  body  =  cfa.getLastChild();  return  computeFollowNode(fromNode,  parent,  body);  [CE]  cannot  find  symbol  [FE]                StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  Node  body  =  cfa.getLastChild();  return  computeFollowNode(fromNode,  parent,  body);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    Node  body  =  cfa.getLastChild();  return  computeFollowNode(fromNode,  parent,  body);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
142	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  unreachable  statement  [FE]                  StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return    computeFollowNode(fromNode,    node,    cfa);    cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  	non-compiled	[CE]  unreachable  statement	5	None	add
143	[BUG]  [BUGGY]  return  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  incompatible  types  [FE]    StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  incompatible  types	6	None	replace
144	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  node);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	6	None	replace
145	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [CE]  ')'  expected  [FE]        StackOverflowError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node);	  return    computeFollowNode(fromNode,    node,    cfa);    	non-compiled	[CE]  ')'  expected	6	None	replace
146	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.getParent());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa.getParent());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa.getParent());	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
147	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa,  node);	  return    computeFallThrough(fromNode,    parent,    cfa);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	2	None	replace
148	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND));  [CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND));	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	12	None	replace
149	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND),  node);  [CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND),  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.UNCOND),  node);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  method  createEdge  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	12	None	replace
150	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.BLOCK,  node));  [CE]  cannot  find  symbol  BLOCK  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.BLOCK,  node));  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa.createEdge(fromNode,  Branch.BLOCK,  node));	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  BLOCK	12	None	replace
151	[BUG]  [BUGGY]  return  computeFollowNode(toNode,  parent,  cfa.cloneTree());  [CE]  cannot  find  symbol  toNode  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(toNode,  parent,  cfa.cloneTree());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(toNode,  parent,  cfa.cloneTree());	  return    computeFollowNode(toNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  toNode	13	None	replace
152	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfa,  null);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,<null>)  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfa,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cfa,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,<null>)	15	None	replace
153	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  exceptionHandler,  null);  [CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  exceptionHandler,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  exceptionHandler,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context	15	None	replace
154	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyMap);  [CE]  non-static  variable  finallyMap  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyMap);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  non-static  variable  finallyMap  cannot  be  referenced  from  a  static  context	15	None	replace
155	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyMap,  null);  [CE]  non-static  variable  finallyMap  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyMap,  null);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  finallyMap,  null);	  return    computeFollowNode(fromNode,    parent,    cfa,    null);    	non-compiled	[CE]  non-static  variable  finallyMap  cannot  be  referenced  from  a  static  context	15	None	replace
156	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.nextSibling);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  this.nextSibling);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  this.nextSibling);	  return    computeFollowNode(fromNode,    parent,    cfa,    nextSibling);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	4	None	replace
157	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node).toString());  [CE]  void  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node).toString());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node).toString());	  return    computeFallThrough(cfa.createEdge(fromNode,    Branch.UNCOND,    node));    	non-compiled	[CE]  void  cannot  be  dereferenced	14	None	replace
158	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  exceptionHandler);  [CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa,  exceptionHandler);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa,  exceptionHandler);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context	9	None	replace
159	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.firstChild);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa.firstChild);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol  firstChild	9	None	replace
160	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.firstChild());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.firstChild());  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa.firstChild());	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
161	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.finallyMap);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa.finallyMap);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa.finallyMap);	  return    computeFallThroughNode(fromNode,    parent,    cfa);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
162	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  baseUri,  node);  [CE]  cannot  find  symbol  baseUri  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  baseUri,  node);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  baseUri,  node);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  cannot  find  symbol  baseUri	7	None	replace
163	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node,  exceptionHandler);  [CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node,  exceptionHandler);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  node,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  non-static  variable  exceptionHandler  cannot  be  referenced  from  a  static  context	7	None	replace
164	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node,  this.edgeAnnotations);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node,  this.edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  node,  this.edgeAnnotations);	  return    computeFollowNode(fromNode,    parent,    cfa,    node);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	7	None	replace
165	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  this.edgeAnnotations);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  this.edgeAnnotations);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  node,  this.edgeAnnotations);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	16	None	replace
166	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  pn);  [CE]  cannot  find  symbol  pn  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }    [BUGGY]  return  computeFallThrough(cfa,  parent,  node,  pn);  [BUGGY]    }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  node,  pn);	  return    computeFallThrough(cfa,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  pn	16	None	replace
