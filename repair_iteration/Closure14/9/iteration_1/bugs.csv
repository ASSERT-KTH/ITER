bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  edgeAnnotations);  [CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  edgeAnnotations);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  edgeAnnotations);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  non-static  variable  edgeAnnotations  cannot  be  referenced  from  a  static  context	17	None	replace
2	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFallThrough(fromNode,  parent,  cfa);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(fromNode,  parent,  cfa);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	17	None	replace
3	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode);  [CE]  cannot  find  symbol  finallyNode  [FE]        AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  finallyNode);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  cannot  find  symbol  finallyNode	17	None	replace
4	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  nextSibling);  [CE]  cannot  find  symbol  nextSibling  [FE]          AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  nextSibling);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  nextSibling);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  cannot  find  symbol  nextSibling	17	None	replace
5	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	add	return  computeFollowNode(fromNode,  node,  cfa);	return  computeFollowNode(fromNode,  parent,  cfa);  	compilable	  [FE]  StackOverflowError  	17	12	replace
6	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  [FE]  StackOverflowError  [FE]            AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  node,  cfa);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  node,  cfa);	return  computeFollowNode(fromNode,  parent,  cfa);  	compilable	  [FE]  StackOverflowError  	17	12	replace
7	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,Node)  [FE]              AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  node);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  node);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,Node)	17	None	replace
8	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  firstNode);  [CE]  cannot  find  symbol  firstNode  [FE]                AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  firstNode);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  firstNode);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  cannot  find  symbol  firstNode	17	None	replace
9	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  cfa);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThroughNode(fromNode,  parent,  cfa);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]    [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	add	  	return  computeFollowNode(fromNode,  parent,  cfa);  	compilable	  [FE]  AssertionFailedError  	17	3	replace
11	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                    AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]    [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	  	return  computeFollowNode(fromNode,  parent,  cfa);  	compilable	  [FE]  AssertionFailedError  	17	3	replace
12	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  node);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	17	None	replace
13	[BUG]  [BUGGY]  return  computeFollowNode(toNode,  parent,  cfa);  [CE]  cannot  find  symbol  toNode  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(toNode,  parent,  cfa);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(toNode,  parent,  cfa);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  cannot  find  symbol  toNode	17	None	replace
14	[BUG]  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node));  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa.createEdge(fromNode,  Branch.UNCOND,  node));	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  'void'  type  not  allowed  here	17	None	replace
15	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  null);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,<null>)  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfa,  null);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFollowNode(fromNode,  parent,  cfa,  null);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowAnalysis,<null>)	17	None	replace
16	[BUG]  [BUGGY]  return  computeFallThrough(cfa,  parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  }  else  {  return  computeFollowNode(fromNode,  parent,  cfa);  }  }  else  if  (parent.getLastChild()  ==  node){  if  (cfa  !=  null)  {  for  (Node  finallyNode  :  cfa.finallyMap.get(parent))  {  cfa.createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  }  [BUGGY]  return  computeFallThrough(cfa,  parent,  node);  [BUGGY]  }  }    Node  nextSibling  =  node.getNext();  while  (nextSibling  !=  null  &&  nextSibling.isFunction())  {  nextSibling  =  nextSibling.getNext();  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  ControlFlowAnalysis  cfa  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  edgeAnnotations  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  previous  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure14/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.5	770	770	3	replace	return  computeFallThrough(cfa,  parent,  node);	return  computeFollowNode(fromNode,  parent,  cfa);  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	17	None	replace
