90	[BUG]    [BUGGY]    if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [FE]    AssertionError    [FE]            AssertionError        [CONTEXT]            simplex    =    reflectedSimplex;    }    return;    }    final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    comparator);        [BUGGY]    if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [BUGGY]        if    (comparator.compare(contracted,    best)    <    0)    {        return;    }    }    }    [CLASS]    MultiDirectional    [METHOD]    iterateSimplex    [RETURN_TYPE]    void    RealPointValuePair>    comparator    [VARIABLES]    RealPointValuePair    best    contracted    expanded    reflected    boolean    double    gamma    khi    RealPointValuePair[]    original    reflectedSimplex    Comparator    comparator    	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	plausible		79	0
91	[BUG]    [BUGGY]    if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [FE]    AssertionError    [FE]            AssertionError        [CONTEXT]            simplex    =    reflectedSimplex;    }    return;    }    final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    comparator);        [BUGGY]    if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [BUGGY]        if    (comparator.compare(contracted,    best)    <    0)    {        return;    }    }    }    [CLASS]    MultiDirectional    [METHOD]    iterateSimplex    [RETURN_TYPE]    void    RealPointValuePair>    comparator    [VARIABLES]    RealPointValuePair    best    contracted    expanded    reflected    boolean    double    gamma    khi    RealPointValuePair[]    original    reflectedSimplex    Comparator    comparator    	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted!=  null)  {  if(comparator.compare(contracted,  best)  >=  0)  {  return;  }	  if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	plausible		79	0
140	[BUG]    [BUGGY]            if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [FE]    AssertionError    [FE]        AssertionError        [CONTEXT]            simplex    =    reflectedSimplex;    }    return;    }    final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    comparator);        [BUGGY]            if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [BUGGY]        if    (comparator.compare(contracted,    best)    <    0)    {        return;    }    }    }    [CLASS]    MultiDirectional    [METHOD]    iterateSimplex    [RETURN_TYPE]    void    RealPointValuePair>    comparator    [VARIABLES]    RealPointValuePair    best    contracted    expanded    reflected    boolean    double    gamma    khi    RealPointValuePair[]    original    reflectedSimplex    Comparator    comparator    	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(simplex!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	plausible		52	0
344	[BUG]    [BUGGY]    if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [FE]    AssertionError    [FE]            AssertionError        [CONTEXT]            simplex    =    reflectedSimplex;    }    return;    }    final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    comparator);        [BUGGY]    if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    [BUGGY]        if    (comparator.compare(contracted,    best)    <    0)    {        return;    }    }    }    [CLASS]    MultiDirectional    [METHOD]    iterateSimplex    [RETURN_TYPE]    void    RealPointValuePair>    comparator    [VARIABLES]    RealPointValuePair    best    contracted    expanded    reflected    boolean    double    gamma    khi    RealPointValuePair[]    original    reflectedSimplex    Comparator    comparator    	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator!=  null)  {  if(comparator.compare(contracted,  best)  ==  0)  {  return;  }	  if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	plausible		79	0
357	[BUG]    [BUGGY]    if(comparator.compare(contracted,    best)!=    0)    {    return;    }    [CE]    class,    interface,    or    enum    expected    [FE]                    AssertionError        [CONTEXT]            simplex    =    reflectedSimplex;    }    return;    }    final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    comparator);        [BUGGY]    if(comparator.compare(contracted,    best)!=    0)    {    return;    }    [BUGGY]        if    (comparator.compare(contracted,    best)    <    0)    {        return;    }    }    }    [CLASS]    MultiDirectional    [METHOD]    iterateSimplex    [RETURN_TYPE]    void    RealPointValuePair>    comparator    [VARIABLES]    RealPointValuePair    best    contracted    expanded    reflected    boolean    double    gamma    khi    RealPointValuePair[]    original    reflectedSimplex    Comparator    comparator    	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted!=  null)  {  if(comparator.compare(contracted,  best)!=  0)  {  return;  }	  if(comparator.compare(contracted,    best)!=    0)    {    return;    }    	plausible		46	0
357	[BUG]    [BUGGY]    if(comparator.compare(contracted,    best)!=    0)    {    return;    }    [CE]    class,    interface,    or    enum    expected    [FE]                    AssertionError        [CONTEXT]            simplex    =    reflectedSimplex;    }    return;    }    final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    comparator);        [BUGGY]    if(comparator.compare(contracted,    best)!=    0)    {    return;    }    [BUGGY]        if    (comparator.compare(contracted,    best)    <    0)    {        return;    }    }    }    [CLASS]    MultiDirectional    [METHOD]    iterateSimplex    [RETURN_TYPE]    void    RealPointValuePair>    comparator    [VARIABLES]    RealPointValuePair    best    contracted    expanded    reflected    boolean    double    gamma    khi    RealPointValuePair[]    original    reflectedSimplex    Comparator    comparator    	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator!=  null)  {  if(comparator.compare(contracted,  best)!=  0)  {  return;  }	  if(comparator.compare(contracted,    best)!=    0)    {    return;    }    	plausible		46	0
395	[BUG]    [BUGGY]    if(comparator.compare(contracted,    best)    ==    0)    {    return;    }    [CE]    class,    interface,    or    enum    expected    [FE]            AssertionError        [CONTEXT]            simplex    =    reflectedSimplex;    }    return;    }    final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    comparator);        [BUGGY]    if(comparator.compare(contracted,    best)    ==    0)    {    return;    }    [BUGGY]        if    (comparator.compare(contracted,    best)    <    0)    {        return;    }    }    }    [CLASS]    MultiDirectional    [METHOD]    iterateSimplex    [RETURN_TYPE]    void    RealPointValuePair>    comparator    [VARIABLES]    RealPointValuePair    best    contracted    expanded    reflected    boolean    double    gamma    khi    RealPointValuePair[]    original    reflectedSimplex    Comparator    comparator    	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted!=  null)  {  if(comparator.compare(contracted,  best)  ==  0)  {  return;  }	  if(comparator.compare(contracted,    best)    ==    0)    {    return;    }    	plausible		44	0
