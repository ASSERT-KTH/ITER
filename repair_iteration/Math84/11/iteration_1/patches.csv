bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
2	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
3	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  closed  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  closed  }  );  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  closed  }  );	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
4	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  comparator;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  comparator;  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  =  comparator;	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
5	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original);  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
6	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  reflected);  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  reflected);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
7	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  expanded.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  expanded.iterate();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  expanded.iterate();	      Comparator    <    RealPointValuePair>    best    =    contracted.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
8	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterate()  :  null;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterate()  :  null;  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterate()  :  null;	      Comparator    <    RealPointValuePair>    best    =    contracted.iterate();    	non-compiled	[CE]  ';'  expected	5	None	replace
9	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
10	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  -  1]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  -  1]);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  -  1]);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
11	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
12	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
13	[BUG]  [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
14	[BUG]  [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
15	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded,  best);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded,  best);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
16	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
17	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  best.compare(contracted,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  best.compare(contracted,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  best.compare(contracted,  comparator);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
18	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  best);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  best);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
19	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma,  comparator);	      Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
20	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(gamma,  original);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(gamma,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(gamma,  original);	      Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
21	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  gamma);	      Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
22	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(simplex,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(simplex,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(simplex,  gamma);	      Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
23	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflected);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflected);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflected);	      Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
24	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(simplex);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(simplex);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(simplex);	      Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
25	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relativeSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relativeSimplex);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relativeSimplex);	      Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
26	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)constraint.clone();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)constraint.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)constraint.clone();	      RealPointValuePair    best    =(RealPointValuePair)contracted.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
27	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)consume.clone();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)consume.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)consume.clone();	      RealPointValuePair    best    =(RealPointValuePair)contracted.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
28	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)constrainted.clone();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)constrainted.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)constrainted.clone();	      RealPointValuePair    best    =(RealPointValuePair)contracted.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
29	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	2	None	replace
30	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  cannot  find  symbol  comparison  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	2	None	replace
31	[BUG]  [BUGGY]  if  (comparator.compare(best,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(best,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(best,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	2	None	replace
32	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(original);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.get(original);	      Comparator    <    RealPointValuePair>    best    =    comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
33	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted);	      Comparator    <    RealPointValuePair>    best    =    comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
34	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(original,  contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.get(original,  contracted);	      Comparator    <    RealPointValuePair>    best    =    comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
35	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
36	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  gamma,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  gamma,  contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  gamma,  contracted);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
37	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
38	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  gamma);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
39	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  contracted);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
40	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
41	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  expanded);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  expanded);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
42	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  gamma);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
43	[BUG]  [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  best)  <  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
44	[BUG]  [BUGGY]  if(comparator.compare(contracted,  best)  ==  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  best)  ==  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  best)  ==  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
45	[BUG]  [BUGGY]  if(contracted.compare(original,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(contracted.compare(original,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(original,  best)  <  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
46	[BUG]  [BUGGY]  if(comparator.compare(contracted,  best)!=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  best)!=  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  best)!=  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
47	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  gamma)  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	1	None	replace
48	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  best)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  gamma,  best)  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  best)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	1	None	replace
49	[BUG]  [BUGGY]  if  (comparator.compare(original,  reflectedSimplex)  <  0)  {  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  reflectedSimplex)  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  reflectedSimplex)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	1	None	replace
50	[BUG]  [BUGGY]  if  (comparator.compare(original,  best,  contracted)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  best,  contracted)  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  best,  contracted)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	1	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	add	        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	compilable	  [FE]  AssertionError  	15	2	add
52	[BUG]  [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	compilable	  [FE]  AssertionError  	15	2	add
53	[BUG]  [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  compare  [FE]      AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(compare.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  compare	15	None	add
54	[BUG]  [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
55	[BUG]  [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  If(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]      if(comparator.compare(contracted,  best)  <  0)  {  return;  }  If(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    If(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
56	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  1);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  1);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  1);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
57	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  total);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  total);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  total);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
58	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
59	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
60	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  true);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  true);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  true);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
61	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  null);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  null);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
62	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true,  false);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true,  false);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
63	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])  <  0)  {  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[best])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	20	None	replace
64	[BUG]  [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[best])  <  0)  {  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[best])  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  new  RealPointValuePair[best])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	20	None	replace
65	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])  <  0)  {  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[best])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	20	None	replace
66	[BUG]  [BUGGY]  if(comparator.compare(best,  new  RealPointValuePair[contracted])  <  0)  {  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(best,  new  RealPointValuePair[contracted])  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(best,  new  RealPointValuePair[contracted])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	20	None	replace
67	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)covered.clone();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)covered.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)covered.clone();	      RealPointValuePair    best    =(RealPointValuePair)contracted.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
68	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  contracted);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
69	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterate();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterate();	      Comparator    <    RealPointValuePair>    best    =    contracted.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
70	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.iterate();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflected.iterate();	      Comparator    <    RealPointValuePair>    best    =    contracted.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
71	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(simplex,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(simplex,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(simplex,  gamma);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
72	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  closed);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  closed);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  closed);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
73	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  contracted);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
74	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  gamma);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
75	[BUG]  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
76	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(original);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(original);	      Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
77	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(original);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex(original);	      Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	add	if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	compilable	  [FE]  AssertionError  	16	2	replace
79	[BUG]  [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	compilable	  [FE]  AssertionError  	16	2	replace
80	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  best);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  best);	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
81	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
82	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contract  }  );  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contract  }  );  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contract  }  );	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
83	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  true);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  true);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  true);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
84	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	2	None	replace
85	[BUG]  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	2	None	replace
86	[BUG]  [BUGGY]  if  (comparator.compare(relative,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(relative,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(relative,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	2	None	replace
87	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	20	None	replace
88	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
89	[BUG]  [BUGGY]  if  (comparator.compare(original,  best)  ==  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  best)  ==  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  best)  ==  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	1	None	replace
90	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
91	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex();	      Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
92	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  expanded.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  expanded.iterateSimplex();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  expanded.iterateSimplex();	      Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
93	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [CE]  cannot  find  symbol  implemented  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }	      	non-compiled	[CE]  cannot  find  symbol  implemented	3	None	replace
94	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [CE]  cannot  find  symbol  implemented  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }	      	non-compiled	[CE]  cannot  find  symbol  implemented	3	None	replace
95	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple	      	non-compiled	[CE]  ')'  expected	3	None	replace
96	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
97	[BUG]  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
98	[BUG]  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
99	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  gamma);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
100	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  extended.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  extended.iterate();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  extended.iterate();	      Comparator    <    RealPointValuePair>    best    =    contracted.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
101	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate();	      Comparator    <    RealPointValuePair>    best    =    contracted.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
102	[BUG]  [BUGGY]  if  (comparator.compare(locale,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  cannot  find  symbol  locale  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(locale,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(locale,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  locale	2	None	replace
103	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  ]);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  ]);	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
104	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [CE]  cannot  find  symbol  implemented  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }	      	non-compiled	[CE]  cannot  find  symbol  implemented	3	None	replace
105	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator	      	non-compiled	[CE]  not  a  statement	3	None	replace
106	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  best;  }  [CE]  cannot  find  symbol  implemented  [FE]                  AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  best;  }  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  best;  }	      	non-compiled	[CE]  cannot  find  symbol  implemented	3	None	replace
107	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  comparator;  }  [CE]  cannot  find  symbol  implemented  [FE]                    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  comparator;  }  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  comparator;  }	      	non-compiled	[CE]  cannot  find  symbol  implemented	3	None	replace
108	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  contracted);	      Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
109	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  contracted);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  contracted);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
110	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(original);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  this.comparator.get(original);	      Comparator    <    RealPointValuePair>    best    =    comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
111	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );	      Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
112	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
113	[BUG]  [BUGGY]  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
114	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	      if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	16	None	replace
115	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  best)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);    [BUGGY]  if  (comparator.compare(original,  khi,  best)  <  0)  {  [BUGGY]        return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  khi,  best)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	1	None	replace
