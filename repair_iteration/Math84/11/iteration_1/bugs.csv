bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (comparator.compare(original,  best)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]  if  (comparator.compare(original,  best)  <  0)  {  [BUGGY]      return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  best)  <  0)  {	if  (comparator.compare(contracted,  best)  <  0)  {  	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	21	None	replace
2	[BUG]  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]      return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	if  (comparator.compare(contracted,  best)  <  0)  {  	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	21	None	replace
3	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    [BUGGY]      return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	  	if  (comparator.compare(contracted,  best)  <  0)  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
4	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex();  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex();		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
5	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.iterate();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.iterate();  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  contracted.iterate();		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
6	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
7	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(original);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(original);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(original);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
8	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  gamma);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  gamma);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  gamma);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
9	[BUG]  [BUGGY]    RealPointValuePair  best  =(RealPointValuePair)contracted.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    RealPointValuePair  best  =(RealPointValuePair)contracted.clone();  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    RealPointValuePair  best  =(RealPointValuePair)contracted.clone();		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
10	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.get(original);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.get(original);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  comparator.get(original);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
11	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  ]);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  ]);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  ]);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
12	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
13	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
14	[BUG]  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [BUGGY]      return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  0)  {	if  (comparator.compare(contracted,  best)  <  0)  {  	non-compiled	[CE]  incompatible  types	21	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	add	    if(comparator.compare(contracted,  best)  <  0)  {  return;  }		compilable	  [FE]  AssertionError  	22	2	add
16	[BUG]  [BUGGY]    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    if(comparator.compare(contracted,  best)  <  0)  {  return;  }		compilable	  [FE]  AssertionError  	22	2	add
17	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
18	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	22	None	add
19	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best);  [CE]  incompatible  types  [FE]          AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]    Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	    Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best);		non-compiled	[CE]  incompatible  types	22	None	add
20	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[best])  <  0)  {  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]    simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[best])  <  0)  {  [BUGGY]      return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[best])  <  0)  {	if  (comparator.compare(contracted,  best)  <  0)  {  	non-compiled	[CE]  incompatible  types	21	None	replace
