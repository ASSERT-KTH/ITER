bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmallest[  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmallest[  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmallest[	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +    coeff    *(xSmallest[j]    -    xSmallest[    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmallest[  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmallest[  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmallest[	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +    coeff    *(xSmallest[j]    -    xSmallest[    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmall  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmall  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmall	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +    coeff    *(xSmallest[j]    -    xSmallest[    	non-compiled	[CE]  ')'  expected	12	None	replace
4	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmall  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmall  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmall	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +=    coeff    *(xSmallest[j]    -    xSmall    	non-compiled	[CE]  ')'  expected	14	None	replace
5	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  x  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  x  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  x	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +=    coeff    *(xSmallest[j]    -    xSmall    	non-compiled	[CE]  ')'  expected	14	None	replace
6	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xS  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xS  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xS	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +=    coeff    *(xSmallest[j]    -    xSmall    	non-compiled	[CE]  ')'  expected	14	None	replace
7	[BUG]  [BUGGY]  double[]  coeff  =  comparator[i].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  comparator[i].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  comparator[i].getPointRef();	      double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	replace
8	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getRealPointValuePair();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getRealPointValuePair();	      double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	replace
9	[BUG]  [BUGGY]  Double[]  coeff  =  comparator[i].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  Double[]  coeff  =  comparator[i].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	Double[]  coeff  =  comparator[i].getPointRef();	      Double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	5	None	replace
10	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  original[1].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  original[1].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[1].getPointRef();    final  double[]  xOriginal=  original[1].getPointRef();	  	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	8	None	add
11	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  original[2].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  original[2].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[1].getPointRef();    final  double[]  xOriginal=  original[2].getPointRef();	  	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	8	None	add
12	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  initial[1].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  initial[1].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[1].getPointRef();    final  double[]  xOriginal=  initial[1].getPointRef();	  	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	8	None	add
13	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  original[0].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  final  double[]  xOriginal=  original[0].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[1].getPointRef();    final  double[]  xOriginal=  original[0].getPointRef();	  	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	8	None	add
14	[BUG]  [BUGGY]  double[]  coeff  =  comparator[i].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  comparator[i].getCoeff();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  comparator[i].getCoeff();	      double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	4	None	replace
15	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getCoef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getCoef();	      double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	4	None	replace
16	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  comparator.getCoeff();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  comparator.getCoeff();	      double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	4	None	replace
17	[BUG]  [BUGGY]  Double[]  coeff  =  comparator[i].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  Double[]  coeff  =  comparator[i].getCoeff();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	Double[]  coeff  =  comparator[i].getCoeff();	      Double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	10	None	replace
18	[BUG]  [BUGGY]  Double[]  coeff  =  original[i].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  Double[]  coeff  =  original[i].getCoef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	Double[]  coeff  =  original[i].getCoef();	      Double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	10	None	replace
19	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getCoef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getCoef();	      final    double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	replace
20	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[i].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  comparator[i].getCoeff();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  comparator[i].getCoeff();	      final    double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	replace
21	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[0].getCoeff();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[0].getCoeff();	      final    double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	replace
22	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  final  double[]  xOriginal=  original[0].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  final  double[]  xOriginal=  original[0].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[0].getPointRef();    final  double[]  xOriginal=  original[0].getPointRef();	  	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	6	None	add
23	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  final  double[]  xOriginal=  initial[0].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  final  double[]  xOriginal=  initial[0].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[0].getPointRef();    final  double[]  xOriginal=  initial[0].getPointRef();	  	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	6	None	add
24	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  final  double[]  xOriginal=  original[1].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  final  double[]  xOriginal=  original[1].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[0].getPointRef();    final  double[]  xOriginal=  original[1].getPointRef();	  	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	6	None	add
25	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  Final  double[]  xOriginal=  original[0].getPointRef();  [CE]  not  a  statement  [FE]          OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[0].getPointRef();  Final  double[]  xOriginal=  original[0].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[0].getPointRef();    Final  double[]  xOriginal=  original[0].getPointRef();	  	non-compiled	[CE]  not  a  statement	6	None	add
26	[BUG]  [BUGGY]  final  double[]  xOriginal=simplex[i].getPointOriginal();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=simplex[i].getPointOriginal();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  xOriginal=simplex[i].getPointOriginal();	  final    double[]    xOriginal=    original[i].getPointOriginal();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
27	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[i].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  comparator[i].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  comparator[i].getPointRef();	      final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	replace
28	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getRealPointValuePair();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getRealPointValuePair();	      final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	replace
29	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getCoef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmall  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getCoef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmall  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getCoef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +=  coeff  *(xSmallest[j]  -  xSmall	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +=    coeff    *(xSmallest[j]    -    xSmall    	non-compiled	[CE]  ')'  expected	14	None	replace
30	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[0].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[0].getPointRef();	      double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	replace
31	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  Final  double[]  xOriginal=  original[1].getPointRef();  [CE]  not  a  statement  [FE]    OptimizationException    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[1].getPointRef();  Final  double[]  xOriginal=  original[1].getPointRef();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final    double[]    xOriginal=    original[1].getPointRef();    Final  double[]  xOriginal=  original[1].getPointRef();	  	non-compiled	[CE]  not  a  statement	8	None	add
32	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[0].getPointOriginal();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[0].getPointOriginal();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  xOriginal=  original[0].getPointOriginal();	  final    double[]    xOriginal=    original[i].getPointOriginal();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
33	[BUG]  [BUGGY]  final  double[]  xOriginal=  original[1].getPointOriginal();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  xOriginal=  original[1].getPointOriginal();  [BUGGY]    final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  xOriginal=  original[1].getPointOriginal();	  final    double[]    xOriginal=    original[i].getPointOriginal();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
34	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[1].getCoeff();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[1].getCoeff();	      final    double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	replace
35	[BUG]  [BUGGY]  double[]  coeff  =  comparator[i].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  comparator[i].getCoef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  comparator[i].getCoef();	      double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	4	None	replace
36	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmall  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmall  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmall	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +    coeff    *(xSmallest[j]    -    xSmallest[    	non-compiled	[CE]  ')'  expected	12	None	replace
37	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xS  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xS  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xS	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +    coeff    *(xSmallest[j]    -    xSmallest[    	non-compiled	[CE]  ')'  expected	12	None	replace
38	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmal  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmal  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n;  ++j)  {  xSmallest[j]  +  coeff  *(xSmallest[j]  -  xSmal	      double[]    coeff    =    original[i].getPointRef();    for(int    j    =    0;    j    <    n;    ++j)    {    xSmallest[j]    +    coeff    *(xSmallest[j]    -    xSmallest[    	non-compiled	[CE]  ')'  expected	12	None	replace
39	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[0].getPointRef();	      final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	replace
40	[BUG]  [BUGGY]  Double[]  coeff  =  comparator[i].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  Double[]  coeff  =  comparator[i].getCoef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	Double[]  coeff  =  comparator[i].getCoef();	      Double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	10	None	replace
41	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getPoint();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getPoint();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getPoint();	      double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	replace
42	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getCoeff(simplex);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getCoeff(simplex);  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getCoeff(simplex);	      final    double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	replace
43	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPoint();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  final  double[]  coeff  =  original[i].getPoint();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	final  double[]  coeff  =  original[i].getPoint();	      final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	replace
44	[BUG]  [BUGGY]  Double[]  coeff  =  original[i].getCoeff(simplex);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  Double[]  coeff  =  original[i].getCoeff(simplex);  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	Double[]  coeff  =  original[i].getCoeff(simplex);	      Double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	10	None	replace
45	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getCoeff(simplex);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {    [BUGGY]  double[]  coeff  =  original[i].getCoeff(simplex);  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  return  simplex[0];  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	double[]  coeff  =  original[i].getCoeff(simplex);	      double[]    coeff    =    original[i].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	4	None	replace
