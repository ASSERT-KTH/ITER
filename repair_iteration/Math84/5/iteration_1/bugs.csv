bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    Comparator  simplex  =  comparator.compare(simplex);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	add
2	[BUG]  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex,  original);  [CE]  cannot  find  symbol  original  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex,  original);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    Comparator  simplex  =  comparator.compare(simplex,  original);		non-compiled	[CE]  cannot  find  symbol  original	10	None	add
3	[BUG]  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex,  1.0);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    Comparator  simplex  =  comparator.compare(simplex,  1.0);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	add
4	[BUG]  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex,  true);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    Comparator  simplex  =  comparator.compare(simplex,  true);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    Comparator  simplex  =  comparator.compare(simplex,  true);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	add
5	[BUG]  [BUGGY]    Comparator  simplex  =  comparator.getSimplex();  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    Comparator  simplex  =  comparator.getSimplex();  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    Comparator  simplex  =  comparator.getSimplex();		non-compiled	[CE]  cannot  find  symbol	10	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=  null)  {  incrementIterationsCounter();  }	incrementIterationsCounter();  	compilable	  [FE]  AssertionError  	9	2	replace
7	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }	incrementIterationsCounter();  	compilable	  [FE]  AssertionError  	9	2	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	incrementIterationsCounter();  	compilable	  [FE]  AssertionError  	9	2	replace
9	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	incrementIterationsCounter();  	compilable	  [FE]  AssertionError  	9	2	replace
10	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }	incrementIterationsCounter();  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }	incrementIterationsCounter();  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  return;  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  return;  }	incrementIterationsCounter();  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  continue;  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  continue;  }	incrementIterationsCounter();  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  timeout  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex  ==  null)  {  incrementIterationsCounter();  }	incrementIterationsCounter();  	compilable	timeout	9	1	replace
15	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  timeout  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  incrementIterationsCounter();  }	incrementIterationsCounter();  	compilable	timeout	9	1	replace
16	[BUG]  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);		non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	10	None	add
17	[BUG]  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  evaluateNewSimplex(simplex);		non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	10	None	add
18	[BUG]  [BUGGY]    Comparator  simplex  =  comparator.getSimpleX(simplex);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    Comparator  simplex  =  comparator.getSimpleX(simplex);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    Comparator  simplex  =  comparator.getSimpleX(simplex);		non-compiled	[CE]  cannot  find  symbol	10	None	add
19	[BUG]  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex,  comparator);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  evaluateNewSimplex(simplex,  comparator);		non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	10	None	add
20	[BUG]  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex,  1.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  evaluateNewSimplex(simplex,  1.0);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  evaluateNewSimplex(simplex,  1.0);		non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	10	None	add
21	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }	incrementIterationsCounter();  	non-compiled	[CE]  incompatible  types	9	None	replace
22	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [CE]  cannot  find  symbol  original  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }	incrementIterationsCounter();  	non-compiled	[CE]  cannot  find  symbol  original	9	None	replace
23	[BUG]  [BUGGY]    double  simplex  =  comparator.compare(simplex,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  comparator.compare(simplex,  0.0);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  comparator.compare(simplex,  0.0);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	add
24	[BUG]  [BUGGY]    double  simplex  =  comparator.compare(simplex,  best);  [CE]  cannot  find  symbol  best  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  comparator.compare(simplex,  best);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  comparator.compare(simplex,  best);		non-compiled	[CE]  cannot  find  symbol  best	10	None	add
25	[BUG]  [BUGGY]    double  simplex  =  comparator.compare(simplex,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  comparator.compare(simplex,  1.0);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  comparator.compare(simplex,  1.0);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	add
26	[BUG]  [BUGGY]    double  simplex  =  comparator.compare(simplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  comparator.compare(simplex);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  comparator.compare(simplex);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	add
27	[BUG]  [BUGGY]    double  simplex  =  comparator.compare(simplex,  0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  [BUGGY]    double  simplex  =  comparator.compare(simplex,  0);  [BUGGY]  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	    double  simplex  =  comparator.compare(simplex,  0);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	add
