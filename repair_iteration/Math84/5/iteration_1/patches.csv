bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  cannot  find  symbol  original  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	16	None	replace
2	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflected);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflected);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	16	None	replace
3	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  1.0,  comparator);  [CE]  cannot  find  symbol  relativeSimplex  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  1.0,  comparator);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeSimplex,  1.0,  comparator);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	16	None	replace
4	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	16	None	replace
5	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  [CE]  cannot  find  symbol  best  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best);	      Comparator    simplex    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  best	2	None	replace
6	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflectedSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  reflectedSimplex);	      Comparator    simplex    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	2	None	replace
7	[BUG]  [BUGGY]  Comparator  simplux  =  comparator.getSimplex();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplux  =  comparator.getSimplex();  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplux  =  comparator.getSimplex();	      Comparator    simplex    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.getSimplex();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  comparator  =  comparator.getSimplex();  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.getSimplex();	      Comparator    simplex    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
9	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX();  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.getSimpleX();  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX();	      Comparator    simplex    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  reflected);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  reflected);	      Comparator    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	3	None	replace
11	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  reflectedSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  reflectedSimplex);	      Comparator    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	3	None	replace
12	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0);	      Comparator    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	3	None	replace
13	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  continue;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	13	None	replace
14	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex  ==  null)  {  continue;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex  ==  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex  ==  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	13	None	replace
15	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	13	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	8	2	add
17	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	8	2	add
18	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	8	4	add
19	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	8	4	add
20	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	8	None	add
21	[BUG]  [BUGGY]  ||(simplex!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  ||(simplex!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	||(simplex!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  While(simplex!=  null)  {  incrementIterationsCounter();  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  While(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	While(simplex!=  null)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  ||(simplex!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  ||(simplex!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	||(simplex!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  dim);  [CE]  cannot  find  symbol  original  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(original,  dim);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  dim);	      double    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  original	26	None	replace
25	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  original);  [CE]  cannot  find  symbol  original  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  original);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  original);	      double    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  original	26	None	replace
26	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  reflected);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  reflected);	      double    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	26	None	replace
27	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  0.0);	      double    simplex    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	23	None	replace
28	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  0.0);	      double    simplex    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	23	None	replace
29	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  reflectedSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0.0,  reflectedSimplex);	      double    simplex    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	23	None	replace
30	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  simplex.iterator();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  simplex.iterator();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iterator  =  simplex.iterator();	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    timeout    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
31	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  this.simplex.iterator();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  this.simplex.iterator();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iterator  =  this.simplex.iterator();	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    timeout    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
32	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  reflectedSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  reflectedSimplex);	      double    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	25	None	replace
33	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  reflected);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  reflected);	      double    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	25	None	replace
34	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  reflectedSima);  [CE]  cannot  find  symbol  reflectedSima  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  reflectedSima);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  reflectedSima);	      double    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSima	25	None	replace
35	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  siplex);  [CE]  cannot  find  symbol  original  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  siplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  siplex);	      double    simplex    =    evaluateNewSimplex(simplex);    	non-compiled	[CE]  cannot  find  symbol  original	17	None	replace
36	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflectedSimplex);	      double    simplex    =    evaluateNewSimplex(simplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	17	None	replace
37	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  dim);  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  dim);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeSimplex,  dim);	      double    simplex    =    evaluateNewSimplex(simplex);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	17	None	replace
38	[BUG]  [BUGGY]  if(comparator!=  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator!=  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  if(comparator!=  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator!=  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator!=  null)  {  continue;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator!=  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex);  if(comparator!=  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
41	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
42	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  return;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex!=  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	12	None	replace
43	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex  ==  null)  {  return;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex  ==  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(simplex  ==  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	12	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	6	2	add
45	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	6	2	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	6	2	add
47	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	6	2	add
48	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  If(simplex!=  null)  {  incrementIterationsCounter();  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  If(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    If(simplex!=  null)  {  incrementIterationsCounter();  }	  	non-compiled	[CE]  ';'  expected	6	None	add
49	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  >=  null)  {  incrementIterationsCounter();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  >=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  >=  null)  {  incrementIterationsCounter();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	6	None	add
50	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  comparator);  [CE]  cannot  find  symbol  original  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  comparator);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  comparator);	      double    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	19	None	replace
51	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  siplex);  [CE]  cannot  find  symbol  siplex  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  siplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  siplex);	      double    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  siplex	19	None	replace
52	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [CE]  cannot  find  symbol  expanded  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);	      double    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	19	None	replace
53	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  dim);  [CE]  cannot  find  symbol  dim  [FE]                    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  dim);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  dim);	      double    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  dim	19	None	replace
54	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflectedSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  reflectedSimplex);	      double    simplex    =    comparator.compare(simplex,    0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	27	None	replace
55	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflectedSimplex.length);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflectedSimplex.length);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  reflectedSimplex.length);	      double    simplex    =    comparator.compare(simplex,    0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	27	None	replace
56	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  original.length);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  original.length);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  original.length);	      double    simplex    =    comparator.compare(simplex,    0);    	non-compiled	[CE]  cannot  find  symbol  original	27	None	replace
57	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  dim);  [CE]  cannot  find  symbol  original  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(original,  dim);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  dim);	      Comparator    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  original	1	None	replace
58	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  maximum);  [CE]  cannot  find  symbol  maximum  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  maximum);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  maximum);	      Comparator    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  maximum	1	None	replace
59	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(original);  [CE]  cannot  find  symbol  original  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(original);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(original);	      Comparator    simplex    =    comparator.getSimpleX(simplex);    	non-compiled	[CE]  cannot  find  symbol  original	18	None	replace
60	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(relativeSimplex);  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(relativeSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(relativeSimplex);	      Comparator    simplex    =    comparator.getSimpleX(simplex);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	18	None	replace
61	[BUG]  [BUGGY]  While(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  While(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	While(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	21	None	replace
63	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	21	None	replace
64	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  best);  [CE]  cannot  find  symbol  original  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(original,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  best);	      double    simplex    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  original	24	None	replace
65	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  reflectedSimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  reflectedSimplex);	      double    simplex    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	24	None	replace
66	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0);  [CE]  cannot  find  symbol  original  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  1.0);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  original	20	None	replace
67	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  1.0);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeSimplex,  1.0);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	20	None	replace
68	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	20	None	replace
69	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator!=  null)  {  return;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex);  if(comparator!=  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }	  timeout    	compilable	  [FE]  AssertionError  	14	2	add
71	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }	  timeout    	compilable	  [FE]  AssertionError  	14	2	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }	  timeout    	compilable	  [FE]  AssertionError  	14	2	add
73	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }	  timeout    	compilable	  [FE]  AssertionError  	14	2	add
74	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  If(simplex  ==  null)  {  incrementIterationsCounter();  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  If(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    If(simplex  ==  null)  {  incrementIterationsCounter();  }	  timeout    	non-compiled	[CE]  ';'  expected	14	None	add
75	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  >=  null)  {  incrementIterationsCounter();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  >=  null)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  >=  null)  {  incrementIterationsCounter();  }	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	add
76	[BUG]  [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [CE]  cannot  find  symbol  relativeSimplex  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	22	None	replace
77	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  comparator[0]);  return;  }  [CE]  array  required,  but  Comparator<RealPointValuePair>  found  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  comparator[0]);  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  comparator[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  array  required,  but  Comparator<RealPointValuePair>  found	22	None	replace
78	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  false);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  false);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  false);	      Comparator    simplex    =    comparator.compare(simplex,    true);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	4	None	replace
79	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  true,  false);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  true,  false);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  true,  false);	      Comparator    simplex    =    comparator.compare(simplex,    true);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	4	None	replace
80	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best,  true);  [CE]  cannot  find  symbol  best  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best,  true);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best,  true);	      Comparator    simplex    =    comparator.compare(simplex,    true);    	non-compiled	[CE]  cannot  find  symbol  best	4	None	replace
81	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  best);  [CE]  cannot  find  symbol  relativeSimplex  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  best);	      double    simplex    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	24	None	replace
82	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(s  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(s  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(s	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  ')'  expected	22	None	replace
83	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
84	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  simal);  [CE]  cannot  find  symbol  simal  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  simal);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  simal);	      double    simplex    =    evaluateNewSimplex(simplex);    	non-compiled	[CE]  cannot  find  symbol  simal	17	None	replace
85	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  reflected);  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  reflected);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  reflected);	      double    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	26	None	replace
86	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	10	None	replace
87	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	replace
88	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex  ==  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simplex  ==  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	10	None	replace
89	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex  ==  null)  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex  ==  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex);  if(simplex  ==  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	10	None	replace
90	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  best);  [CE]  cannot  find  symbol  simple  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  best);	      Comparator    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  simple	1	None	replace
91	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  reflected);	      Comparator    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
92	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  simal);  [CE]  cannot  find  symbol  simal  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  simal);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  simal);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  simal	16	None	replace
93	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  sima);  [CE]  cannot  find  symbol  sima  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  sima);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  sima);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  sima	16	None	replace
94	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  simplex.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  simplex.iterator();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iter  =  simplex.iterator();	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
95	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(simplex);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.get(simplex);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
96	[BUG]  [BUGGY]  While(simplex!=  null)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  While(simplex!=  null)  {  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	While(simplex!=  null)  {	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	9	None	replace
97	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  [CE]  type  AssertionError  does  not  take  parameters  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    AssertionError  <  AssertionError>  simplex  =  new  AssertionError();	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	6	None	add
98	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(simple);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(simple);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(simple);	      Comparator    simplex    =    comparator.getSimpleX(simplex);    	non-compiled	[CE]  cannot  find  symbol  simple	18	None	replace
99	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  1.0,  1.0);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  1.0,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relative,  1.0,  1.0);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  relative	20	None	replace
100	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	11	None	replace
101	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	11	None	replace
102	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex  ==  null)  {  continue;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex);  if(simplex  ==  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex);  if(simplex  ==  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	11	None	replace
103	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex  ==  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simplex  ==  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	11	None	replace
104	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	21	None	replace
105	[BUG]  [BUGGY]  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	RealPointValuePair[]  simplex  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	21	None	replace
106	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	21	None	replace
107	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  best);  [CE]  cannot  find  symbol  best  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0.0,  best);	      double    simplex    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  cannot  find  symbol  best	23	None	replace
108	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0.0,  1.0);	      double    simplex    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	23	None	replace
109	[BUG]  [BUGGY]  Comparator  comp  =  comparator.getSimplex();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  comp  =  comparator.getSimplex();  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comp  =  comparator.getSimplex();	      Comparator    simplex    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
110	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  0);	      double    simplex    =    comparator.compare(simplex,    0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	27	None	replace
111	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  original);  [CE]  cannot  find  symbol  relativeSimplex  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  original);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  original);	      Comparator    simplex    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	2	None	replace
112	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  original);  [CE]  cannot  find  symbol  relative  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  original);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relative,  original);	      Comparator    simplex    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  relative	2	None	replace
113	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  [CE]  cannot  find  symbol  simple  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflected);	      Comparator    simplex    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  simple	2	None	replace
114	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  best);  [CE]  cannot  find  symbol  best  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  best);	      double    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  best	25	None	replace
115	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  best);  [CE]  cannot  find  symbol  best  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  best);	      Comparator    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  best	3	None	replace
116	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simpleX,  1.0);  [CE]  cannot  find  symbol  simpleX  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simpleX,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simpleX,  1.0);	      Comparator    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simpleX	3	None	replace
117	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  expanded);  [CE]  cannot  find  symbol  simple  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simple,  expanded);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  expanded);	      double    simplex    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	24	None	replace
118	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  original);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simple,  original);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  original);	      double    simplex    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	24	None	replace
119	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  [CE]  cannot  find  symbol  simple  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded);	      Comparator    simplex    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  simple	1	None	replace
120	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.getSimpleX();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.getSimpleX();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.getSimpleX();	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    timeout    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
121	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded,  true);  [CE]  cannot  find  symbol  simple  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded,  true);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded,  true);	      Comparator    simplex    =    comparator.compare(simplex,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	4	None	replace
122	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  1.0,  comparator);  [CE]  cannot  find  symbol  relative  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  1.0,  comparator);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relative,  1.0,  comparator);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	16	None	replace
123	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	22	None	replace
124	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	22	None	replace
125	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator);	      double    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	19	None	replace
126	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  dimplex);  [CE]  cannot  find  symbol  dimplex  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  dimplex);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  dimplex);	      double    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  dimplex	19	None	replace
127	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  0);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simple,  0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  0);	      double    simplex    =    comparator.compare(simplex,    0);    	non-compiled	[CE]  cannot  find  symbol  simple	27	None	replace
128	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  0.0);  [CE]  cannot  find  symbol  simple  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  0.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  1.0,  0.0);	      double    simplex    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  cannot  find  symbol  simple	23	None	replace
129	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  expanded);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  expanded);	      double    simplex    =    evaluateNewSimplex(simplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	17	None	replace
130	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
131	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
132	[BUG]  [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
133	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  best);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  best);	      Comparator    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simple	3	None	replace
134	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	9	4	replace
135	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	9	4	replace
136	[BUG]  [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	replace
137	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simplex);  if(simplex!=  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
138	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
139	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	21	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	8	2	add
141	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	8	2	add
142	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  best);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  best);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  1.0,  best);	      double    simplex    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simple	25	None	replace
143	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimplex(relative);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  Comparator  simplex  =  comparator.getSimplex(relative);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimplex(relative);	      Comparator    simplex    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol  relative	5	None	replace
144	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	20	None	replace
145	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  1.0);  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {    [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  1.0);  [BUGGY]    incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflected,  1.0);	      double    simplex    =    evaluateNewSimplex(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	20	None	replace
