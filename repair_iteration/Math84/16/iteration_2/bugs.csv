bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getComparator();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getComparator();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getComparator();	      double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
2	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  Double[]  coeff  =  comparator.comparator;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.comparator;	      double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
3	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0;    i    <    =    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	3	4	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  [FE]  NullPointerException  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0;    i    <    =    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	3	4	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  N;  ++i)  {  [CE]  cannot  find  symbol  N  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  0;  i  <  N;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  N;  ++i)  {	  for(int    i    =    0;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  N	3	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  1;  i  <  n  +  1;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	2	2	replace
7	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  1;  i  <  n  +  1;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	2	2	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  1;  i  <  n  +  2;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
9	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  1;  i  <  n  +  2;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  2;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	2	4	replace
11	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  2;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	2	4	replace
12	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getPointRef();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
13	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  original[i].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[i].getPointRef();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
14	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff);	      double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
15	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1);	      double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
16	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n);	      double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
17	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  true);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  true);	      double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
18	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1);	      double[]    coeff    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
19	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(n,  xSmallest);	      double[]    coeff    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
20	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  true);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  true);	      double[]    coeff    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
21	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  false);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  false);	      double[]    coeff    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
22	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest);	      double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
23	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  Double[]  coeff  =  comparator.getCoeff();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoeff();	      double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
24	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n);	      double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
25	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(xSmallest,  n);	      double[]    coeff    =    comparator.coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  3;  i  <  =  n;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  3;  i  <  =  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  3;  i  <  =  n;  ++i)  {	  for(int    i    =    2;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getRealPointValuePair();	      double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
28	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointRef();	      double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
29	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n  +  1);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n  +  1);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
30	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
31	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  0,  n);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
32	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  gamma);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  gamma);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
33	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest);	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
34	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(n);	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
35	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoeff()  +  1;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff()  +  1;	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  for(int  i  =  1;  i  <  n;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  for(int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    for(int  i  =  1;  i  <  n;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
37	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
38	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
39	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
40	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  For(int  i  =  1;  i  <  n;  ++i)  {  [CE]  '.class'  expected  [FE]            NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  For(int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    For(int  i  =  1;  i  <  n;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
41	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff);	      double[]    coeff    =    comparator.getCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
42	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1);	      double[]    coeff    =    comparator.getCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
43	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n,  xSmallest);	      double[]    coeff    =    comparator.getCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
44	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n);	      double[]    coeff    =    comparator.getCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
45	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator[0].getPointRef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator[0].getPointRef();	      double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
46	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  original[0].getCoeff();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[0].getCoeff();	      double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
47	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator[0].getPointRef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator[0].getPointRef();	      final    double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
48	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  original[0].getCoeff();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getCoeff();	      final    double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
49	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  original[1].getPointRef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[1].getPointRef();	      final    double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
51	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  int  i  =  1;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    int  i  =  1;  i  <  n;  ++i)  {	  	non-compiled	[CE]  >  expected	1	None	add
52	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  int  i  =  1;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    final  int  i  =  1;  i  <  n;  ++i)  {	  	non-compiled	[CE]  >  expected	1	None	add
53	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  For(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	For(int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
54	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  original[0].getCoef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[0].getCoef();	      double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
55	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointValuePair();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getPointValuePair();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPointValuePair();	      double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
56	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoef();	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
57	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFactory();	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
58	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  null);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  null);	      double[]    coeff    =    comparator.getCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
59	[BUG]  [BUGGY]  double[]  coeff  =  comparator!=  null?  Double.NaN  :  comparator.comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator!=  null?  Double.NaN  :  comparator.comparator;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator!=  null?  Double.NaN  :  comparator.comparator;	      double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
60	[BUG]  [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.comparator;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.comparator;	      double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
61	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoef();	      double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
62	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoefFactory();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFactory();	      double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
63	[BUG]  [BUGGY]  double[]  coeff  =  comparator!=  null?  Double.NaN  :  comparator.coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator!=  null?  Double.NaN  :  comparator.coeff;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator!=  null?  Double.NaN  :  comparator.coeff;	      double[]    coeff    =    comparator.coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0,  n  =  0;  i  <  =  n;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  0,  n  =  0;  i  <  =  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0,  n  =  0;  i  <  =  n;  ++i)  {	  for(int    i    =    2;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  original[0].getCoef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getCoef();	      final    double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
66	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  n);	      double[]    coeff    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
67	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  null);	      double[]    coeff    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
68	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
69	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  null);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  null);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
70	[BUG]  [BUGGY]  double[]  coeff  =  comparator.comeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.comeff;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.comeff;	      double[]    coeff    =    comparator.coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
71	[BUG]  [BUGGY]  double[]  coeff  =  comparator.coeff,  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.coeff,  coeff;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.coeff,  coeff;	      double[]    coeff    =    comparator.coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
72	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(coeff);	      double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
73	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(simplex);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(simplex);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(simplex);	      double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
74	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPoint();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getPoint();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPoint();	      double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
75	[BUG]  [BUGGY]  double[]  coeff  =  comparator!=  null?  comparator.comparator  :  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator!=  null?  comparator.comparator  :  coeff;  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator!=  null?  comparator.comparator  :  coeff;	      double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
76	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  n);	      double[]    coeff    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
77	[BUG]  [BUGGY]  double[]  coeff  =  xSmallest[0].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  xSmallest[0].getPointRef();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  xSmallest[0].getPointRef();	      double[]    coeff    =    original[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
78	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  n);	      double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
79	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff);	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
80	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(simplex);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(simplex);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(simplex);	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
81	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs();  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeffs();	      final    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
82	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  n);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  n);	      double[]    coeff    =    comparator.getCoeff(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  (int  i  =  1;  i  <  n;  ++i)  {  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  (int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n;    ++i)    {    (int  i  =  1;  i  <  n;  ++i)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
84	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  coeff);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  coeff);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
85	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  simplex);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  simplex);  [BUGGY]    for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  simplex);	      double[]    coeff    =    comparator.compareTo(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
86	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError    [CONTEXT]    final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];    [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n);  [BUGGY]    final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  n);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
