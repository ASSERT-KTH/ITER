projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getComparator();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<N;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=3;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getRealPointValuePair();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff()+1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();if(coeff!=null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();if(coeff==null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){For(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[1].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finalinti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121For(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointValuePair();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator!=null?Double.NaN:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator==null?Double.NaN:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator!=null?Double.NaN:comparator.coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,n=0;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,Double.NaN);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff,coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPoint();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator!=null?comparator.comparator:coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=xSmallest[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeffs();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,n);
