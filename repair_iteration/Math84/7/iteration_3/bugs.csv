bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  khi);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  khi);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  iterateSimplex(original,  khi);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	replace
2	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  iterateSimplex(original,  0);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	replace
3	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  false);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  iterateSimplex(original,  false);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	replace
4	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  true);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  false,  true);	  Comparator    comparator    =    comparator.get(original,    false);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
5	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  false,  0);	  Comparator    comparator    =    comparator.get(original,    false);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
6	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  1.0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  false,  1.0);	  Comparator    comparator    =    comparator.get(original,    false);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
7	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  -  1];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  -  1];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  -  1];	  final    RealPointValuePair    best    =    new    RealPointValuePair[original.length];    	non-compiled	[CE]  incompatible  types	10	None	replace
8	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  +  1];  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  +  1];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  +  1];	  final    RealPointValuePair    best    =    new    RealPointValuePair[original.length];    	non-compiled	[CE]  incompatible  types	10	None	replace
9	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  *  2];  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  *  2];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  new  RealPointValuePair[original.length  *  2];	  final    RealPointValuePair    best    =    new    RealPointValuePair[original.length];    	non-compiled	[CE]  incompatible  types	10	None	replace
10	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(relativeSimplex,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(relativeSimplex,  true);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(relativeSimplex,  true);	  Comparator    comparator    =    comparator.get(original,    true);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
11	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  true,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  true,  false);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  true,  false);	  Comparator    comparator    =    comparator.get(original,    true);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
12	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.size()  ];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.size()  ];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.size()  ];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.size()    ];    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
13	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[compiler.size()  ];  [CE]  cannot  find  symbol  compiler  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[compiler.size()  ];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[compiler.size()  ];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.size()    ];    	non-compiled	[CE]  cannot  find  symbol  compiler	39	None	replace
14	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.size()  ];  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.size()  ];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.size()  ];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.size()    ];    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	39	None	replace
15	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  0;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  original  =  0;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  0;	  final    RealPointValuePair[]    original    =    comparator;    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	37	None	replace
16	[BUG]  [BUGGY]  Final  RealPointValuePair  best  =  original[0];  [CE]  ';'  expected  [FE]          OptimizationException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Final  RealPointValuePair  best  =  original[0];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Final  RealPointValuePair  best  =  original[0];	  final    RealPointValuePair    best    =    original[1];    final    RealPointValuePair    best    =    original[2];    	non-compiled	[CE]  ';'  expected	4	None	replace
17	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
18	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  Final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  ';'  expected  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  Final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    Final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  	non-compiled	[CE]  ';'  expected	32	None	add
19	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(siplex,  1.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(siplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(siplex,  1.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
20	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length];	  final    RealPointValuePair[]    original    =    simplex;    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	28	None	replace
21	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	add
22	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  Final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  ';'  expected  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  Final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    Final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);	  	non-compiled	[CE]  ';'  expected	34	None	add
23	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	add
24	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.1,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.1,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.1,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	add
25	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  2.0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    	compilable	  [FE]  OptimizationException  	35	4	replace
26	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  2.0,  comparator);  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  2.0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    	compilable	  [FE]  OptimizationException  	35	4	replace
27	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator  +  1);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator  +  1);	  final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	35	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    	compilable	  [FE]  AssertionError  	35	4	replace
29	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);  [FE]  AssertionError  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0.0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(original,    1.0,    comparator);    	compilable	  [FE]  AssertionError  	35	4	replace
30	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  gamma;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  original  =  gamma;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  gamma;	  final    RealPointValuePair[]    original    =    khi;    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	30	None	replace
31	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[1],  comparator);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[1],  comparator);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original[1],  comparator);	  final    RealPointValuePair[]    reflectedSimplex    =    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	29	None	replace
32	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex[0],  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex[0],  comparator);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex[0],  comparator);	  final    RealPointValuePair[]    reflectedSimplex    =    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	29	None	replace
33	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[0],  khi);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[0],  khi);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original[0],  khi);	  final    RealPointValuePair[]    reflectedSimplex    =    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	29	None	replace
34	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.toArray(new  RealPointValuePair[simplex.size()  ]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.toArray(new  RealPointValuePair[simplex.size()  ]);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original.toArray(new  RealPointValuePair[simplex.size()  ]);	  final    RealPointValuePair[]    reflectedSimplex    =    simplex.toArray(new    RealPointValuePair[original.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
35	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.toArray(new  RealPointValuePair[original.size()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.toArray(new  RealPointValuePair[original.size()  ]);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original.toArray(new  RealPointValuePair[original.size()  ]);	  final    RealPointValuePair[]    reflectedSimplex    =    simplex.toArray(new    RealPointValuePair[original.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
36	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex[1];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex[1];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex[1];	  final    RealPointValuePair[]    reflectedSimplex    =    original[1];    	non-compiled	[CE]  incompatible  types	11	None	replace
37	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  original[1];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  original[1];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex,  original[1];	  final    RealPointValuePair[]    reflectedSimplex    =    original[1];    	non-compiled	[CE]  ']'  expected	11	None	replace
38	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original,  simplex[0];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original,  simplex[0];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original,  simplex[0];	  final    RealPointValuePair[]    reflectedSimplex    =    simplex,    original[0];    	non-compiled	[CE]  ']'  expected	13	None	replace
39	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[3];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[3];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  new  RealPointValuePair[3];	  final    RealPointValuePair    best    =    new    RealPointValuePair[2];    	non-compiled	[CE]  incompatible  types	9	None	replace
40	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  1);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  1);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  1);	  Comparator    comparator    =    comparator.get(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
41	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  0,  original.length);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  0,  original.length);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  0,  original.length);	  Comparator    comparator    =    comparator.get(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
42	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  1.0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  1.0);	  Comparator    comparator    =    comparator.get(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
43	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length];  [CE]  cannot  find  symbol  best  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  best	1	None	replace
44	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length];  [CE]  cannot  find  symbol  relativeSimplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	1	None	replace
45	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[compiler.length];  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[compiler.length];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[compiler.length];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  compiler	1	None	replace
46	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[3];  [CE]  cannot  find  symbol  best  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[3];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[3];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[2];    	non-compiled	[CE]  cannot  find  symbol  best	7	None	replace
47	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex.length;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex.length;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex.length;	  final    RealPointValuePair[]    reflectedSimplex    =    original.length;    	non-compiled	[CE]  incompatible  types	40	None	replace
48	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.length  -  1;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.length  -  1;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original.length  -  1;	  final    RealPointValuePair[]    reflectedSimplex    =    original.length;    	non-compiled	[CE]  incompatible  types	40	None	replace
49	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.length  +  1;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.length  +  1;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original.length  +  1;	  final    RealPointValuePair[]    reflectedSimplex    =    original.length;    	non-compiled	[CE]  incompatible  types	40	None	replace
50	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator[0];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator[0];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator[0];	  final    RealPointValuePair[]    reflectedSimplex    =    simplex[0];    	non-compiled	[CE]  ']'  expected	12	None	replace
51	[BUG]  [BUGGY]  Final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  ';'  expected  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  ';'  expected	33	None	replace
52	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(new  RealPointValuePair[original.length]);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(new  RealPointValuePair[original.length]);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(new  RealPointValuePair[original.length]);	  Comparator    comparator    =    comparator.get(relativeSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	38	None	replace
53	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  null;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  original  =  null;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  null;	  final    RealPointValuePair[]    original    =    simplex;    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	28	None	replace
54	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  comparator[0],  original);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  comparator[0],  original);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  comparator[0],  original);	  final    RealPointValuePair[]    reflectedSimplex    =    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	29	None	replace
55	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  null);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  false,  null);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  false,  null);	  Comparator    comparator    =    comparator.get(original,    false);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
56	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  true);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  iterateSimplex(original,  true);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	replace
57	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]          OptimizationException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  original[2];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	final  RealPointValuePair  best  =  original[2];	  final    RealPointValuePair    best    =    original[1];    final    RealPointValuePair    best    =    original[2];    	compilable	  [FE]  OptimizationException  	4	3	replace
58	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  original[2];  [FE]  OptimizationException  [FE]          OptimizationException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  original[2];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  original[2];	  final    RealPointValuePair    best    =    original[1];    final    RealPointValuePair    best    =    original[2];    	compilable	  [FE]  OptimizationException  	4	3	replace
59	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator);	  final    RealPointValuePair[]    reflectedSimplex    =    simplex[0];    	non-compiled	[CE]  ';'  expected	12	None	replace
60	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex,  comparator;	  final    RealPointValuePair[]    reflectedSimplex    =    simplex[0];    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
61	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  null);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(original,  null);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  null);	  Comparator    comparator    =    comparator.get(original,    true);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
62	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  str  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  str  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair  str  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
63	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  first  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  first  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair  first  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
64	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  selected  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  selected  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair  selected  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
65	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair[]  original  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair[]  original  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair[]  original  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
66	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  comparator.toArray(new  RealPointValuePair[original.size()  ]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  comparator.toArray(new  RealPointValuePair[original.size()  ]);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  comparator.toArray(new  RealPointValuePair[original.size()  ]);	  final    RealPointValuePair[]    reflectedSimplex    =    simplex.toArray(new    RealPointValuePair[original.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
67	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  initial.length;  [CE]  cannot  find  symbol  initial  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  initial.length;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  initial.length;	  final    RealPointValuePair[]    reflectedSimplex    =    original.length;    	non-compiled	[CE]  cannot  find  symbol  initial	40	None	replace
68	[BUG]  [BUGGY]  if(original!=  null)  {  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[1];  }  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        OptimizationException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(original!=  null)  {  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[1];  }  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(original!=  null)  {  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[1];  }	  final    RealPointValuePair    best    =    original[1];    final    RealPointValuePair    best    =    original[1];    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	3	None	replace
69	[BUG]  [BUGGY]  if(original!=  null)  {  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  best  =  original[1];  }  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          OptimizationException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(original!=  null)  {  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  best  =  original[1];  }  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(original!=  null)  {  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  best  =  original[1];  }	  final    RealPointValuePair    best    =    original[1];    final    RealPointValuePair    best    =    original[1];    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	3	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	compilable	  [FE]  AssertionError  	33	4	replace
71	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0,  comparator);  [FE]  AssertionError  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	compilable	  [FE]  AssertionError  	33	4	replace
72	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(relativeSimplex,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(relativeSimplex,  1.0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(relativeSimplex,  1.0);	  Comparator    comparator    =    comparator.get(relativeSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	38	None	replace
73	[BUG]  [BUGGY]  if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	41	None	replace
74	[BUG]  [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	41	None	replace
75	[BUG]  [BUGGY]  if(original.length  ==  0)  {  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  best;  }  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        OptimizationException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(original.length  ==  0)  {  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  best;  }  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(original.length  ==  0)  {  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  best;  }	  final    RealPointValuePair    best    =    original[1];    final    RealPointValuePair    best    =    original[1];    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	3	None	replace
76	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  original.length;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  original.length;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  originalSimplex  =  original.length;	  final    RealPointValuePair[]    reflectedSimplex    =    original.length;    	non-compiled	[CE]  incompatible  types	40	None	replace
77	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original,  comparator.length;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original,  comparator.length;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original,  comparator.length;	  final    RealPointValuePair[]    reflectedSimplex    =    original.length;    	non-compiled	[CE]  ';'  expected	40	None	replace
78	[BUG]  [BUGGY]  static  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  illegal  start  of  expression  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  static  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	static  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);	  final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
79	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[0],  comparator,  1.0);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[0],  comparator,  1.0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original[0],  comparator,  1.0);	  final    RealPointValuePair[]    reflectedSimplex    =    original[0],    comparator);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
80	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  original[1];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  original[1];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  originalSimplex  =  original[1];	  final    RealPointValuePair[]    reflectedSimplex    =    original[1];    	non-compiled	[CE]  incompatible  types	11	None	replace
81	[BUG]  [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	20	None	replace
82	[BUG]  [BUGGY]  if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	20	None	replace
83	[BUG]  [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	21	None	replace
84	[BUG]  [BUGGY]  if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex!=  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	21	None	replace
85	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.1,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.1,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.1,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
86	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  0.0,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  0.0,  comparator);  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    1.0,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  0.0,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	add
87	[BUG]  [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	24	None	replace
88	[BUG]  [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  }  else  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
89	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length];  [CE]  cannot  find  symbol  best  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length];  [BUGGY]        final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  best	1	None	replace
90	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(new  RealPointValuePair[0]);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(new  RealPointValuePair[0]);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(new  RealPointValuePair[0]);	  Comparator    comparator    =    comparator.get(relativeSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	38	None	replace
91	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(simplex,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  comparator.get(simplex,  true);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(simplex,  true);	  Comparator    comparator    =    comparator.get(original,    true);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
92	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  1.0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  iterateSimplex(original,  1.0);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	replace
93	[BUG]  [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  }  [CE]  cannot  find  symbol  originalSimplex  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;      [BUGGY]  if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	if(originalSimplex  ==  null)  {  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  }	          final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[2];    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	25	None	replace
