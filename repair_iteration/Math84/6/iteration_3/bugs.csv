bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	replace
2	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  simplex);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	replace
3	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	replace
4	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  false);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  false);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	replace
5	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  false);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  false);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simplex,  1.0,  false);	  boolean    gamma    =    comparator.compare(simplex,    1.0,    true);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	26	None	replace
6	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  true);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  true);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  true);	  boolean    gamma    =    comparator.compare(simplex,    1.0,    true);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	26	None	replace
7	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  0.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  0.0,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  0.0,  1.0);	  boolean    gamma    =    comparator.compare(simplex,    0.0,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	18	None	replace
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    	compilable	  [FE]  NullPointerException  	42	4	replace
9	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    	compilable	  [FE]  NullPointerException  	42	4	replace
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  *  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  *  1];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    	compilable	  [FE]  NullPointerException  	42	4	replace
11	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  *  1];  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  *  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  *  1];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    	compilable	  [FE]  NullPointerException  	42	4	replace
12	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  0.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  0.0);	  boolean    gamma    =    comparator.compare(simplex,    1.0,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	17	None	replace
13	[BUG]  [BUGGY]  double  siplex  =  comparator.compare(simplex,  siplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  siplex  =  comparator.compare(simplex,  siplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  siplex  =  comparator.compare(simplex,  siplex);	  double    gamma    =    comparator.compare(simplex,    siplex);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	7	None	replace
14	[BUG]  [BUGGY]  double  siplex  =  comparator.compare(simplex,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  siplex  =  comparator.compare(simplex,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  siplex  =  comparator.compare(simplex,  reflectedSimplex);	  double    gamma    =    comparator.compare(simplex,    siplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	7	None	replace
15	[BUG]  [BUGGY]  double  siplex  =  comparator.compare(simplex,  gamma);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  siplex  =  comparator.compare(simplex,  gamma);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  siplex  =  comparator.compare(simplex,  gamma);	  double    gamma    =    comparator.compare(simplex,    siplex);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	7	None	replace
16	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(simplex,  1.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Double  gamma  =  comparator.compare(simplex,  1.0,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Double  gamma  =  comparator.compare(simplex,  1.0,  1.0);	  double    gamma    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	22	None	replace
17	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  reflectedSimplex);	  double    gamma    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	22	None	replace
18	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  0,  1.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  0,  1.0,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  0,  1.0,  1.0);	  double    gamma    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	22	None	replace
19	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  simplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  simplex);	  double    gamma    =    comparator.compare(simplex,    1.0,    expanded);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	35	None	replace
20	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  gamma);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  gamma);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  gamma);	  double    gamma    =    comparator.compare(simplex,    maximum);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	47	None	replace
21	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[2];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	2	None	add
22	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[2];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	2	None	add
23	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[2];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	2	None	add
24	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[4];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[4];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[2];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[4];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	2	None	add
25	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  0.0,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  0.0,  0.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  0.0,  0.0);	  boolean    gamma    =    comparator.compare(simplex,    0.0,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	16	None	replace
26	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  1.0);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(original,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(original,  1.0);	  double    gamma    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  cannot  find  symbol  original	34	None	replace
27	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(double,  1.0);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(double,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(double,  1.0);	  double    gamma    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  '.class'  expected	34	None	replace
28	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator;  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator;	  Comparator    <    RealPointValuePair>    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
29	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
30	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator();	  Comparator    <    RealPointValuePair>    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
31	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSim);  [CE]  cannot  find  symbol  reflectedSim  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSim);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  reflectedSim);	  double    gamma    =    comparator.compare(simplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	6	None	replace
32	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  posedSimplex);  [CE]  cannot  find  symbol  posedSimplex  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  posedSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  posedSimplex);	  double    gamma    =    comparator.compare(simplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  posedSimplex	6	None	replace
33	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    -    1];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	39	None	add
34	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  Final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  Final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    -    1];    Final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];	  	non-compiled	[CE]  ';'  expected	39	None	add
35	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    -    1];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	39	None	add
36	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  final  RealPointValuePair[]  initial  =  new  RealPointValuePair[simplex.length  -  1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  final  RealPointValuePair[]  initial  =  new  RealPointValuePair[simplex.length  -  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    -    1];    final  RealPointValuePair[]  initial  =  new  RealPointValuePair[simplex.length  -  1];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	39	None	add
37	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  true);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  true);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
38	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  false);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  false);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
39	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
40	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  comparator.getRawComparator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  comparator.getRawComparator();  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator,  comparator.getRawComparator();	  final    RealPointValuePair[]    original    =    comparator.getRawComparator();    	non-compiled	[CE]  ';'  expected	43	None	replace
41	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  size);  [CE]  cannot  find  symbol  size  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  size);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  size);	  double    gamma    =    comparator.compare(simplex,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  size	44	None	replace
42	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  true);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  true);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  true);	  double    gamma    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	4	None	replace
43	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  false,  false);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  false,  false);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator,  false,  false);	  final    RealPointValuePair[]    original    =    comparator.cloneTree();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
44	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(relativeSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(relativeSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(null);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	27	None	replace
45	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(null,  null);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(null,  null);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(null,  null);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(null);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	27	None	replace
46	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[SimpleX.length];  [CE]  cannot  find  symbol  SimpleX  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[SimpleX.length];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[SimpleX.length];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[relativeSimplex.length];    	non-compiled	[CE]  cannot  find  symbol  SimpleX	12	None	replace
47	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[original.length];  [CE]  variable  original  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[original.length];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[original.length];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[relativeSimplex.length];    	non-compiled	[CE]  variable  original  might  not  have  been  initialized	12	None	replace
48	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(relativeSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(relativeSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
49	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(simplex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(simplex,  comparator);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(simplex,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
50	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(this.comparator!=  null)?  this.comparator.getComparator()  :  null;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(this.comparator!=  null)?  this.comparator.getComparator()  :  null;  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =(this.comparator!=  null)?  this.comparator.getComparator()  :  null;	  Comparator    <    RealPointValuePair>    comparator    =    this.comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	37	None	replace
51	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator(simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    this.comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	37	None	replace
52	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(this.comparator!=  null)?  this.comparator  :  this.comparator.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(this.comparator!=  null)?  this.comparator  :  this.comparator.getComparator();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =(this.comparator!=  null)?  this.comparator  :  this.comparator.getComparator();	  Comparator    <    RealPointValuePair>    comparator    =    this.comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	37	None	replace
53	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    -    1];    	compilable	  [FE]  NullPointerException  	40	4	replace
54	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  2];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    -    1];    	compilable	  [FE]  NullPointerException  	40	4	replace
55	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(1);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(1);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(1);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
56	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  1);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator,  1);	  final    RealPointValuePair[]    original    =    comparator,    0);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
57	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  original,  0);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  original,  0);  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  original,  0);	  final    RealPointValuePair[]    original    =    comparator,    0);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
58	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	add
59	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  Final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  Final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    Final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];	  	non-compiled	[CE]  ';'  expected	41	None	add
60	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  2];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	add
61	[BUG]  [BUGGY]  final  RealPointValuePair[]  initial  =  null;  [CE]  cannot  find  symbol  original  [FE]        NullPointerException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  initial  =  null;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  initial  =  null;	  final    RealPointValuePair[]    original    =    null;    final    RealPointValuePair[]    initial    =    null;    	non-compiled	[CE]  cannot  find  symbol  original	38	None	replace
62	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  1.0,  original);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  1.0,  original);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(relativeSimplex,  1.0,  original);	  double    gamma    =    comparator.compare(simplex,    1.0,    original);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	45	None	replace
63	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(simplex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(simplex,  comparator);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(simplex,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
64	[BUG]  [BUGGY]  final  RealPointValuePair[]  initial  =  comparator.getRawComparator();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  initial  =  comparator.getRawComparator();  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  initial  =  comparator.getRawComparator();	  final    RealPointValuePair[]    original    =    comparator.getRawComparator();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
65	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simpleX,  1.0,  0.0);  [CE]  cannot  find  symbol  simpleX  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  boolean  gamma  =  comparator.compare(simpleX,  1.0,  0.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simpleX,  1.0,  0.0);	  boolean    gamma    =    comparator.compare(simplex,    1.0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  simpleX	17	None	replace
66	[BUG]  [BUGGY]  final  RealPointValuePair[]  initial  =  new  RealPointValuePair[0];  [CE]  cannot  find  symbol  original  [FE]        NullPointerException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  initial  =  new  RealPointValuePair[0];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  initial  =  new  RealPointValuePair[0];	  final    RealPointValuePair[]    original    =    null;    final    RealPointValuePair[]    initial    =    null;    	non-compiled	[CE]  cannot  find  symbol  original	38	None	replace
67	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  final  RealPointValuePair[]  initial  =  new  RealPointValuePair[simplex.length  +  1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  final  RealPointValuePair[]  initial  =  new  RealPointValuePair[simplex.length  +  1];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length    +    1];    final  RealPointValuePair[]  initial  =  new  RealPointValuePair[simplex.length  +  1];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	add
68	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflected);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  reflected);	  double    gamma    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	5	None	replace
69	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  1.0,  best);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  1.0,  best);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(relativeSimplex,  1.0,  best);	  double    gamma    =    comparator.compare(simplex,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	44	None	replace
70	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simpleX.length];  [CE]  cannot  find  symbol  simpleX  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simpleX.length];  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simpleX.length];	  final    RealPointValuePair[]    original    =    new    RealPointValuePair[relativeSimplex.length];    	non-compiled	[CE]  cannot  find  symbol  simpleX	12	None	replace
71	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  extended);  [CE]  cannot  find  symbol  extended  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  extended);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  extended);	  double    gamma    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  cannot  find  symbol  extended	33	None	replace
72	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(null,  simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(null,  simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(null,  simplex);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(null);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	27	None	replace
73	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(this);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(this);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(this);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(null);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	27	None	replace
74	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  raw);  [CE]  cannot  find  symbol  raw  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  raw);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  raw);	  double    gamma    =    comparator.compare(simplex,    1.0,    original);    	non-compiled	[CE]  cannot  find  symbol  raw	45	None	replace
75	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(filteredSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(filteredSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(filteredSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
76	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simple,  1.0);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simple,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simple,  1.0);	  double    gamma    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simple	34	None	replace
77	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simpleX,  0.0);  [CE]  cannot  find  symbol  simpleX  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simpleX,  0.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simpleX,  0.0);	  double    gamma    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  cannot  find  symbol  simpleX	30	None	replace
78	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simpleX,  1.0,  1.0);  [CE]  cannot  find  symbol  simpleX  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  boolean  gamma  =  comparator.compare(simpleX,  1.0,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simpleX,  1.0,  1.0);	  boolean    gamma    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simpleX	1	None	replace
79	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[5];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  final  RealPointValuePair[]  original  =  new  RealPointValuePair[5];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    new    RealPointValuePair[2];    final  RealPointValuePair[]  original  =  new  RealPointValuePair[5];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	2	None	add
80	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(filteredSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(filteredSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(filteredSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
81	[BUG]  [BUGGY]  final  RealPointValuePair[]  initial  =  comparator.cloneTree();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  initial  =  comparator.cloneTree();  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  initial  =  comparator.cloneTree();	  final    RealPointValuePair[]    original    =    comparator.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
82	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  false.cloneTree();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  false.cloneTree();  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator,  false.cloneTree();	  final    RealPointValuePair[]    original    =    comparator.cloneTree();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
83	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  total);  [CE]  cannot  find  symbol  total  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  total);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  total);	  double    gamma    =    comparator.compare(simplex,    maximum);    	non-compiled	[CE]  cannot  find  symbol  total	47	None	replace
84	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simulatedSimplex;  [CE]  cannot  find  symbol  simulatedSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  simulatedSimplex;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  simulatedSimplex;	  final    RealPointValuePair[]    original    =    simplifiedx;    	non-compiled	[CE]  cannot  find  symbol  simulatedSimplex	25	None	replace
85	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  SimplePointValuePair[0];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  SimplePointValuePair[0];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  SimplePointValuePair[0];	  final    RealPointValuePair[]    original    =    Simplex;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
86	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator(this);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator(this);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator(this);	  Comparator    <    RealPointValuePair>    comparator    =    this.comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	37	None	replace
87	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simpleX,  1.0,  true);  [CE]  cannot  find  symbol  simpleX  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  boolean  gamma  =  comparator.compare(simpleX,  1.0,  true);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simpleX,  1.0,  true);	  boolean    gamma    =    comparator.compare(simplex,    1.0,    true);    	non-compiled	[CE]  cannot  find  symbol  simpleX	26	None	replace
88	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  best);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  best);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(relativeSimplex,  best);	  double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	31	None	replace
89	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simpleX,  1.0,  1.0);  [CE]  cannot  find  symbol  simpleX  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simpleX,  1.0,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simpleX,  1.0,  1.0);	  double    gamma    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simpleX	22	None	replace
90	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  expanded);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  expanded);	  double    gamma    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  expanded	22	None	replace
91	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparator);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
92	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(relativeSimplex,  1.0,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(relativeSimplex,  1.0,  reflectedSimplex);	  double    gamma    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	23	None	replace
93	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  reflected);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  reflected);	  double    gamma    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	23	None	replace
94	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  true,  simplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  true,  simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simplex,  1.0,  true,  simplex);	  boolean    gamma    =    comparator.compare(simplex,    1.0,    true);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	26	None	replace
95	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  filteredSimplex);  [CE]  cannot  find  symbol  filteredSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  filteredSimplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  filteredSimplex);	  double    gamma    =    comparator.compare(simplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  filteredSimplex	6	None	replace
96	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(0).compareTo(realPointValuePair);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(0).compareTo(realPointValuePair);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(0).compareTo(realPointValuePair);	  Comparator    <    RealPointValuePair>    comparator    =    getComparator(0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
97	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  mappedSimplex;  [CE]  cannot  find  symbol  mappedSimplex  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  mappedSimplex;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  mappedSimplex;	  final    RealPointValuePair[]    original    =    uniquex;    	non-compiled	[CE]  cannot  find  symbol  mappedSimplex	46	None	replace
98	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  SimplePointValuePair[1];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  new  SimplePointValuePair[1];  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  SimplePointValuePair[1];	  final    RealPointValuePair[]    original    =    Simplex;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
99	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  SimplePointValuePair;  [CE]  cannot  find  symbol  SimplePointValuePair  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  SimplePointValuePair;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  SimplePointValuePair;	  final    RealPointValuePair[]    original    =    Simplex;    	non-compiled	[CE]  cannot  find  symbol  SimplePointValuePair	24	None	replace
100	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
101	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplifiedSimplex;  [CE]  cannot  find  symbol  simplifiedSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  simplifiedSimplex;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  simplifiedSimplex;	  final    RealPointValuePair[]    original    =    simplifiedx;    	non-compiled	[CE]  cannot  find  symbol  simplifiedSimplex	25	None	replace
102	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  original);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  original);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  1.0,  original);	  double    gamma    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  original	22	None	replace
103	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator.cloneRealPointValuePair();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator.cloneRealPointValuePair();  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator.cloneRealPointValuePair();	  final    RealPointValuePair[]    original    =    comparator.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
104	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator.clone();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator.clone();  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator.clone();	  final    RealPointValuePair[]    original    =    comparator.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
105	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  getComparator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  getComparator();  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator,  getComparator();	  final    RealPointValuePair[]    original    =    comparator.getRawComparator();    	non-compiled	[CE]  ';'  expected	43	None	replace
106	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator.comparator;  [CE]  cannot  find  symbol  comparator  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  final  RealPointValuePair[]  original  =  comparator.comparator;  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator.comparator;	  final    RealPointValuePair[]    original    =    comparator.getRawComparator();    	non-compiled	[CE]  cannot  find  symbol  comparator	43	None	replace
107	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getParent();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getParent();  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getParent();	  Comparator    <    RealPointValuePair>    comparator    =    this.comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	37	None	replace
108	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(original);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	replace
109	[BUG]  [BUGGY]  double  siplex  =  comparator.compare(simplex,  best);  [CE]  cannot  find  symbol  best  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  double  siplex  =  comparator.compare(simplex,  best);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  siplex  =  comparator.compare(simplex,  best);	  double    gamma    =    comparator.compare(simplex,    siplex);    	non-compiled	[CE]  cannot  find  symbol  best	7	None	replace
110	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(simplex,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Double  gamma  =  comparator.compare(simplex,  0.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Double  gamma  =  comparator.compare(simplex,  0.0);	  double    gamma    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	30	None	replace
111	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(simplex,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  Double  gamma  =  comparator.compare(simplex,  1.0);  [BUGGY]      final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Double  gamma  =  comparator.compare(simplex,  1.0);	  double    gamma    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	34	None	replace
112	[BUG]  [BUGGY]  if(original!=  null)  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  }  [CE]  cannot  find  symbol  original  [FE]          NullPointerException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  if(original!=  null)  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	if(original!=  null)  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  }	  final    RealPointValuePair[]    original    =    null;    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  original	9	None	replace
113	[BUG]  [BUGGY]  if(original!=  null)  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  }  [CE]  cannot  find  symbol  original  [FE]            NullPointerException      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();        [BUGGY]  if(original!=  null)  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  }  [BUGGY]      final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	if(original!=  null)  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  }	  final    RealPointValuePair[]    original    =    null;    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  original	9	None	replace
