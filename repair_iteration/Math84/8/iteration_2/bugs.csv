bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length];  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  reflected	3	None	replace
2	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length  -  1];  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length  -  1];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length  -  1];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  reflected	3	None	replace
3	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	17	None	replace
4	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original;  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original;  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original;	      final    RealPointValuePair[]    reflectedSimplex    =    simplex;    	non-compiled	[CE]  cannot  find  symbol  reflected	13	None	replace
5	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
6	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
7	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
8	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
9	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
10	[BUG]  [BUGGY]  Comparator  comparator  =  best.get(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  comparator  =  best.get(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.get(original);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
11	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  comparator  =  iterateSimplex(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  iterateSimplex(original);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
12	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  comparator  =  best.compare(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(original);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
13	[BUG]  [BUGGY]  Comparator  comparator  =  best.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  comparator  =  best.getComparator();  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.getComparator();	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
14	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.iterate();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.iterate();  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.iterate();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
15	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterate();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterate();  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterate();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
16	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate();  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
17	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(original);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
18	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.create();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.create();  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.create();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.create();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
19	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare();  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.create();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
20	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.create();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
21	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[2];  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[2];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  reflected	2	None	replace
22	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[3];  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[3];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[3];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  reflected	2	None	replace
23	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[4];  [CE]  cannot  find  symbol  reflected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[4];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[4];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
24	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	add
25	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	add
26	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);	  	non-compiled	[CE]  ';'  expected	14	None	add
27	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	10	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	compilable	  [FE]  AssertionError  	10	3	replace
29	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	compilable	  [FE]  AssertionError  	10	3	replace
30	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	8	None	replace
31	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(original);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
32	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  best);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  best);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
33	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	6	None	replace
34	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	6	None	replace
35	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	6	None	replace
36	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  unique,  best);  [CE]  cannot  find  symbol  unique  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  unique,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  unique,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  unique	6	None	replace
37	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	11	None	replace
38	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	11	None	replace
39	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	11	None	replace
40	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  khi);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	11	None	replace
41	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.get(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <?>  comparator  =  best.get(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.get(original);	      Comparator    <?>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
42	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  iterateSimplex(original);	      Comparator    <?>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
43	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <?>  comparator  =  best.compare(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(original);	      Comparator    <?>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
44	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	9	None	add
45	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	9	None	add
46	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);	  	non-compiled	[CE]  ';'  expected	9	None	add
47	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  best);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  best);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
48	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(relative,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(relative,  best);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(relative,  best);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
49	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparator);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
50	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	15	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	compilable	  [FE]  AssertionError  	15	3	replace
52	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	compilable	  [FE]  AssertionError  	15	3	replace
53	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	add
54	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	add
55	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	  	non-compiled	[CE]  ';'  expected	7	None	add
56	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  best);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  best);	      Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
57	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0);	      Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
58	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true);	      Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
59	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gamma,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gamma,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	11	None	replace
60	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  iterateSimplex);  [CE]  cannot  find  symbol  iterateSimplex  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  iterateSimplex);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  iterateSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  iterateSimplex	11	None	replace
61	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparison);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  comparison);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	compilable	  [FE]  AssertionError  	17	2	replace
63	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	compilable	  [FE]  AssertionError  	17	2	replace
64	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator;  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator;	      Comparator    <    RealPointValuePair>    comparator    =    comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
65	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  getComparator().get(original);	      Comparator    <?>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
66	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);	  	non-compiled	[CE]  ';'  expected	16	None	add
67	[BUG]  [BUGGY]  Comparator  comparator  =  best.comparator;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  comparator  =  best.comparator;  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.comparator;	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
68	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length  +  1];  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length  +  1];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length  +  1];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  reflected	3	None	replace
69	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  khi);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  khi);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  khi);	      Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
70	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	15	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	compilable	  [FE]  AssertionError  	10	4	replace
72	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	compilable	  [FE]  AssertionError  	10	4	replace
73	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(relativeSimplex);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(relativeSimplex);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
74	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator();  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.getComparator();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.create();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
75	[BUG]  [BUGGY]  Comparator  comparator  =  best.compareTo(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  comparator  =  best.compareTo(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compareTo(original);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
76	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original);  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(original);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	compilable	  [FE]  AssertionError  	17	3	replace
78	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	compilable	  [FE]  AssertionError  	17	3	replace
79	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.comparator;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  Comparator  <?>  comparator  =  best.comparator;  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.comparator;	      Comparator    <?>    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
80	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [CE]  cannot  find  symbol  reflected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
81	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	6	None	replace
82	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	11	None	replace
83	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  first);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  first);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  first	11	None	replace
84	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];      [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [BUGGY]    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  reflected	2	None	replace
