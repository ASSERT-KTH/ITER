bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  comparator,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  comparator,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	33	None	replace
2	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	33	None	replace
3	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  top,  comparator);  [CE]  cannot  find  symbol  top  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  top,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  top,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator);    	non-compiled	[CE]  cannot  find  symbol  top	33	None	replace
4	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    Final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	55	None	replace
5	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  best,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  best,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  best,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	30	None	replace
6	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	30	None	replace
7	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  original,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  original,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	30	None	replace
8	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  reflectedSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    khi);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	40	None	replace
9	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original,  khi);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    khi);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	40	None	replace
10	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  expanded);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  expanded);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    khi);    	non-compiled	[CE]  cannot  find  symbol  expanded	40	None	replace
11	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  best);	  Comparator    <    RealPointValuePair>    comparator    =    iterate(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
12	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  true);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  true);	  Comparator    <    RealPointValuePair>    comparator    =    iterate(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
13	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best);	  Comparator    <    RealPointValuePair>    comparator    =    iterate(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
14	[BUG]  [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	54	None	replace
15	[BUG]  [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	54	None	replace
16	[BUG]  [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  1.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	54	None	replace
17	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  original);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	48	None	replace
18	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  reflectedSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	48	None	replace
19	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  0);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	48	None	replace
20	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compare(original,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(original,  1.0);	  Comparator    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
21	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compare(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(original,  0);	  Comparator    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
22	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compare(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(original,  false);	  Comparator    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
23	[BUG]  [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  ';'  expected	44	None	replace
24	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  -  1];  [CE]  cannot  find  symbol  reflected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  -  1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  -  1];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[original.length];    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
25	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  +  1];  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  +  1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  +  1];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[original.length];    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
26	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[original.length];  [CE]  cannot  find  symbol  reflected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[original.length];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[original.length];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[original.length];    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
27	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  *  2];  [CE]  cannot  find  symbol  reflected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  *  2];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[original.length  *  2];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[original.length];    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
28	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	39	None	replace
29	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma,  khi);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	39	None	replace
30	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma,  iterateSimplex);  [CE]  cannot  find  symbol  iterateSimplex  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma,  iterateSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best,  comparator,  gamma,  iterateSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  iterateSimplex	39	None	replace
31	[BUG]  [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	45	None	replace
32	[BUG]  [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	45	None	replace
33	[BUG]  [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  ';'  expected	45	None	replace
34	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
35	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original  +  1);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original  +  1);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(original  +  1);	  Comparator    <    RealPointValuePair>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
36	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  false);	  Comparator    <    RealPointValuePair>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
37	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  false);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    true);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	58	None	replace
38	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  false);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    true);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	58	None	replace
39	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  true,  false);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    true);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	58	None	replace
40	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	71	None	add
41	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	71	None	add
42	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.1,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.1,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.1,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	71	None	add
43	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);	  	non-compiled	[CE]  ';'  expected	71	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    	compilable	  [FE]  AssertionError  	72	4	replace
45	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    	compilable	  [FE]  AssertionError  	72	4	replace
46	[BUG]  [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	25	None	replace
47	[BUG]  [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  ';'  expected	25	None	replace
48	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  gamma,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  gamma,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  gamma,  khi);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    khi);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	70	None	replace
49	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    khi);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	70	None	replace
50	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  khi);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    khi);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	70	None	replace
51	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  g2,  khi);  [CE]  cannot  find  symbol  g2  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  g2,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  g2,  khi);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    khi);    	non-compiled	[CE]  cannot  find  symbol  g2	70	None	replace
52	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  best,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  best,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  best,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	3	None	replace
53	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  original,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  original,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	3	None	replace
54	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	3	None	replace
55	[BUG]  [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    Final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  ';'  expected	26	None	replace
56	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  original);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
57	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
58	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original,  1.0);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	compilable	  [FE]  AssertionError  	9	3	replace
60	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	compilable	  [FE]  AssertionError  	9	3	replace
61	[BUG]  [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  simplex,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  simplex,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  simplex,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    unique,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	36	None	replace
63	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  expanded,  best);  [CE]  cannot  find  symbol  expanded  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  expanded,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  expanded,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    unique,    best);    	non-compiled	[CE]  cannot  find  symbol  expanded	36	None	replace
64	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	77	None	add
65	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  6.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  6.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  6.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	77	None	add
66	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	77	None	add
67	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);	  	non-compiled	[CE]  ';'  expected	77	None	add
68	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	62	None	add
69	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  8.0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  8.0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	62	None	add
70	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);	  	non-compiled	[CE]  ';'  expected	62	None	add
71	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(original);	  Comparator    <    RealPointValuePair>    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	74	None	replace
72	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterator();  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterator();	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
73	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.get();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.get();  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator.get();	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
74	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  best,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  best,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  best,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	27	None	replace
75	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  original,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  original,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	27	None	replace
76	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	27	None	replace
77	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  reflectedSimplex,  comparator);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  reflectedSimplex,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  reflectedSimplex,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    khi,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	38	None	replace
78	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  khi,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  khi,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  khi,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    khi,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	38	None	replace
79	[BUG]  [BUGGY]  Comparator  comparator  =  best.get(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.get(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.get(simplex);	  Comparator    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
80	[BUG]  [BUGGY]  Comparator  comparator  =  best.get(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.get(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.get(original,  false);	  Comparator    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
81	[BUG]  [BUGGY]  Comparator  comparator  =  best.get(comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.get(comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.get(comparator);	  Comparator    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
82	[BUG]  [BUGGY]  Comparator  comparator  =  best.getComparator(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.getComparator(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.getComparator(simplex);	  Comparator    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
83	[BUG]  [BUGGY]  Comparator  comparator  =  best.getComparator(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.getComparator(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.getComparator(original);	  Comparator    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
84	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  double);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  double);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  double);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    first);    	non-compiled	[CE]  '.class'  expected	83	None	replace
85	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  second);  [CE]  cannot  find  symbol  second  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  second);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  second);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    first);    	non-compiled	[CE]  cannot  find  symbol  second	83	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	compilable	  [FE]  AssertionError  	53	3	replace
87	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  5.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	compilable	  [FE]  AssertionError  	53	3	replace
88	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  original.length);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  original.length);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  original.length);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	29	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  khi,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  khi,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    	compilable	  [FE]  AssertionError  	29	3	replace
90	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  khi,  comparator);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  khi,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  khi,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    	compilable	  [FE]  AssertionError  	29	3	replace
91	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	29	None	replace
92	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	29	None	replace
93	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compiler;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compiler;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compiler;	  Comparator    <?>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
94	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compat;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compat;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compat;	  Comparator    <?>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
95	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length  -  1];  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length  -  1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length  -  1];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  reflected	2	None	replace
96	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  1);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  1);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  1);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	57	None	replace
97	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  1.0);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	57	None	replace
98	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  original.length);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  original.length);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  original.length);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	57	None	replace
99	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.get(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.get(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.get(simplex);	  Comparator    <?>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
100	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.get(comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.get(comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.get(comparator);	  Comparator    <?>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
101	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.get(original  +  1);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.get(original  +  1);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.get(original  +  1);	  Comparator    <?>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
102	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  iterateSimplex(original,  best);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
103	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  khi);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  khi);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  iterateSimplex(original,  khi);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
104	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  true);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  iterateSimplex(original,  true);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
105	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  best);	  Comparator    <    RealPointValuePair>    comparator    =(Comparator)iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
106	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  khi);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  khi);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  khi);	  Comparator    <    RealPointValuePair>    comparator    =(Comparator)iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
107	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  true);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  true);	  Comparator    <    RealPointValuePair>    comparator    =(Comparator)iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
108	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex();  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex();	  Comparator    <    RealPointValuePair>    comparator    =    iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	replace
109	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate().comparator;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate().comparator;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate().comparator;	  Comparator    <    RealPointValuePair>    comparator    =    iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	replace
110	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  g2,  comparator);  [CE]  cannot  find  symbol  g2  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  g2,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  g2,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  g2	59	None	replace
111	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  blue,  comparator);  [CE]  cannot  find  symbol  blue  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  blue,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  blue,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  blue	59	None	replace
112	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];	  final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  reflected	80	None	replace
113	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];	  final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  reflected	80	None	replace
114	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  best,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  best,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  best,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
115	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  original,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  original,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
116	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
117	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
118	[BUG]  [BUGGY]  Comparator  comparator  =  best.compareTo(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compareTo(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compareTo(original,  false);	  Comparator    comparator    =    best.compareTo(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	75	None	replace
119	[BUG]  [BUGGY]  Comparator  comparator  =  best.compareTo(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compareTo(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compareTo(simplex);	  Comparator    comparator    =    best.compareTo(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	75	None	replace
120	[BUG]  [BUGGY]  Comparator  comparator  =  best.compareTo(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compareTo(original,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compareTo(original,  1.0);	  Comparator    comparator    =    best.compareTo(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	75	None	replace
121	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    original,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	81	None	replace
122	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  best,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  best,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  best,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    original,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	81	None	replace
123	[BUG]  [BUGGY]  Comparator  comparator  =(Comparator)best.comparator;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =(Comparator)best.comparator;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =(Comparator)best.comparator;	  Comparator    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	67	None	replace
124	[BUG]  [BUGGY]  Comparator  comparator  =  new  Comparator(original.comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  new  Comparator(original.comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  new  Comparator(original.comparator);	  Comparator    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	67	None	replace
125	[BUG]  [BUGGY]  Comparator  comparator  =  new  Comparator(best.comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  new  Comparator(best.comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  new  Comparator(best.comparator);	  Comparator    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	67	None	replace
126	[BUG]  [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  ';'  expected	6	None	replace
127	[BUG]  [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  8.0,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  8.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	6	None	replace
128	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  original,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  original,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  original,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	37	None	replace
129	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  reflectedSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	37	None	replace
130	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  reflectedSimplex,  gamma);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  reflectedSimplex,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  reflectedSimplex,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	37	None	replace
131	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  expanded);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  expanded);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol  expanded	37	None	replace
132	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(original,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  iterateSimplex(original,  best);	  Comparator    <?>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	42	None	replace
133	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  iterate(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  iterate(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  iterate(original);	  Comparator    <?>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	42	None	replace
134	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(original,  true);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  iterateSimplex(original,  true);	  Comparator    <?>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	42	None	replace
135	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(original,  false);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
136	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(original,  1.0);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
137	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  true);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(original,  true);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
138	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(original);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
139	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator();  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator();	  Comparator    <    RealPointValuePair>    comparator    =    best.compare();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
140	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareWith(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareWith(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compareWith(original);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
141	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.7,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	51	None	add
142	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.7,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.7,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.7,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.7,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	51	None	add
143	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.7,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);	  	non-compiled	[CE]  ';'  expected	51	None	add
144	[BUG]  [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    Final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  ';'  expected	66	None	replace
145	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  gamma);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  gamma);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  gamma);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    khi);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	69	None	replace
146	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  gamma,  khi);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  gamma,  khi);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  gamma,  khi);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    khi);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	69	None	replace
147	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  khi,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  khi,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  khi,  best);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    khi);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	69	None	replace
148	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(original,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  getComparator().get(original,  best);	  Comparator    <?>    comparator    =    getComparator().get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
149	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  getComparator().get(simplex);	  Comparator    <?>    comparator    =    getComparator().get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
150	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  getComparator().compare(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  getComparator().compare(original,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  getComparator().compare(original,  best);	  Comparator    <?>    comparator    =    getComparator().get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
151	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	47	None	replace
152	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  original);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	47	None	replace
153	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  1.0);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	47	None	replace
154	[BUG]  [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    	non-compiled	[CE]  ';'  expected	7	None	replace
155	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  1.0);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	76	None	replace
156	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	76	None	replace
157	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  false);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  false);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	76	None	replace
158	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparator);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	49	None	replace
159	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex,  best);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    best);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	35	None	replace
160	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  bluma);  [CE]  cannot  find  symbol  bluma  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  bluma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  bluma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    best);    	non-compiled	[CE]  cannot  find  symbol  bluma	35	None	replace
161	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compat;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compat;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compat;	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	64	None	replace
162	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compiler;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compiler;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compiler;	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	64	None	replace
163	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	82	None	replace
164	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  g2,  best);  [CE]  cannot  find  symbol  g2  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  g2,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  g2,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    best);    	non-compiled	[CE]  cannot  find  symbol  g2	82	None	replace
165	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  best;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  best;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  best;	  final    RealPointValuePair[]    reflectedSimplex    =    original;    	non-compiled	[CE]  incompatible  types	4	None	replace
166	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	28	None	add
167	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	28	None	add
168	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);	  	non-compiled	[CE]  ';'  expected	28	None	add
169	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compareTo(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compareTo(relativeSimplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compareTo(relativeSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.compareTo(relativeSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	73	None	replace
170	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compareTo(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compareTo(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compareTo(original);	  Comparator    <    RealPointValuePair>    comparator    =    best.compareTo(relativeSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	73	None	replace
171	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.compareTo(relativeSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	73	None	replace
172	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  unique);  [CE]  cannot  find  symbol  unique  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  unique);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  unique);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    iterateSimplex);    	non-compiled	[CE]  cannot  find  symbol  unique	60	None	replace
173	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  true);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  true);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  true);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    iterateSimplex);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	60	None	replace
174	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  bluma);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  bluma);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  bluma);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	56	None	replace
175	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  comparison);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(original,  comparison);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
176	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  original);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
177	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  comparison);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  comparison);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
178	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length  +  1];  [CE]  cannot  find  symbol  reflected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length  +  1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[simplex.length  +  1];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length    +    1];    	non-compiled	[CE]  cannot  find  symbol  reflected	68	None	replace
179	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =    iterate(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
180	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  iterateSimplex(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  iterateSimplex(original,  0);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
181	[BUG]  [BUGGY]  Comparator  comparator  =  iterate(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  iterate(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  iterate(original);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
182	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compare(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(simplex);	  Comparator    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
183	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compare(simplex,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(simplex,  best);	  Comparator    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
184	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	76	None	replace
185	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  best);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	76	None	replace
186	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.getComparator(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	74	None	replace
187	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  0);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	57	None	replace
188	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  global);  [CE]  cannot  find  symbol  global  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  global);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  global);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    iterateSimplex);    	non-compiled	[CE]  cannot  find  symbol  global	60	None	replace
189	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.comparison;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.comparison;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.comparison;	  Comparator    <?>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
190	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  khi,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
191	[BUG]  [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  ';'  expected	54	None	replace
192	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterate(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterate(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator.iterate(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
193	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relativeSimplex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relativeSimplex,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relativeSimplex,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparator);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	49	None	replace
194	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	37	None	replace
195	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator,  khi,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator,  khi,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator,  khi,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	37	None	replace
196	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  g2,  gamma);  [CE]  cannot  find  symbol  g2  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  g2,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  g2,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol  g2	37	None	replace
197	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original.doubleValue());  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original.doubleValue());  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original.doubleValue());	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
198	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    khi);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	70	None	replace
199	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  simplex,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  simplex,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  simplex,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    original,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	34	None	replace
200	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  unique,  comparator);  [CE]  cannot  find  symbol  unique  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  unique,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  unique,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  unique	34	None	replace
201	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compare(simplex,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(simplex,  comparator);	  Comparator    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
202	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length  -  1];  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length  -  1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length  -  1];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	2	None	replace
203	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(realPointValuePair);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  getComparator().get(realPointValuePair);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  getComparator().get(realPointValuePair);	  Comparator    <?>    comparator    =    getComparator().get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    	compilable	  [FE]  AssertionError  	29	3	replace
205	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    	compilable	  [FE]  AssertionError  	29	3	replace
206	[BUG]  [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	45	None	replace
207	[BUG]  [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  return;  }  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  return;  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  return;  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	45	None	replace
208	[BUG]  [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
209	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compareTo(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  comparator.compareTo(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  comparator.compareTo(original);	  Comparator    comparator    =    best.compareTo(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	75	None	replace
210	[BUG]  [BUGGY]  Comparator  comparator  =  best.compareTo(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compareTo(relativeSimplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compareTo(relativeSimplex);	  Comparator    comparator    =    best.compareTo(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	75	None	replace
211	[BUG]  [BUGGY]  Comparator  comparator  =  best.comparator?  comparator  :  null;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.comparator?  comparator  :  null;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.comparator?  comparator  :  null;	  Comparator    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	67	None	replace
212	[BUG]  [BUGGY]  Comparator  comparator  =  new  Comparator(best.comparator,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  new  Comparator(best.comparator,  true);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  new  Comparator(best.comparator,  true);	  Comparator    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	67	None	replace
213	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gamma,  comparator,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gamma,  comparator,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gamma,  comparator,  reflectedSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    khi);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	40	None	replace
214	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	71	None	add
215	[BUG]  [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	6	None	replace
216	[BUG]  [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  return;  }  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  return;  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  return;  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	6	None	replace
217	[BUG]  [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(comparator!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
218	[BUG]  [BUGGY]  Comparator  comparator  =  best.get(locale);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.get(locale);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.get(locale);	  Comparator    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
219	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length  +  1];  [CE]  cannot  find  symbol  relativeSimplex  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length  +  1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[relativeSimplex.length  +  1];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[simplex.length    +    1];    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	68	None	replace
220	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  top,  comparator,  gamma);  [CE]  cannot  find  symbol  top  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  top,  comparator,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  top,  comparator,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  top	39	None	replace
221	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  comparator,  gamma);  [CE]  cannot  find  symbol  first  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  comparator,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  comparator,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  first	39	None	replace
222	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator,  gamma,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator,  gamma,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  khi,  comparator,  gamma,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	82	None	replace
223	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  size);  [CE]  cannot  find  symbol  size  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  size);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  size);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    first);    	non-compiled	[CE]  cannot  find  symbol  size	83	None	replace
224	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  best,  comparator);  [CE]  cannot  find  symbol  first  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  best,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  best,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator);    	non-compiled	[CE]  cannot  find  symbol  first	33	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.8,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.8,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.7,    comparator);    	compilable	  [FE]  AssertionError  	52	3	replace
226	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.8,  comparator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.8,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.8,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.7,    comparator);    	compilable	  [FE]  AssertionError  	52	3	replace
227	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.get(locale);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.get(locale);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.get(locale);	  Comparator    <?>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
228	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  null);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  null);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  null);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	48	None	replace
229	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(comparator);	  Comparator    <    RealPointValuePair>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
230	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
231	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gs,  comparator);  [CE]  cannot  find  symbol  gs  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gs,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  gs,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  gs	59	None	replace
232	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(simplex,  best);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
233	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(simplex);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
234	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(original,  0);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
235	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  gamma);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(original,  gamma);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(original,  gamma);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
236	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparison;  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparison;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparison;	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	64	None	replace
237	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =(Comparator)iterateSimplex(original,  0);	  Comparator    <    RealPointValuePair>    comparator    =(Comparator)iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
238	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relativeSimplex,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relativeSimplex,  comparison);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relativeSimplex,  comparison);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
239	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    Final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	26	None	replace
240	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    Final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  ';'  expected	26	None	replace
241	[BUG]  [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    	non-compiled	[CE]  ';'  expected	8	None	replace
242	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex,  original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(simplex,  original);	  Comparator    <?>    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	43	None	replace
243	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  iterateSimplex(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  iterateSimplex(simplex);	  Comparator    <?>    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	42	None	replace
244	[BUG]  [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	24	None	replace
245	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  else  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  else  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  else  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	24	None	replace
246	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	replace
247	[BUG]  [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	replace
248	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	7	None	replace
249	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[4];  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[4];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[4];	  final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[4];    	non-compiled	[CE]  cannot  find  symbol  reflected	23	None	replace
250	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  original,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  original,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  original,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	3	None	replace
251	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  khi,  iterateSimplex);  [CE]  cannot  find  symbol  iterateSimplex  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  khi,  iterateSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  khi,  iterateSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    khi);    	non-compiled	[CE]  cannot  find  symbol  iterateSimplex	40	None	replace
252	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	44	None	replace
253	[BUG]  [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	44	None	replace
254	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	44	None	replace
255	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
256	[BUG]  [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
257	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    6.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	8	None	replace
258	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  6.0,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	30	None	replace
259	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(relativeSimplex,  1.0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(relativeSimplex,  1.0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(relativeSimplex,  1.0);	  Comparator    <    RealPointValuePair>    comparator    =    best.compareTo(relativeSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	73	None	replace
260	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  normalized,  best);  [CE]  cannot  find  symbol  normalized  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  normalized,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  normalized,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    unique,    best);    	non-compiled	[CE]  cannot  find  symbol  normalized	36	None	replace
261	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  original,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  original,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  original,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	27	None	replace
262	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  final  RealPointValuePair  mirrored  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0,  comparator);  final  RealPointValuePair  mirrored  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0,    comparator);    final  RealPointValuePair  mirrored  =  evaluateNewSimplex(original,  0,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	28	None	add
263	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  iterateSimplex);  [CE]  cannot  find  symbol  iterateSimplex  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  iterateSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  iterateSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol  iterateSimplex	37	None	replace
264	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  first);  [CE]  cannot  find  symbol  first  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  first);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  first);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol  first	37	None	replace
265	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  second);  [CE]  cannot  find  symbol  second  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  second);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  gamma,  second);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    khi,    gamma);    	non-compiled	[CE]  cannot  find  symbol  second	37	None	replace
266	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(this);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(this);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compareTo(this);	  Comparator    <    RealPointValuePair>    comparator    =    best.iterate();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	14	None	replace
267	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  comparison);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  comparison);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
268	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  compiler);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  compiler);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.get(original,  compiler);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.get(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
269	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  0,  best);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    0);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	57	None	replace
270	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
271	[BUG]  [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
272	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	5	None	replace
273	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.comparator(original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.comparator(original);	  Comparator    <    RealPointValuePair>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	31	None	replace
274	[BUG]  [BUGGY]  Comparator  comparator  =(Comparator)best.clone();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =(Comparator)best.clone();  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =(Comparator)best.clone();	  Comparator    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	67	None	replace
275	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  iterateSimplex(best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  iterateSimplex(best);	  Comparator    comparator    =    iterateSimplex(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
276	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  new  Comparator  <  Object>(best.comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  new  Comparator  <  Object>(best.comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  new  Comparator  <  Object>(best.comparator);	  Comparator    <?>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
277	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  new  Comparator  <  Object>(original.comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  new  Comparator  <  Object>(original.comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  new  Comparator  <  Object>(original.comparator);	  Comparator    <?>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
278	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.compare(simplex,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.compare(simplex,  comparator);	  Comparator    <?>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
279	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  reflectedSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
280	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  true);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  true);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
281	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  original,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  original,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  original,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	39	None	replace
282	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original.cloneTree());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original.cloneTree());  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  original.cloneTree());	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    best);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
283	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  comparator);  [CE]  cannot  find  symbol  first  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  first,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    best,    comparator);    	non-compiled	[CE]  cannot  find  symbol  first	33	None	replace
284	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  first);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  first);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(simplex,  first);	  Comparator    <    RealPointValuePair>    comparator    =    best.compare(simplex,    comparator);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	49	None	replace
285	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compare(simplex,  original);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compare(simplex,  original);	  Comparator    comparator    =    best.compare(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
286	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  original;  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  original;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  original;	  final    RealPointValuePair[]    reflectedSimplex    =    original;    	non-compiled	[CE]  cannot  find  symbol  reflected	4	None	replace
287	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  best;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  best;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  best;	  final    RealPointValuePair[]    reflectedSimplex    =    original;    	non-compiled	[CE]  incompatible  types	4	None	replace
288	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  simplex;  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  simplex;  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair[]  originalSimplex  =  simplex;	  final    RealPointValuePair[]    reflectedSimplex    =    original;    	non-compiled	[CE]  cannot  find  symbol  reflected	4	None	replace
289	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	54	None	replace
290	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	54	None	replace
291	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }  else  {  Comparator  <  RealPointValuePair>  comp  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }  else  {  Comparator  <  RealPointValuePair>  comp  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  4.0,  comparator);  }  else  {  Comparator  <  RealPointValuePair>  comp	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  ';'  expected	54	None	replace
292	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	25	None	replace
293	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	25	None	replace
294	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	25	None	replace
295	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  8.0,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    8.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	63	None	replace
296	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  comparison);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  comparison);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	48	None	replace
297	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  dima);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  dima);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(relative,  dima);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	48	None	replace
298	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    Final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	26	None	replace
299	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  khi,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	35	None	replace
300	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex);	  Comparator    <    RealPointValuePair>    comparator    =    iterate(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
301	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex,  best);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterate(simplex,  best);	  Comparator    <    RealPointValuePair>    comparator    =    iterate(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
302	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  uniqueIterateSimplex);  [CE]  cannot  find  symbol  uniqueIterateSimplex  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  uniqueIterateSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma,  uniqueIterateSimplex);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator,    gamma,    iterateSimplex);    	non-compiled	[CE]  cannot  find  symbol  uniqueIterateSimplex	60	None	replace
303	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  khi,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  khi,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  original,  khi,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    original,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	34	None	replace
304	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	6	None	replace
305	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	6	None	replace
306	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  7.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    7.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	6	None	replace
307	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.1,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	72	None	replace
308	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.7,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.7,    comparator);    final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.1,  comparator);	  	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	51	None	add
309	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	53	None	replace
310	[BUG]  [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	53	None	replace
311	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	53	None	replace
312	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  new  Comparator  <  RealPointValuePair>(best.comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  new  Comparator  <  RealPointValuePair>(best.comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  new  Comparator  <  RealPointValuePair>(best.comparator);	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	64	None	replace
313	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  new  Comparator  <  RealPointValuePair>(original.comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  new  Comparator  <  RealPointValuePair>(original.comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  new  Comparator  <  RealPointValuePair>(original.comparator);	  Comparator    <    RealPointValuePair>    comparator    =    best.comparator;    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	64	None	replace
314	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	45	None	replace
315	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	45	None	replace
316	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }  else  {  final  RealPointValuePair  reflects  =  evaluateNewSimplex(original,  0.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    final    RealPointValuePair    reflects    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	45	None	replace
317	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  best,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  best,  0);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original,  best,  0);	  Comparator    <    RealPointValuePair>    comparator    =    iterateSimplex(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	56	None	replace
318	[BUG]  [BUGGY]  Comparator  <?>  comparator  =  best.get(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  <?>  comparator  =  best.get(relativeSimplex);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  <?>  comparator  =  best.get(relativeSimplex);	  Comparator    <?>    comparator    =    best.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
319	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  original,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  original,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  original,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.5,    best);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
320	[BUG]  [BUGGY]  Comparator  comparator  =  best.compareTo(relativeValue);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compareTo(relativeValue);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compareTo(relativeValue);	  Comparator    comparator    =    best.compareTo(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	75	None	replace
321	[BUG]  [BUGGY]  Comparator  comparator  =  best.compareTo(comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  Comparator  comparator  =  best.compareTo(comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	Comparator  comparator  =  best.compareTo(comparator);	  Comparator    comparator    =    best.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	replace
322	[BUG]  [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best  ==  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	9	None	replace
323	[BUG]  [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(best!=  null)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  variable  reflected  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	9	None	replace
324	[BUG]  [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [CE]  cannot  find  symbol  relative  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];        [BUGGY]  if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	if(relative)  {  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  }	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    7.0,    comparator);    final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    4.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	9	None	replace
