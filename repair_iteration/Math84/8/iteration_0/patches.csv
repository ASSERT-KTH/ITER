bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[1];  [CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[1];  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[1];		non-compiled	[CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
2	[BUG]  [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[0];  [CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[0];  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[0];		non-compiled	[CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
3	[BUG]  [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length];  [CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length];  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length];		non-compiled	[CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
4	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original);  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    Comparator  <  RealPointValuePair>  comparator  =  comparator.get(original);		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
5	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.iterate();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.iterate();  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    Comparator  <  RealPointValuePair>  comparator  =  comparator.iterate();		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
6	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  best);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	15	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
8	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
10	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
11	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	15	None	replace
12	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original);  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original);		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
13	[BUG]  [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  simplex;  [CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    final  RealPointValuePair[]  reflectedSimplex  =  simplex;  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    final  RealPointValuePair[]  reflectedSimplex  =  simplex;		non-compiled	[CE]  variable  reflectedSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
15	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.5,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
17	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  7.0,  comparator);	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  	compilable	  [FE]  AssertionError  	15	3	replace
18	[BUG]  [BUGGY]    Comparator  comparator  =  comparator.get(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    Comparator  comparator  =  comparator.get(original);  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    Comparator  comparator  =  comparator.get(original);		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
19	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(simplex,  best);  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(simplex,  best);		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
20	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.create();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.create();  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    Comparator  <  RealPointValuePair>  comparator  =  comparator.create();		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
21	[BUG]  [BUGGY]    Comparator  <?>  comparator  =  comparator.get(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];    [BUGGY]    Comparator  <?>  comparator  =  comparator.get(original);  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	    Comparator  <?>  comparator  =  comparator.get(original);		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	16	None	add
