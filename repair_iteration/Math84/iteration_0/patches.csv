bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    double  khi  =  evaluateNewSimplex(best,  gamma,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]    double  khi  =  evaluateNewSimplex(best,  gamma,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	    double  khi  =  evaluateNewSimplex(best,  gamma,  comparator);		non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	18	None	add
2	[BUG]  [BUGGY]    double  khi  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  incompatible  types  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]    double  khi  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	    double  khi  =  evaluateNewSimplex(original,  1.0,  comparator);		non-compiled	[CE]  incompatible  types	18	None	add
3	[BUG]  [BUGGY]    double  khi  =  best.doubleValue();  [CE]  cannot  find  symbol  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]    double  khi  =  best.doubleValue();  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	    double  khi  =  best.doubleValue();		non-compiled	[CE]  cannot  find  symbol	18	None	add
4	[BUG]  [BUGGY]    double  khi  =  evaluateNewSimplex(best,  1.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]    double  khi  =  evaluateNewSimplex(best,  1.0,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	    double  khi  =  evaluateNewSimplex(best,  1.0,  comparator);		non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	18	None	add
5	[BUG]  [BUGGY]    double  khi  =  evaluateNewSimplex(original,  gamma,  comparator);  [CE]  incompatible  types  [CONTEXT]  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]    double  khi  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	    double  khi  =  evaluateNewSimplex(original,  gamma,  comparator);		non-compiled	[CE]  incompatible  types	18	None	add
11	[BUG]  [BUGGY]    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  incompatible  types  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  [BUGGY]    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(original,  1.0,  comparator);		non-compiled	[CE]  incompatible  types	14	None	add
13	[BUG]  [BUGGY]    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(1.0,  khi,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  [BUGGY]    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(1.0,  khi,  comparator);  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(1.0,  khi,  comparator);		non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	14	None	add
14	[BUG]  [BUGGY]    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  incompatible  types  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  [BUGGY]    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	    final  RealPointValuePair[]  khi  =  evaluateNewSimplex(original,  0.5,  comparator);		non-compiled	[CE]  incompatible  types	14	None	add
