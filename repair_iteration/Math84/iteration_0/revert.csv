projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74doublekhi=evaluateNewSimplex(best,gamma,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74doublekhi=evaluateNewSimplex(original,1.0,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74doublekhi=best.doubleValue();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74doublekhi=evaluateNewSimplex(best,1.0,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74doublekhi=evaluateNewSimplex(original,gamma,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java70
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java70finalRealPointValuePair[]khi=evaluateNewSimplex(original,1.0,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java70doublekhi=Math.random();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java70finalRealPointValuePair[]khi=evaluateNewSimplex(1.0,khi,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java70finalRealPointValuePair[]khi=evaluateNewSimplex(original,0.5,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java70finalRealPointValuePair[]khi=evaluateNewSimplex(1.0,comparator);
