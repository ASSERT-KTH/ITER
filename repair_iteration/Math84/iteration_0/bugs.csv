bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] public MultiDirectional() { [FE] AssertionError testMinimizeMaximize [CONTEXT] [BUGGY] public MultiDirectional() { [BUGGY] this.khi = 2.0; this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	45	45	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] [BUGGY] [BUGGY] public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	45	45	2	add	
3	[BUG] [BUGGY] this.khi = 2.0; [FE] AssertionError testMinimizeMaximize [CONTEXT] public MultiDirectional() { [BUGGY] this.khi = 2.0; [BUGGY] this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	46	46	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] public MultiDirectional() { [BUGGY] [BUGGY] this.khi = 2.0; this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	46	46	2	add	
5	[BUG] [BUGGY] this.gamma = 0.5; [FE] AssertionError testMinimizeMaximize [CONTEXT] public MultiDirectional() { this.khi = 2.0; [BUGGY] this.gamma = 0.5; [BUGGY] } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	47	47	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] public MultiDirectional() { this.khi = 2.0; [BUGGY] [BUGGY] this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	47	47	2	add	
7	[BUG] [BUGGY] } [FE] AssertionError testMinimizeMaximize [CONTEXT] public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; [BUGGY] } [BUGGY]  [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	48	48	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; [BUGGY] [BUGGY] } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	48	48	2	add	
9	[BUG] [BUGGY] incrementIterationsCounter(); [FE] AssertionError testMinimizeMaximize [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { [BUGGY] incrementIterationsCounter(); [BUGGY]   final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {   [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { [BUGGY] [BUGGY] incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {   [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	
11	[BUG] [BUGGY] final RealPointValuePair[] original = simplex; [FE] AssertionError testMinimizeMaximize [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  [BUGGY] final RealPointValuePair[] original = simplex; [BUGGY] final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) { [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  [BUGGY] [BUGGY] final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) { [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	
13	[BUG] [BUGGY] final RealPointValuePair best = original[0]; [FE] AssertionError testMinimizeMaximize [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; [BUGGY] final RealPointValuePair best = original[0]; [BUGGY]   final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; [BUGGY] [BUGGY] final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	
15	[BUG] [BUGGY] final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [FE] AssertionError testMinimizeMaximize [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  [BUGGY] final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [BUGGY] if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; }  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  [BUGGY] [BUGGY] final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; }  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	
17	[BUG] [BUGGY] if (comparator.compare(reflected, best) < 0) { [FE] AssertionError testMinimizeMaximize [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [BUGGY] if (comparator.compare(reflected, best) < 0) { [BUGGY]   final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [BUGGY] [BUGGY] if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	add	
19	[BUG] [BUGGY] final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); [FE] AssertionError testMinimizeMaximize [CONTEXT] if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; }  [BUGGY] final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); [BUGGY] if (comparator.compare(contracted, best) < 0) {   return; } } } [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError testMinimizeMaximize [CONTEXT] if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; }  [BUGGY] [BUGGY] final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); if (comparator.compare(contracted, best) < 0) {   return; } } } [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	add	
