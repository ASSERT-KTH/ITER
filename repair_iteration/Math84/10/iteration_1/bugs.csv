bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  expanded,  comparator);  [CE]  cannot  find  symbol  expanded  [FE]    AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  expanded,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  expanded,  comparator);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	non-compiled	[CE]  cannot  find  symbol  expanded	19	None	replace
2	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  comparator);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	19	None	replace
3	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	19	None	replace
4	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  comparator);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	19	None	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  contracted  [FE]            AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	  	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	non-compiled	[CE]  cannot  find  symbol  contracted	19	None	replace
6	[BUG]  [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    if(simplex!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
7	[BUG]  [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    if(simplex!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
8	[BUG]  [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    if(simplex!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
9	[BUG]  [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    if(simplex!=  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    if(simplex!=  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
10	[BUG]  [BUGGY]    Comparator  comparator  =  comparator.compare(simplex,  expanded);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    Comparator  comparator  =  comparator.compare(simplex,  expanded);  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    Comparator  comparator  =  comparator.compare(simplex,  expanded);		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	add
11	[BUG]  [BUGGY]    if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
12	[BUG]  [BUGGY]    if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
13	[BUG]  [BUGGY]    double  gamma  =  reflectedSimplex.doubleValue();  [CE]  cannot  find  symbol  reflectedSimplex  [FE]        AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    double  gamma  =  reflectedSimplex.doubleValue();  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    double  gamma  =  reflectedSimplex.doubleValue();		non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	20	None	add
14	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  comparator);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	19	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	add	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	compilable	  [FE]  AssertionError  	19	3	replace
16	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	compilable	  [FE]  AssertionError  	19	3	replace
17	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  original,  comparator);  [CE]  cannot  find  symbol  locale  [FE]        AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  original,  comparator);  [BUGGY]  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  original,  comparator);	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  	non-compiled	[CE]  cannot  find  symbol  locale	19	None	replace
18	[BUG]  [BUGGY]    RealPointValuePair  best  =  comparator.compare(simplex,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    RealPointValuePair  best  =  comparator.compare(simplex,  expanded);  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    RealPointValuePair  best  =  comparator.compare(simplex,  expanded);		non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	add
19	[BUG]  [BUGGY]    double  gamma  =  comparator.compare(simplex,  best);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    double  gamma  =  comparator.compare(simplex,  best);  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    double  gamma  =  comparator.compare(simplex,  best);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	20	None	add
20	[BUG]  [BUGGY]    double  gamma  =  comparator.compare(simplex,  best)  <  0;  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    double  gamma  =  comparator.compare(simplex,  best)  <  0;  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    double  gamma  =  comparator.compare(simplex,  best)  <  0;		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	20	None	add
21	[BUG]  [BUGGY]    Comparator  comparator  =  comparator.compare(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    Comparator  comparator  =  comparator.compare(simplex,  best);  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    Comparator  comparator  =  comparator.compare(simplex,  best);		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	add
22	[BUG]  [BUGGY]    double  gamma  =  comparator.compare(simplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError  [CONTEXT]  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }    [BUGGY]    double  gamma  =  comparator.compare(simplex);  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	    double  gamma  =  comparator.compare(simplex);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	20	None	add
