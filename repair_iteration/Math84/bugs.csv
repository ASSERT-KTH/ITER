bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] public MultiDirectional() { [FE] AssertionError [CONTEXT] [BUGGY] public MultiDirectional() { [BUGGY] this.khi = 2.0; this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	45	45	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	45	45	2	add	
3	[BUG] [BUGGY] this.khi = 2.0; [FE] AssertionError [CONTEXT] public MultiDirectional() { [BUGGY] this.khi = 2.0; [BUGGY] this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	46	46	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultiDirectional() { [BUGGY] [BUGGY] this.khi = 2.0; this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	46	46	2	add	
5	[BUG] [BUGGY] this.gamma = 0.5; [FE] AssertionError [CONTEXT] public MultiDirectional() { this.khi = 2.0; [BUGGY] this.gamma = 0.5; [BUGGY] } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	47	47	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultiDirectional() { this.khi = 2.0; [BUGGY] [BUGGY] this.gamma = 0.5; } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	47	47	2	add	
7	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; [BUGGY] } [BUGGY]  [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	48	48	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; [BUGGY] [BUGGY] } [CLASS] MultiDirectional [METHOD] <init> [RETURN_TYPE] MultiDirectional()  [VARIABLES] double gamma khi boolean  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	48	48	2	add	
9	[BUG] [BUGGY] incrementIterationsCounter(); [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { [BUGGY] incrementIterationsCounter(); [BUGGY]   final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {   [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { [BUGGY] [BUGGY] incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {   [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	
11	[BUG] [BUGGY] final RealPointValuePair[] original = simplex; [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  [BUGGY] final RealPointValuePair[] original = simplex; [BUGGY] final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) { [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  [BUGGY] [BUGGY] final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) { [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	
13	[BUG] [BUGGY] final RealPointValuePair best = original[0]; [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; [BUGGY] final RealPointValuePair best = original[0]; [BUGGY]   final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; [BUGGY] [BUGGY] final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	
15	[BUG] [BUGGY] final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [FE] AssertionError [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  [BUGGY] final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [BUGGY] if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; }  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  [BUGGY] [BUGGY] final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; }  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	73	73	2	add	
17	[BUG] [BUGGY] if (comparator.compare(reflected, best) < 0) { [FE] AssertionError [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [BUGGY] if (comparator.compare(reflected, best) < 0) { [BUGGY]   final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] while (true) { incrementIterationsCounter();  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); [BUGGY] [BUGGY] if (comparator.compare(reflected, best) < 0) {  final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	add	
19	[BUG] [BUGGY] final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); [FE] AssertionError [CONTEXT] if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; }  [BUGGY] final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); [BUGGY] if (comparator.compare(contracted, best) < 0) {   return; } } } [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; }  [BUGGY] [BUGGY] final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); if (comparator.compare(contracted, best) < 0) {   return; } } } [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	add	
21	[BUG] [BUGGY] if (comparator.compare(contracted, best) < 0) { [FE] AssertionError [CONTEXT]  simplex = reflectedSimplex; } return; }  final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); [BUGGY] if (comparator.compare(contracted, best) < 0) { [BUGGY]    return; } } } [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  simplex = reflectedSimplex; } return; }  final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); [BUGGY] [BUGGY] if (comparator.compare(contracted, best) < 0) {   return; } } } [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	add	
24	[BUG] [BUGGY] final double[] xSmallest = original[0].getPointRef(); [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { [BUGGY] final double[] xSmallest = original[0].getPointRef(); [BUGGY] final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	
25	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { [BUGGY] [BUGGY] final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	add	
26	[BUG] [BUGGY] final int n = xSmallest.length; [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); [BUGGY] final int n = xSmallest.length; [BUGGY]   simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	
27	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); [BUGGY] [BUGGY] final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	
28	[BUG] [BUGGY] simplex = new RealPointValuePair[n + 1]; [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  [BUGGY] simplex = new RealPointValuePair[n + 1]; [BUGGY] simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	
29	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  [BUGGY] [BUGGY] simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	
30	[BUG] [BUGGY] simplex[0] = original[0]; [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; [BUGGY] simplex[0] = original[0]; [BUGGY] for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }   [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	
31	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; [BUGGY] [BUGGY] simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }   [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	
32	[BUG] [BUGGY] for (int i = 1; i <= n; ++i) { [FE] AssertionError [CONTEXT] final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; [BUGGY] for (int i = 1; i <= n; ++i) { [BUGGY] final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	
33	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; [BUGGY] [BUGGY] for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	
34	[BUG] [BUGGY] final double[] xOriginal= original[i].getPointRef(); [FE] AssertionError [CONTEXT] final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { [BUGGY] final double[] xOriginal= original[i].getPointRef(); [BUGGY] final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0]; [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	replace	
35	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { [BUGGY] [BUGGY] final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0]; [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	122	122	2	add	
36	[BUG] [BUGGY] final double[] xTransformed = new double[n]; [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); [BUGGY] final double[] xTransformed = new double[n]; [BUGGY] for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0];  [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	123	123	2	replace	
37	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); [BUGGY] [BUGGY] final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0];  [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	123	123	2	add	
38	[BUG] [BUGGY] for (int j = 0; j < n; ++j) { [FE] AssertionError [CONTEXT] final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; [BUGGY] for (int j = 0; j < n; ++j) { [BUGGY] xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	124	124	2	replace	
39	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; [BUGGY] [BUGGY] for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	124	124	2	add	
40	[BUG] [BUGGY] xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); [FE] AssertionError [CONTEXT] final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { [BUGGY] xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); [BUGGY] } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	125	125	2	replace	
41	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { [BUGGY] [BUGGY] xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	125	125	2	add	
42	[BUG] [BUGGY] simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); [FE] AssertionError [CONTEXT]  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } [BUGGY] simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); [BUGGY] }  evaluateSimplex(comparator); return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	127	127	2	replace	
43	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } [BUGGY] [BUGGY] simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	127	127	2	add	
44	[BUG] [BUGGY] evaluateSimplex(comparator); [FE] AssertionError [CONTEXT] for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  [BUGGY] evaluateSimplex(comparator); [BUGGY] return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	131	131	2	replace	
45	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 1; i <= n; ++i) { final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  [BUGGY] [BUGGY] evaluateSimplex(comparator); return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	131	131	2	add	
46	[BUG] [BUGGY] return simplex[0]; [FE] AssertionError [CONTEXT] final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); [BUGGY] return simplex[0]; [BUGGY]  } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	132	132	2	replace	
47	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] xOriginal= original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }  evaluateSimplex(comparator); [BUGGY] [BUGGY] return simplex[0]; } [CLASS] MultiDirectional [METHOD] evaluateNewSimplex [RETURN_TYPE] RealPointValuePair  RealPointValuePair[] original final double coeff RealPointValuePair> comparator [VARIABLES] boolean double[] xOriginal xSmallest xTransformed double coeff gamma khi RealPointValuePair[] original int i j n Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	132	132	2	add	
48	[BUG] [BUGGY] final RealPointValuePair[] reflectedSimplex = simplex; [FE] AssertionError [CONTEXT]  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  [BUGGY] final RealPointValuePair[] reflectedSimplex = simplex; [BUGGY] final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; }  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.4082482904638631	77	77	2	replace	
49	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0];  final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) {  [BUGGY] [BUGGY] final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) {  simplex = reflectedSimplex; } return; }  [CLASS] MultiDirectional [METHOD] iterateSimplex [RETURN_TYPE] void  RealPointValuePair> comparator [VARIABLES] RealPointValuePair best contracted expanded reflected boolean double gamma khi RealPointValuePair[] original reflectedSimplex Comparator comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.4082482904638631	77	77	2	add	
