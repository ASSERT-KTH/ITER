bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  simplex[0]  =  comparator  -  original[0],  coeff);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  -  original[0],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  -  original[0],  coeff);	  simplex[0]    =    coeff    -    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	42	None	replace
2	[BUG]  [BUGGY]  simplex[0]  =  comparator  -  coeff[0],  coeff);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  -  coeff[0],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  -  coeff[0],  coeff);	  simplex[0]    =    coeff    -    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	42	None	replace
3	[BUG]  [BUGGY]  simplex[0]  =  coeff  -  original[0],  comparator,  false);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  -  original[0],  comparator,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  -  original[0],  comparator,  false);	  simplex[0]    =    coeff    -    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	42	None	replace
4	[BUG]  [BUGGY]  simplex[0]  =  coeff  /  original[0],  comparator);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  /  original[0],  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  /  original[0],  comparator);	  simplex[0]    =    coeff    -    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	42	None	replace
5	[BUG]  [BUGGY]  SimplePointValuePair  original[0]  =  coeff;  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair  original[0]  =  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair  original[0]  =  coeff;	  simplex[1]    =    original[1];    SimplePointValuePair    original[0]    =    coeff;    	non-compiled	[CE]  ']'  expected	75	None	replace
6	[BUG]  [BUGGY]  SimplePointValuePair  original[1]  =  coeff;  [CE]  ']'  expected  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair  original[1]  =  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair  original[1]  =  coeff;	  simplex[1]    =    original[1];    SimplePointValuePair    original[0]    =    coeff;    	non-compiled	[CE]  ']'  expected	75	None	replace
7	[BUG]  [BUGGY]  double[]  coeff  =  original[1];  SimplePointValuePair  original[0]  =  coeff;  [CE]  ']'  expected  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  original[1];  SimplePointValuePair  original[0]  =  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  original[1];  SimplePointValuePair  original[0]  =  coeff;	  simplex[1]    =    original[1];    SimplePointValuePair    original[0]    =    coeff;    	non-compiled	[CE]  ']'  expected	75	None	replace
8	[BUG]  [BUGGY]  simplex[1]  =  coeff,  comparator;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff,  comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff,  comparator;	  simplex[0]    =    coeff,    comparator;    	non-compiled	[CE]  ';'  expected	25	None	replace
9	[BUG]  [BUGGY]  simplex[0]  =  coeff.comparator;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff.comparator;	  simplex[0]    =    comparator.comparator;    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
10	[BUG]  [BUGGY]  simplex[0]  =  comparator.getComparator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.getComparator();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.getComparator();	  simplex[0]    =    comparator.comparator;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
11	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
12	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
13	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(n,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
14	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original,  coeff[0]);  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original,  coeff[0]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original,  coeff[0]);	  simplex[0]    =    comparator.equals(coeff,    original[0]);    	non-compiled	[CE]  array  required,  but  double  found	95	None	replace
15	[BUG]  [BUGGY]  Simplex[0]  =  comparator.equals(original,  coeff[0]);  [CE]  cannot  find  symbol  Simplex  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Simplex[0]  =  comparator.equals(original,  coeff[0]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Simplex[0]  =  comparator.equals(original,  coeff[0]);	  simplex[0]    =    comparator.equals(coeff,    original[0]);    	non-compiled	[CE]  cannot  find  symbol  Simplex	95	None	replace
16	[BUG]  [BUGGY]  SimpleX[0]  =  comparator.equals(original,  coeff[0]);  [CE]  cannot  find  symbol  SimpleX  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimpleX[0]  =  comparator.equals(original,  coeff[0]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimpleX[0]  =  comparator.equals(original,  coeff[0]);	  simplex[0]    =    comparator.equals(coeff,    original[0]);    	non-compiled	[CE]  cannot  find  symbol  SimpleX	95	None	replace
17	[BUG]  [BUGGY]  SimplePointValuePair  original[1]  =  original[0];  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair  original[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair  original[1]  =  original[0];	  simplex[1]    =    original[0];    SimplePointValuePair    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	80	None	replace
18	[BUG]  [BUGGY]  SimplePointValuePair  original[0]  =  original[0];  [CE]  ']'  expected  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair  original[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair  original[0]  =  original[0];	  simplex[1]    =    original[0];    SimplePointValuePair    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	80	None	replace
19	[BUG]  [BUGGY]  SimplePointValuePair  original[]  =  original[0];  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair  original[]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair  original[]  =  original[0];	  simplex[1]    =    original[0];    SimplePointValuePair    original[1]    =    original[0];    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
20	[BUG]  [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  [CE]  ']'  expected  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];	  simplex[1]    =    original[0];    SimplePointValuePair    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	80	None	replace
21	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  original[1].getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  original[1].getCoef();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
22	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator[0].getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator[0].getCoef();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
23	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	20	None	replace
24	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	20	None	replace
25	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  0,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  0,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  0,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	20	None	replace
26	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	20	None	replace
27	[BUG]  [BUGGY]  simplex[0]  =  new  RealPointValuePair(original[0],  coeff,  comparator);  [CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>)  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  new  RealPointValuePair(original[0],  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  new  RealPointValuePair(original[0],  coeff,  comparator);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff);    	non-compiled	[CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>)	96	None	replace
28	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair(coeff[0],  original);  [CE]  array  required,  but  double  found  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair(coeff[0],  original);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair(coeff[0],  original);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff);    	non-compiled	[CE]  array  required,  but  double  found	96	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[1]  =  original[1];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
30	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[1];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[1]  =  original[1];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[2]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[2]  =  original[1];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
32	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[2]  =  original[1];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[2]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[2]  =  original[1];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
34	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[1];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
36	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[1];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[0];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
38	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[0];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	32	2	add
39	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.getCoeff(coeff);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
40	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(),  coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(),  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.getCoeff(),  coeff;	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
41	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  0,  coeff);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  0,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  0,  coeff);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    0,    n);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
42	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  n  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  n  +  1);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    0,    n);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
43	[BUG]  [BUGGY]  Simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  n);  [CE]  cannot  find  symbol  Simplex  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  n);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    0,    n);    	non-compiled	[CE]  cannot  find  symbol  Simplex	70	None	replace
44	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  original[1].getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  original[1].getCoeff();	  double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	5	None	replace
45	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getPointRef(),  comparator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  original[1].getPointRef(),  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  original[1].getPointRef(),  comparator);	  double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  ';'  expected	5	None	replace
46	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator[0].getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator[0].getCoeff();	  double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	6	None	replace
47	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator[0].getRealPointValuePair();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator[0].getRealPointValuePair();	  double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	6	None	replace
48	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original[0],  coeff,  comparator);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original[0],  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original[0],  coeff,  comparator);	  simplex[0]    =    comparator.equals(original[0],    coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,Comparator<RealPointValuePair>)	16	None	replace
49	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original[0],  coeff,  gamma);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,double)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original[0],  coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original[0],  coeff,  gamma);	  simplex[0]    =    comparator.equals(original[0],    coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,double)	16	None	replace
50	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original[0],  coeff,  n);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,int)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original[0],  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original[0],  coeff,  n);	  simplex[0]    =    comparator.equals(original[0],    coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,int)	16	None	replace
51	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original[0],  xSmallest[0],  coeff);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,double)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original[0],  xSmallest[0],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original[0],  xSmallest[0],  coeff);	  simplex[0]    =    comparator.equals(original[0],    coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair,double,double)	16	None	replace
52	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[n].getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[n].getCoeff();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	72	None	replace
53	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[n].getRealPointValuePair();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[n].getRealPointValuePair();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	72	None	replace
54	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getValueRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[n].getValueRef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[n].getValueRef();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	72	None	replace
55	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(original,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(original,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(original,  coeff);	  double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
56	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest);	  double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
57	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(original,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(original,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(original,  n);	  double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
58	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  original);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  original);	  double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
59	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];	  simplex[1]    =    original[1];    simplex[1]    =    original[1];    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
60	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[0];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  new  SimplePointValuePair[0];	  simplex[1]    =    original[1];    simplex[1]    =    original[1];    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
61	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  true,  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
62	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false,  n  +  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
63	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  n,  gamma);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  n,  gamma);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false,  n,  gamma);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
64	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(original,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(original,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(original,  n);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	64	None	replace
65	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(origin,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(origin,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(origin,  n);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	64	None	replace
66	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  gamma);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  gamma);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  gamma);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	64	None	replace
67	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  coeff,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  coeff,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false,  coeff,  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	54	None	replace
68	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  true,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	54	None	replace
69	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  null);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  null);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
70	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  gamma);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  gamma);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[1]  =  original[1];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	30	2	add
72	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[1]  =  original[1];  simplex[1]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[1]  =  original[1];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	30	2	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	30	2	add
74	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	30	2	add
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	30	2	add
76	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	30	2	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	30	2	add
78	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[1];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	30	2	add
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	30	2	add
80	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[1];  simplex[0]  =  original[1];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	30	2	add
81	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.evaluate(xSmallest,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	51	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[1]  =  original[1];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[1]  =  original[1];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
83	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[1]  =  original[1];  simplex[2]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[1]  =  original[1];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[1]  =  original[1];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	38	2	add
85	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[2]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	38	2	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[2]  =  original[1];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[2]  =  original[1];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
87	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[2]  =  original[1];  simplex[2]  =  original[1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[2]  =  original[1];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[2]  =  original[1];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	38	2	add
89	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	38	2	add
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[1];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[1];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
91	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[1];  simplex[2]  =  original[1];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[1];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[1];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
92	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  n,  coeff);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluate(xSmallest,  n,  coeff);	  simplex[0]    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
93	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluate(xSmallest,  coeff);	  simplex[0]    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
94	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  n  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluate(xSmallest,  n  +  1);	  simplex[0]    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
96	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
98	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
100	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
102	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];  simplex[2]  =  original[0];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
103	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  simplex[1]  =  original[0];  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    SimplePointValuePair  original[1]  =  original[0];  simplex[1]  =  original[0];	  	non-compiled	[CE]  ']'  expected	7	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[0]    =    original[1];    simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	55	2	add
105	[BUG]  [BUGGY]  simplex[0]  =  original[1];  simplex[0]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	55	2	add
106	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  calculateNewSimplex(xSmallest,  coeff,  comparator);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  calculateNewSimplex(xSmallest,  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair[]  original  =  calculateNewSimplex(xSmallest,  coeff,  comparator);	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
107	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
108	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  comparator.evaluate(xSmallest,  coeff,  n);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  comparator.evaluate(xSmallest,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair[]  original  =  comparator.evaluate(xSmallest,  coeff,  n);	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
109	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
110	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[0].getCoeff();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	24	None	replace
111	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[0].getRealPointValuePair();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	24	None	replace
112	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[1].getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[1].getCoef();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	76	None	replace
113	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[0].getCoef();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	76	None	replace
114	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[0].getCoef(),  comparator);	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  ';'  expected	76	None	replace
115	[BUG]  [BUGGY]  simplex[1]  =  coeff;  simplex[2]  =  original[0];  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff;  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff;  simplex[2]  =  original[0];	  simplex[1]    =    original[0];    simplex[2]    =    original[0];    	non-compiled	[CE]  incompatible  types	10	None	replace
116	[BUG]  [BUGGY]  simplex[1]  =  original[0];  xSmallest[2]  =  original[0];  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  original[0];  xSmallest[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  original[0];  xSmallest[2]  =  original[0];	  simplex[1]    =    original[0];    simplex[2]    =    original[0];    	non-compiled	[CE]  incompatible  types	10	None	replace
117	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
118	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
119	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
120	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  null);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  null);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
121	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  null);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  null);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
122	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  null);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  null);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
123	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  null);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  null);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
124	[BUG]  [BUGGY]  SimplePointValuePair[]  original[1]  =  original[0];  [CE]  ']'  expected  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original[1]  =  original[0];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	11	None	replace
125	[BUG]  [BUGGY]  simplex[1]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[1];  [CE]  ']'  expected  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	11	None	replace
126	[BUG]  [BUGGY]  SimplePointValuePair[]  original[0]  =  original[0];  [CE]  ']'  expected  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original[0]  =  original[0];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	11	None	replace
127	[BUG]  [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[1];  [CE]  ']'  expected  [FE]                  NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	11	None	replace
128	[BUG]  [BUGGY]  simplex[0]  =  comparator  -  original[0],  coeff;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  -  original[0],  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  -  original[0],  coeff;	  simplex[0]    =    comparator    -    original[0];    	non-compiled	[CE]  ';'  expected	73	None	replace
129	[BUG]  [BUGGY]  simplex[0]  =  comparator  /  original[0];  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  /  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  /  original[0];	  simplex[0]    =    comparator    -    original[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
130	[BUG]  [BUGGY]  simplex[0]  =  comparator  -  original[1];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  -  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  -  original[1];	  simplex[0]    =    comparator    -    original[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	73	None	replace
131	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  comparator);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  comparator);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    n,    coeff);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
132	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  comparator);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  comparator);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    n,    coeff);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
133	[BUG]  [BUGGY]  simplex[0]  =  coeff  /  original[1];  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  /  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  /  original[1];	  simplex[0]    =    coeff    /    original[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	41	None	replace
134	[BUG]  [BUGGY]  simplex[0]  =  coeff  *  original[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  *  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  *  original[0];	  simplex[0]    =    coeff    /    original[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	41	None	replace
135	[BUG]  [BUGGY]  simplex[0]  =  coeff  /  comparator[0];  [CE]  array  required,  but  Comparator<RealPointValuePair>  found  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  /  comparator[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  /  comparator[0];	  simplex[0]    =    coeff    /    original[0];    	non-compiled	[CE]  array  required,  but  Comparator<RealPointValuePair>  found	41	None	replace
136	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(original,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	68	None	replace
137	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(original,  n);	  final    double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	68	None	replace
138	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
139	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
140	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(origin,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(origin,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(origin,  n);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
141	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(n,  coeff);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
142	[BUG]  [BUGGY]  simplex[0]  =  comparator,  xSmallest;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator,  xSmallest;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator,  xSmallest;	  simplex[0]    =    comparator,    coeff;    	non-compiled	[CE]  ';'  expected	15	None	replace
143	[BUG]  [BUGGY]  simplex[1]  =  comparator,  coeff;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  comparator,  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  comparator,  coeff;	  simplex[0]    =    comparator,    coeff;    	non-compiled	[CE]  ';'  expected	15	None	replace
144	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[0],  coeff);  [CE]  no  suitable  method  found  for  equals(double,double)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[0],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest[0],  coeff);	  simplex[0]    =    comparator.equals(xSmallest[0]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double,double)	79	None	replace
145	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[1]);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[1]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest[1]);	  simplex[0]    =    comparator.equals(xSmallest[0]);    	non-compiled	[CE]  incompatible  types	79	None	replace
146	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  xSmallest[0]);  [CE]  no  suitable  method  found  for  equals(double[],double)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  xSmallest[0]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest,  xSmallest[0]);	  simplex[0]    =    comparator.equals(xSmallest[0]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double[],double)	79	None	replace
147	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  coeff);  [CE]  no  suitable  method  found  for  equals(double[],double)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest,  coeff);	  simplex[0]    =    comparator.equals(xSmallest[0]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double[],double)	79	None	replace
148	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	47	None	replace
149	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  true);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	47	None	replace
150	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  true);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	47	None	replace
151	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	21	None	replace
152	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  false);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	21	None	replace
153	[BUG]  [BUGGY]  simplex[0]  =  coeff  -  comparator[0];  [CE]  array  required,  but  Comparator<RealPointValuePair>  found  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  -  comparator[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  -  comparator[0];	  simplex[0]    =    comparator    -    coeff[0];    	non-compiled	[CE]  array  required,  but  Comparator<RealPointValuePair>  found	74	None	replace
154	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  xSmallest;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  xSmallest;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(),  xSmallest;	  double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	29	None	replace
155	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  n;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  n;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(),  n;	  double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	29	None	replace
156	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original,  coeff);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair[],double)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original,  coeff);	  simplex[0]    =    comparator.equals(coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair[],double)	88	None	replace
157	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(coeff,  coeff);  [CE]  no  suitable  method  found  for  equals(double,double)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(coeff,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(coeff,  coeff);	  simplex[0]    =    comparator.equals(coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double,double)	88	None	replace
158	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  original;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  original;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  original;	  final    double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	48	None	replace
159	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  false);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
160	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  null);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  null);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  null);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
161	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  gamma);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  gamma);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  gamma);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
162	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  comparator);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  comparator);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
163	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
164	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  null);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  null);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  null);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
165	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(),  coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(),  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeffs(),  coeff;	  final    double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	86	None	replace
166	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	92	None	replace
167	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  original);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  original);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	92	None	replace
168	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	46	None	replace
169	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  true);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	46	None	replace
170	[BUG]  [BUGGY]  simplex[1]  =  coeff,  comparator);  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff,  comparator);	  simplex[1]    =    coeff;    	non-compiled	[CE]  ';'  expected	57	None	replace
171	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    null);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	53	None	replace
172	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  original);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  original);	  double[]    coeff    =    comparator.evaluate(xSmallest,    null);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	53	None	replace
173	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  gamma);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  gamma);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    gamma);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
174	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xTransformed,  n,  gamma);  [CE]  cannot  find  symbol  xTransformed  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xTransformed,  n,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xTransformed,  n,  gamma);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    gamma);    	non-compiled	[CE]  cannot  find  symbol  xTransformed	2	None	replace
175	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  gamma,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  gamma,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  gamma,  false);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    gamma);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
176	[BUG]  [BUGGY]  simplex[0]  =  comparator,  coeff);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator,  coeff);	  simplex[0]    =    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	26	None	replace
177	[BUG]  [BUGGY]  simplex[0]  =  coeff,  comparator,  n);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff,  comparator,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff,  comparator,  n);	  simplex[0]    =    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	26	None	replace
178	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	28	None	replace
179	[BUG]  [BUGGY]  simplex[0]  =  original[1]  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1]  +  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[1]  +  coeff;	  simplex[0]    =    original[1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	56	None	replace
180	[BUG]  [BUGGY]  simplex[0]  =  comparator  &  coeff;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  &  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  &  coeff;	  simplex[0]    =    coeff    &    comparator;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	89	None	replace
181	[BUG]  [BUGGY]  simplex[0]  =  coeff  &  comparator.comparator;  [CE]  cannot  find  symbol  comparator  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  &  comparator.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  &  comparator.comparator;	  simplex[0]    =    coeff    &    comparator;    	non-compiled	[CE]  cannot  find  symbol  comparator	89	None	replace
182	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.getCoef();	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
183	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(),  coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoef(),  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoef(),  coeff;	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
184	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef()  +  1;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoef()  +  1;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoef()  +  1;	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
185	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[1].getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[1].getCoeff();	  final    double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	22	None	replace
186	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeffs();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.getCoeffs();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.getCoeffs();	  double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	85	None	replace
187	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  n);  [CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,int)  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  n);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff,    comparator);    	non-compiled	[CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,int)	97	None	replace
188	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  xSmallest);  [CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,double[])  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  xSmallest);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff,    comparator);    	non-compiled	[CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,double[])	97	None	replace
189	[BUG]  [BUGGY]  simplex[0]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  n);  [CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,int)  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  n);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff,    comparator);    	non-compiled	[CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,int)	97	None	replace
190	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  i);  [CE]  cannot  find  symbol  i  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  i);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  i);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff,    comparator);    	non-compiled	[CE]  cannot  find  symbol  i	97	None	replace
191	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	59	None	replace
192	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  true,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	59	None	replace
193	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  0);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  0);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  true,  0);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	59	None	replace
194	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	59	None	replace
195	[BUG]  [BUGGY]  simplex[0]  =  comparator.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.doubleValue();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.doubleValue();	  simplex[0]    =    comparator.next;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
196	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff,  false);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  coeff,  false);	  final    double[]    coeff    =    comparator.getCoeff(),    coeff);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
197	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1);	  final    double[]    coeff    =    comparator.getCoeff(),    coeff);    	non-compiled	[CE]  ';'  expected	50	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
199	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[1];  simplex[0]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
200	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	34	2	add
201	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	34	2	add
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[2]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
203	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[2]  =  original[1];  simplex[0]  =  original[1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[2]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
205	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[1];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
206	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
207	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	82	None	replace
208	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	82	None	replace
209	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	82	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	9	2	add
211	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  simplex[2]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[1]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	9	2	add
212	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  Simplex[1]  =  original[0];  simplex[2]  =  original[0];  [CE]  cannot  find  symbol  Simplex  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  Simplex[1]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    Simplex[1]  =  original[0];  simplex[2]  =  original[0];	  	non-compiled	[CE]  cannot  find  symbol  Simplex	9	None	add
213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[2]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[2]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	9	2	add
214	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[2]  =  original[0];  simplex[2]  =  original[0];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[2]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[2]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	9	2	add
215	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  simplex[3]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[1]  =  original[0];  simplex[3]  =  original[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	3	add
216	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  simplex[3]  =  original[0];  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  simplex[3]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[1]  =  original[0];  simplex[3]  =  original[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	3	add
217	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  double[1]  =  original[0];  simplex[2]  =  original[0];  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  double[1]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    double[1]  =  original[0];  simplex[2]  =  original[0];	  	non-compiled	[CE]  ']'  expected	9	None	add
218	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair[n];  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair[n];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair[n];	  simplex[1]    =    new    RealPointValuePair[0];    	non-compiled	[CE]  incompatible  types	66	None	replace
219	[BUG]  [BUGGY]  simplex[0]  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  new  RealPointValuePair[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  new  RealPointValuePair[1];	  simplex[1]    =    new    RealPointValuePair[0];    	non-compiled	[CE]  incompatible  types	66	None	replace
220	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getRealPointValuePair();	  double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	77	None	replace
221	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValueRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getValueRef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getValueRef();	  double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	77	None	replace
222	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	67	None	replace
223	[BUG]  [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
224	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[xSmallest.length  +  1];  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[xSmallest.length  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  new  SimplePointValuePair[xSmallest.length  +  1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
225	[BUG]  [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
226	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff  +  1);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
227	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  n  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  n  +  1);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
228	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  true);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  true);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    false);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
229	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  false);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff,  false);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    false);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
230	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  false);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  0,  false);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    false);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
231	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(origin,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(origin,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(origin,  n);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	87	None	replace
232	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
233	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  coeff);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
234	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  original[0]);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  original[0]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  n,  original[0]);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
235	[BUG]  [BUGGY]  simplex[1]  =  coeff[0]  +  original[0];  [CE]  array  required,  but  double  found  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff[0]  +  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff[0]  +  original[0];	  simplex[1]    =    original[0]    +    coeff;    	non-compiled	[CE]  array  required,  but  double  found	58	None	replace
236	[BUG]  [BUGGY]  simplex[0]  =  original[0]  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0]  +  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0]  +  coeff;	  simplex[1]    =    original[0]    +    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	58	None	replace
237	[BUG]  [BUGGY]  simplex[1]  =  original[0]  +  coeff,  comparator;  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  original[0]  +  coeff,  comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  original[0]  +  coeff,  comparator;	  simplex[1]    =    original[0]    +    coeff;    	non-compiled	[CE]  ';'  expected	58	None	replace
238	[BUG]  [BUGGY]  simplex[1]  =  original[1]  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  original[1]  +  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  original[1]  +  coeff;	  simplex[1]    =    original[1];    simplex[0]    =    original[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	replace
239	[BUG]  [BUGGY]  simplex[0]  =  comparator  *  coeff;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  *  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  *  coeff;	  simplex[0]    =    coeff    *    comparator;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	71	None	replace
240	[BUG]  [BUGGY]  simplex[0]  =  coeff  /  comparator;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  /  comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  /  comparator;	  simplex[0]    =    coeff    *    comparator;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	71	None	replace
241	[BUG]  [BUGGY]  simplex[0]  =  coeff  *  gamma;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  *  gamma;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  *  gamma;	  simplex[0]    =    coeff    *    comparator;    	non-compiled	[CE]  incompatible  types	71	None	replace
242	[BUG]  [BUGGY]  simplex[0]  =  coeff  *  comparator.comparator;  [CE]  cannot  find  symbol  comparator  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  *  comparator.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  *  comparator.comparator;	  simplex[0]    =    coeff    *    comparator;    	non-compiled	[CE]  cannot  find  symbol  comparator	71	None	replace
243	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  n);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  n);	  simplex[0]    =    comparator.evaluate(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
244	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  original);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  original);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  original);	  simplex[0]    =    comparator.evaluate(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
245	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  null);	  simplex[0]    =    comparator.evaluate(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
246	[BUG]  [BUGGY]  Simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  n);  [CE]  cannot  find  symbol  Simplex  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  n);	  simplex[0]    =    comparator.evaluate(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  cannot  find  symbol  Simplex	93	None	replace
247	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[1].getRealPointValuePair();	  final    double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	23	None	replace
248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[1]  =  original[1];  simplex[2]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[1]  =  original[1];  simplex[2]  =  original[2];	  	compilable	  [FE]  AssertionError  	36	2	add
249	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[1]  =  original[1];  simplex[2]  =  original[2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[1]  =  original[1];  simplex[2]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[1]  =  original[1];  simplex[2]  =  original[2];	  	compilable	  [FE]  AssertionError  	36	2	add
250	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	36	2	add
251	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[2]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[2]  =  original[0];	  	compilable	  [FE]  AssertionError  	36	2	add
252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	36	2	add
253	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	36	2	add
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[2]  =  original[1];  simplex[2]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[2]  =  original[1];  simplex[2]  =  original[2];	  	compilable	  [FE]  AssertionError  	36	2	add
255	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[2]  =  original[1];  simplex[2]  =  original[2];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[2]  =  original[1];  simplex[2]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[2]  =  original[1];  simplex[2]  =  original[2];	  	compilable	  [FE]  AssertionError  	36	2	add
256	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	36	2	add
257	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[2]  =  original[1];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	36	2	add
258	[BUG]  [BUGGY]  final  double[]  coeff  =  original[n].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[n].getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[n].getCoef();	  final    double[]    coeff    =    original[n].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	40	None	replace
259	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  false);	  final    double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	67	None	replace
260	[BUG]  [BUGGY]  simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];	  simplex[1]    =    original[0];    SimplePointValuePair    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	80	None	replace
261	[BUG]  [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];  [CE]  ']'  expected  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];	  simplex[1]    =    original[0];    SimplePointValuePair    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	80	None	replace
262	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  original);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  original);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	82	None	replace
263	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  original);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  original);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
264	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  comparator);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  comparator);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
265	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  original);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  original);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
266	[BUG]  [BUGGY]  simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  n);  [CE]  array  required,  but  double  found  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  n);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n);    	non-compiled	[CE]  array  required,  but  double  found	90	None	replace
267	[BUG]  [BUGGY]  simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  n);  [CE]  array  required,  but  double  found  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  n);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n);    	non-compiled	[CE]  array  required,  but  double  found	90	None	replace
268	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  -  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  -  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  -  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
269	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  original.length);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  original.length);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  original.length);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
270	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  false);  [CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,boolean)  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  false);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff,    comparator);    	non-compiled	[CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,boolean)	97	None	replace
271	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  comparator,  coeff);  [CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,Comparator<RealPointValuePair>,double)  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  comparator,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair(original[0],  comparator,  coeff);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff,    comparator);    	non-compiled	[CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,Comparator<RealPointValuePair>,double)	97	None	replace
272	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
273	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	34	2	add
274	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	34	2	add
275	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[0]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	34	2	add
276	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  false);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluate(xSmallest,  coeff,  false);	  simplex[0]    =    comparator.evaluate(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
277	[BUG]  [BUGGY]  simplex[0]  =  comparator  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  +  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  +  coeff;	  simplex[0]    =    coeff    &    comparator;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	89	None	replace
278	[BUG]  [BUGGY]  Simplex[0]  =  comparator  &  coeff;  [CE]  cannot  find  symbol  Simplex  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Simplex[0]  =  comparator  &  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Simplex[0]  =  comparator  &  coeff;	  simplex[0]    =    coeff    &    comparator;    	non-compiled	[CE]  cannot  find  symbol  Simplex	89	None	replace
279	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  original[0]);  [CE]  no  suitable  method  found  for  equals(double[],RealPointValuePair)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  original[0]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest,  original[0]);	  simplex[0]    =    comparator.equals(coeff,    original[0]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double[],RealPointValuePair)	95	None	replace
280	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original,  coeff,  comparator);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original,  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original,  coeff,  comparator);	  simplex[0]    =    comparator.equals(coeff,    original[0]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair[],double,Comparator<RealPointValuePair>)	95	None	replace
281	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest);	  simplex[0]    =    comparator.equals(coeff);    	non-compiled	[CE]  incompatible  types	88	None	replace
282	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(coeff,  comparator);  [CE]  no  suitable  method  found  for  equals(double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(coeff,  comparator);	  simplex[0]    =    comparator.equals(coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double,Comparator<RealPointValuePair>)	88	None	replace
283	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Double[]  coeff  =  comparator.getCoeff(n);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
284	[BUG]  [BUGGY]  simplex[0]  =  comparator  -  coeff[1];  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  -  coeff[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  -  coeff[1];	  simplex[0]    =    coeff    -    original[1];    	non-compiled	[CE]  array  required,  but  double  found	43	None	replace
285	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  gamma,  coeff,  null);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  gamma,  coeff,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  gamma,  coeff,  null);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
286	[BUG]  [BUGGY]  simplex[0]  =  comparator  -  original[0].getPointRef();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  -  original[0].getPointRef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  -  original[0].getPointRef();	  simplex[0]    =    comparator    -    original[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	73	None	replace
287	[BUG]  [BUGGY]  simplex[1]  =  comparator,  coeff);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  comparator,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  comparator,  coeff);	  simplex[0]    =    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	26	None	replace
288	[BUG]  [BUGGY]  simplex[0]  =  new  RealPointValuePair[0];  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  new  RealPointValuePair[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  new  RealPointValuePair[0];	  simplex[1]    =    new    RealPointValuePair[0];    	non-compiled	[CE]  incompatible  types	66	None	replace
289	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair[n0];  [CE]  cannot  find  symbol  n0  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair[n0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair[n0];	  simplex[1]    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  n0	66	None	replace
290	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[n].getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[n].getCoef();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	72	None	replace
291	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  double[]  coeff  =  original[0].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  double[]  coeff  =  original[0].getPointRef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[1]    =    original[1];    double[]  coeff  =  original[0].getPointRef();	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	30	None	add
292	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	36	2	add
293	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	36	2	add
294	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[1]  =  original[2];	  	compilable	  [FE]  AssertionError  	36	2	add
295	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[2];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  simplex[1]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];  simplex[1]  =  original[2];	  	compilable	  [FE]  AssertionError  	36	2	add
296	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair  original[0]  =  original[1];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair  original[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair  original[0]  =  original[1];	  	non-compiled	[CE]  ']'  expected	55	None	add
297	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[0]  =  original[1];  [CE]  cannot  find  symbol  SimplePointValuePair  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair[0]  =  original[1];	  	non-compiled	[CE]  cannot  find  symbol  SimplePointValuePair	55	None	add
298	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original[1]  =  coeff;  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original[1]  =  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair[]  original[1]  =  coeff;	  	non-compiled	[CE]  ']'  expected	55	None	add
299	[BUG]  [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original[0]  =  original[1];  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  SimplePointValuePair[]  original[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    SimplePointValuePair[]  original[0]  =  original[1];	  	non-compiled	[CE]  ']'  expected	55	None	add
300	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  2);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  2);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  2);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	45	None	replace
301	[BUG]  [BUGGY]  simplex[0]  =  comparator,  double;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator,  double;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator,  double;	  simplex[0]    =    comparator,    coeff;    	non-compiled	[CE]  ';'  expected	15	None	replace
302	[BUG]  [BUGGY]  simplex[0]  =  comparator,  Double.NaN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator,  Double.NaN;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator,  Double.NaN;	  simplex[0]    =    comparator,    coeff;    	non-compiled	[CE]  ';'  expected	15	None	replace
303	[BUG]  [BUGGY]  simplex[1]  =  coeff;  SimplePointValuePair  original[0]  =  original;  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff;  SimplePointValuePair  original[0]  =  original;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff;  SimplePointValuePair  original[0]  =  original;	  simplex[1]    =    original[1];    SimplePointValuePair    original[0]    =    coeff;    	non-compiled	[CE]  ']'  expected	75	None	replace
304	[BUG]  [BUGGY]  simplex[1]  =  original[1];  SimplePointValuePair  original[0]  =  comparator;  [CE]  ']'  expected  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  original[1];  SimplePointValuePair  original[0]  =  comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  original[1];  SimplePointValuePair  original[0]  =  comparator;	  simplex[1]    =    original[1];    SimplePointValuePair    original[0]    =    coeff;    	non-compiled	[CE]  ']'  expected	75	None	replace
305	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN);	  double[]    coeff    =    comparator.evaluate(xSmallest,    null);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	53	None	replace
306	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointRef(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getPointRef(coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getPointRef(coeff);	  double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	77	None	replace
307	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  n  +  1);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	64	None	replace
308	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(n,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(n,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	64	None	replace
309	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  xSmallest);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	64	None	replace
310	[BUG]  [BUGGY]  Simplex[0]  =  comparator  *  coeff;  [CE]  cannot  find  symbol  Simplex  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Simplex[0]  =  comparator  *  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Simplex[0]  =  comparator  *  coeff;	  simplex[0]    =    coeff    *    comparator;    	non-compiled	[CE]  cannot  find  symbol  Simplex	71	None	replace
311	[BUG]  [BUGGY]  simplex[0]  =  new  RealPointValuePair(coeff[0],  original);  [CE]  array  required,  but  double  found  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  new  RealPointValuePair(coeff[0],  original);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  new  RealPointValuePair(coeff[0],  original);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff);    	non-compiled	[CE]  array  required,  but  double  found	96	None	replace
312	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[2];  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  new  SimplePointValuePair[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  new  SimplePointValuePair[2];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
313	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	87	None	replace
314	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  2);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  2);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  2);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
315	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  xSmallest;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  xSmallest;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  xSmallest;	  final    double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	48	None	replace
316	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  true,  true);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  true,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	59	None	replace
317	[BUG]  [BUGGY]  simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  null);  [CE]  array  required,  but  double  found  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff[0];  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  original,  null);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  array  required,  but  double  found	91	None	replace
318	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];  simplex[0]  =  original[0];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  SimplePointValuePair  original[1]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    SimplePointValuePair  original[1]  =  original[1];  simplex[0]  =  original[0];	  	non-compiled	[CE]  ']'  expected	32	None	add
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	32	2	add
320	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	32	2	add
321	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(n);	  double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	85	None	replace
322	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoef();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	76	None	replace
323	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }	  simplex[1]    =    original[0];    simplex[1]    =    original[0];    	compilable	  [FE]  NullPointerException  	8	4	replace
324	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }	  simplex[1]    =    original[0];    simplex[1]    =    original[0];    	compilable	  [FE]  NullPointerException  	8	4	replace
325	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[0];  simplex[1]  =  original[0];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];	  simplex[1]    =    original[0];    simplex[1]    =    original[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
326	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  comparator);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  comparator);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	21	None	replace
327	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original[0],  xSmallest,  coeff);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair,double[],double)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original[0],  xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original[0],  xSmallest,  coeff);	  simplex[0]    =    comparator.equals(original[0],    coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair,double[],double)	16	None	replace
328	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  original);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false,  original);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	54	None	replace
329	[BUG]  [BUGGY]  Simplex[0]  =  comparator.next;  [CE]  cannot  find  symbol  Simplex  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Simplex[0]  =  comparator.next;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Simplex[0]  =  comparator.next;	  simplex[0]    =    comparator.next;    	non-compiled	[CE]  cannot  find  symbol  Simplex	60	None	replace
330	[BUG]  [BUGGY]  simplex[0]  =  comparator.next  +  coeff;  [CE]  cannot  find  symbol  next  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.next  +  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.next  +  coeff;	  simplex[0]    =    comparator.next;    	non-compiled	[CE]  cannot  find  symbol  next	60	None	replace
331	[BUG]  [BUGGY]  simplex[0]  =  comparator  /  coeff[0];  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator  /  coeff[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator  /  coeff[0];	  simplex[0]    =    comparator    -    coeff[0];    	non-compiled	[CE]  array  required,  but  double  found	74	None	replace
332	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];	  simplex[1]    =    original[1];    simplex[2]    =    original[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
333	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }	  simplex[1]    =    original[1];    simplex[2]    =    original[1];    	compilable	  [FE]  NullPointerException  	39	4	replace
334	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  [FE]  NullPointerException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }	  simplex[1]    =    original[1];    simplex[2]    =    original[1];    	compilable	  [FE]  NullPointerException  	39	4	replace
335	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  true);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	47	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  simplex[2]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[0]  =  original[1];  simplex[2]  =  original[2];	  simplex[1]    =    original[1];    simplex[2]    =    original[2];    	compilable	  [FE]  AssertionError  	37	4	replace
337	[BUG]  [BUGGY]  simplex[0]  =  original[1];  simplex[2]  =  original[2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  simplex[2]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[1];  simplex[2]  =  original[2];	  simplex[1]    =    original[1];    simplex[2]    =    original[2];    	compilable	  [FE]  AssertionError  	37	4	replace
338	[BUG]  [BUGGY]  simplex[1]  =  coeff;  simplex[2]  =  original[2];  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff;  simplex[2]  =  original[2];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff;  simplex[2]  =  original[2];	  simplex[1]    =    original[1];    simplex[2]    =    original[2];    	non-compiled	[CE]  incompatible  types	37	None	replace
339	[BUG]  [BUGGY]  Simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n  +  1);  [CE]  cannot  find  symbol  Simplex  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  Simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	Simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n  +  1);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol  Simplex	83	None	replace
340	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
341	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  SimplePointValuePair  original[0]  =  original[0];  simplex[1]  =  original[0];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  SimplePointValuePair  original[0]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    SimplePointValuePair  original[0]  =  original[0];  simplex[1]  =  original[0];	  	non-compiled	[CE]  ']'  expected	7	None	add
342	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  double[]  coeff  =  original[0].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  double[]  coeff  =  original[0].getPointRef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    double[]  coeff  =  original[0].getPointRef();	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	7	None	add
343	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  gamma,  coeff,  comparator);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  gamma,  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  gamma,  coeff,  comparator);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    gamma);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
344	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  gamma,  comparator);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  gamma,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  gamma,  comparator);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    gamma);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
345	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	46	None	replace
346	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	46	None	replace
347	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  false);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	28	None	replace
348	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  simplex[2]  =  original[0];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    SimplePointValuePair  original[1]  =  original[0];  simplex[2]  =  original[0];	  	non-compiled	[CE]  ']'  expected	9	None	add
349	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  SimpleX[1]  =  original[0];  simplex[2]  =  original[0];  [CE]  cannot  find  symbol  SimpleX  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  SimpleX[1]  =  original[0];  simplex[2]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    SimpleX[1]  =  original[0];  simplex[2]  =  original[0];	  	non-compiled	[CE]  cannot  find  symbol  SimpleX	9	None	add
350	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(original[1],  coeff);  [CE]  no  suitable  method  found  for  equals(RealPointValuePair,double)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(original[1],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(original[1],  coeff);	  simplex[0]    =    comparator.equals(original[1]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(RealPointValuePair,double)	17	None	replace
351	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex  =  new  RealPointValuePair[n  +  1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[n    +    1];    	compilable	  [FE]  NullPointerException  	12	4	replace
352	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex  =  new  RealPointValuePair[n  +  1];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[n    +    1];    	compilable	  [FE]  NullPointerException  	12	4	replace
353	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoefFactory();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoefFactory();	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
354	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoef(coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoef(coeff);	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
355	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(coef);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoef(coef);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoef(coef);	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
356	[BUG]  [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[0];  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[0];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    new    SimplePointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
357	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1;	  final    double[]    coeff    =    comparator.getCoeff(),    coeff);    	non-compiled	[CE]  ';'  expected	50	None	replace
358	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];	  simplex[1]    =    original[1];    simplex[1]    =    original[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
359	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }	  simplex[1]    =    original[1];    simplex[1]    =    original[1];    	compilable	  [FE]  NullPointerException  	31	4	replace
360	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  [FE]  NullPointerException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }	  simplex[1]    =    original[1];    simplex[1]    =    original[1];    	compilable	  [FE]  NullPointerException  	31	4	replace
361	[BUG]  [BUGGY]  simplex[0]  =  comparator.toSimplex();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.toSimplex();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.toSimplex();	  simplex[0]    =    comparator.comparator;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
362	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  -  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  -  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  -  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	20	None	replace
363	[BUG]  [BUGGY]  simplex[1]  =  coeff[0]  +  original;  [CE]  array  required,  but  double  found  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff[0]  +  original;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff[0]  +  original;	  simplex[1]    =    original[0]    +    coeff;    	non-compiled	[CE]  array  required,  but  double  found	58	None	replace
364	[BUG]  [BUGGY]  simplex[0]  =  coeff[0]  +  original;  [CE]  array  required,  but  double  found  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff[0]  +  original;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff[0]  +  original;	  simplex[1]    =    original[0]    +    coeff;    	non-compiled	[CE]  array  required,  but  double  found	58	None	replace
365	[BUG]  [BUGGY]  simplex[0]  =  coeff  +  original[0];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  coeff  +  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  coeff  +  original[0];	  simplex[1]    =    original[0]    +    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	58	None	replace
366	[BUG]  [BUGGY]  simplex[1]  =  coeff  -  original[0],  comparator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  coeff  -  original[0],  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  coeff  -  original[0],  comparator);	  simplex[0]    =    coeff    -    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	42	None	replace
367	[BUG]  [BUGGY]  simplex[1]  =  comparator  -  original[0],  coeff);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  comparator  -  original[0],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  comparator  -  original[0],  coeff);	  simplex[0]    =    coeff    -    original[0],    comparator);    	non-compiled	[CE]  ';'  expected	42	None	replace
368	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  +  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	92	None	replace
369	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  *  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  *  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  *  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	92	None	replace
370	[BUG]  [BUGGY]  simplex[1]  =  comparator.comparator;  [CE]  cannot  find  symbol  comparator  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  comparator.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  comparator.comparator;	  simplex[1]    =    comparator;    	non-compiled	[CE]  cannot  find  symbol  comparator	65	None	replace
371	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[0];  }  [CE]  ']'  expected  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[0];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[0];  }	  simplex[1]    =    original[0];    SimplePointValuePair[]    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	11	None	replace
372	[BUG]  [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[0];  [CE]  ']'  expected  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  original[0];  SimplePointValuePair[]  original[1]  =  original[0];	  simplex[1]    =    original[0];    SimplePointValuePair[]    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	11	None	replace
373	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  0);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  0);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  0);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	87	None	replace
374	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	87	None	replace
375	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  n);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  n);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
376	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[0],  xSmallest[1]);  [CE]  no  suitable  method  found  for  equals(double,double)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[0],  xSmallest[1]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest[0],  xSmallest[1]);	  simplex[0]    =    comparator.equals(xSmallest[0]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double,double)	79	None	replace
377	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[0],  original[0],  coeff);  [CE]  no  suitable  method  found  for  equals(double,RealPointValuePair,double)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest[0],  original[0],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest[0],  original[0],  coeff);	  simplex[0]    =    comparator.equals(original[0],    coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double,RealPointValuePair,double)	16	None	replace
378	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  coeff);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(),  coeff);	  double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  ';'  expected	29	None	replace
379	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(),  coeff  +  1;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(),  coeff  +  1;	  double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  ';'  expected	29	None	replace
380	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  return  evaluateNewSim  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  return  evaluateNewSim  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[1]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  return  evaluateNewSim	  simplex[1]    =    original[1];    simplex[1]    =    original[1];    	non-compiled	[CE]  ';'  expected	31	None	replace
381	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoefF();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  original[0].getCoefF();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  original[0].getCoefF();	  double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	4	None	replace
382	[BUG]  [BUGGY]  simplex[0]  =  comparator.multipoint(coeff);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.multipoint(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.multipoint(coeff);	  simplex[0]    =    comparator.comparator;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
383	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  n  +  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	82	None	replace
384	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  *  1,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  *  1,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  *  1,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	82	None	replace
385	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  2);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  2);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  2);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
386	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[0].getCoefFactory();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	76	None	replace
387	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoefF();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[0].getCoefF();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[0].getCoefF();	  final    double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	22	None	replace
388	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	36	2	add
389	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[2];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[2];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	36	2	add
390	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  simplex);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  simplex);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false,  simplex);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
391	[BUG]  [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  gamma);  [CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,double)  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  new  RealPointValuePair(original[0],  coeff,  comparator,  gamma);	  simplex[1]    =    new    RealPointValuePair(original[0],    coeff,    comparator);    	non-compiled	[CE]  no  suitable  constructor  found  for  RealPointValuePair(RealPointValuePair,double,Comparator<RealPointValuePair>,double)	97	None	replace
392	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  /  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  /  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  original[1].getPointRef()  /  comparator;	  final    double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	23	None	replace
393	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
394	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  0);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  0);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  0);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
395	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeffs(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeffs(coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeffs(coeff);	  double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	85	None	replace
396	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	32	2	add
397	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    simplex[0]  =  original[1];	  	compilable	  [FE]  AssertionError  	32	2	add
398	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[0];  SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[0];    SimplePointValuePair[]  original  =  new  SimplePointValuePair[n  +  1];	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
399	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.POSITIVE_INFINITY);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.POSITIVE_INFINITY);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  Double.POSITIVE_INFINITY);	  double[]    coeff    =    comparator.evaluate(xSmallest,    null);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	53	None	replace
400	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  return  evaluateNewSim  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  return  evaluateNewSim  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[1];  simplex[2]  =  original[1];  }  else  {  SimplePointValuePair[]  coeff  =  new  SimplePointValuePair[coeff  +  1];  return  evaluateNewSim	  simplex[1]    =    original[1];    simplex[2]    =    original[1];    	non-compiled	[CE]  ';'  expected	39	None	replace
401	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	30	2	add
402	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[1]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[1]    =    original[1];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	30	2	add
403	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  null);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  null);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  null);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	28	None	replace
404	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  xSmallest);  [CE]  no  suitable  method  found  for  equals(double[],double[])  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest,  xSmallest);	  simplex[0]    =    comparator.equals(coeff);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double[],double[])	88	None	replace
405	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  original[1]);  [CE]  no  suitable  method  found  for  equals(double[],RealPointValuePair)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(xSmallest,  original[1]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(xSmallest,  original[1]);	  simplex[0]    =    comparator.equals(original[1]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double[],RealPointValuePair)	17	None	replace
406	[BUG]  [BUGGY]  simplex[0]  =  comparator.equals(coeff,  original[1]);  [CE]  no  suitable  method  found  for  equals(double,RealPointValuePair)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.equals(coeff,  original[1]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.equals(coeff,  original[1]);	  simplex[0]    =    comparator.equals(original[1]);    	non-compiled	[CE]  no  suitable  method  found  for  equals(double,RealPointValuePair)	17	None	replace
407	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[0]    =    original[1];    simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	55	2	add
408	[BUG]  [BUGGY]  simplex[0]  =  original[1];  simplex[1]  =  original[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  simplex[1]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    simplex[1]  =  original[1];	  	compilable	  [FE]  AssertionError  	55	2	add
409	[BUG]  [BUGGY]  simplex[0]  =  original[1];  Simplex[0]  =  original[1];  [CE]  cannot  find  symbol  Simplex  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  Simplex[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    Simplex[0]  =  original[1];	  	non-compiled	[CE]  cannot  find  symbol  Simplex	55	None	add
410	[BUG]  [BUGGY]  simplex[0]  =  original[1];  double[0]  =  original[1];  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  original[1];  double[0]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]    =    original[1];    double[0]  =  original[1];	  	non-compiled	[CE]  ']'  expected	55	None	add
411	[BUG]  [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  }  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  if(original[0]!=  null)  {  simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  }  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	if(original[0]!=  null)  {  simplex[1]  =  original[0];  SimplePointValuePair  original[1]  =  original[0];  }	  simplex[1]    =    original[0];    SimplePointValuePair    original[1]    =    original[0];    	non-compiled	[CE]  ']'  expected	80	None	replace
412	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  null);  [CE]  cannot  find  symbol  xOriginal  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  null);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol  xOriginal	69	None	replace
413	[BUG]  [BUGGY]  simplex[0]  =  comparator,  coeff,  comparator;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator,  coeff,  comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator,  coeff,  comparator;	  simplex[0]    =    comparator,    coeff;    	non-compiled	[CE]  ';'  expected	15	None	replace
414	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  gamma);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  gamma);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  gamma);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
415	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
416	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
417	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
418	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	7	2	add
419	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[1]  =  original[0];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[1]    =    original[0];    double[]  coeff  =  comparator.evaluate(xSmallest,  n);	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	7	None	add
420	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  coeff,  gamma);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false,  coeff,  gamma);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false,  coeff,  gamma);	  double[]    coeff    =    comparator.evaluate(xSmallest,    false,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	54	None	replace
421	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeffs(coeff);	  final    double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	86	None	replace
422	[BUG]  [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  null);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	SimplePointValuePair[]  original  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  null);	  simplex[1]    =    original[0];    SimplePointValuePair[]    original    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    null);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
423	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	38	2	add
424	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];	  	compilable	  [FE]  AssertionError  	38	2	add
425	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
426	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[2]  =  original[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[2]  =  original[1];  simplex[0]  =  original[0];  simplex[2]  =  original[1];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[2]    =    original[1];    simplex[0]  =  original[0];  simplex[2]  =  original[1];	  	compilable	  [FE]  AssertionError  	38	2	add
427	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	34	2	add
428	[BUG]  [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[1];    simplex[0]  =  original[1];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[1];        simplex[0]    =    original[1];    simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	34	2	add
429	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  0,  n);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xSmallest,  0,  n);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    0,    n);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
430	[BUG]  [BUGGY]  simplex[1]  =  original[0];  SimplePointValuePair  original[0]  =  coeff;  [CE]  ']'  expected  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]  =  original[0];  SimplePointValuePair  original[0]  =  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]  =  original[0];  SimplePointValuePair  original[0]  =  coeff;	  simplex[1]    =    original[1];    SimplePointValuePair    original[0]    =    coeff;    	non-compiled	[CE]  ']'  expected	75	None	replace
431	[BUG]  [BUGGY]  simplex[0]  =  comparator.remove(xSmallest,  n);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.remove(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.remove(xSmallest,  n);	  simplex[0]    =    comparator.next;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
432	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  gamma);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  gamma);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  gamma);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	64	None	replace
433	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  n  +  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
434	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  original[0].getCoefFactory();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  original[0].getCoefFactory();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
435	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  null);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  null);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  null);	  final    double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	67	None	replace
436	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getPoint();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  final  double[]  coeff  =  comparator[n].getPoint();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	final  double[]  coeff  =  comparator[n].getPoint();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	72	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	add	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	9	2	add
438	[BUG]  [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[1]    =    original[0];    simplex[2]  =  original[0];  simplex[1]  =  original[0];  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[1]        =        original[0];        simplex[2]    =    original[0];    simplex[1]  =  original[0];	  	compilable	  [FE]  AssertionError  	9	2	add
439	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  n  +  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	45	None	replace
440	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  n,  false);  [CE]  cannot  find  symbol  xOriginal  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  n,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  xOriginal,  n,  false);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    false);    	non-compiled	[CE]  cannot  find  symbol  xOriginal	3	None	replace
441	[BUG]  [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  gamma,  comparator);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  gamma,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	simplex[0]  =  comparator.evaluateNewSimplex(xSmallest,  coeff,  n,  gamma,  comparator);	  simplex[0]    =    comparator.evaluateNewSimplex(xSmallest,    coeff,    n,    gamma);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
442	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getPointRef()  /  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];      [BUGGY]  double[]  coeff  =  original[1].getPointRef()  /  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }    [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	120	120	2	replace	double[]  coeff  =  original[1].getPointRef()  /  comparator;	  double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	5	None	replace
