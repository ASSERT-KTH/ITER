bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
2	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
3	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected.comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected.comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected.comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
4	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
5	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
6	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  bluma);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  bluma);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  bluma);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
7	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
8	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  khi,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  khi,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  khi,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
9	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  reflected,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  reflected,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  reflected,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
10	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
11	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
12	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  gamma,  comparator);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
13	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
14	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  reflected);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  reflected);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
15	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflected);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflected);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
16	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  reflected);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  reflected);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
17	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  khi)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(simplex,  khi)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simplex,  khi)  <  0)  {	  if    (comparator.compare(related,    khi)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	17	None	replace
18	[BUG]  [BUGGY]  if  (comparator.compare(relative,  khi)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(relative,  khi)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  khi)  <  0)  {	  if    (comparator.compare(related,    khi)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	17	None	replace
19	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(original,  khi)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  khi)  <  0)  {	  if    (comparator.compare(related,    khi)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	17	None	replace
20	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  khi);	      Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
21	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  khi);	      Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
22	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma);	      Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
23	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi);	      Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
24	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  reflected);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  reflected);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
25	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
26	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  best);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  best);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
27	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
28	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  1.0,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  1.0,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  1.0,  best);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
29	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  khi);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
30	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  khi);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
31	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
32	[BUG]  [BUGGY]  if  (comparator.compare(relative,  khi)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(relative,  khi)  <  =  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  khi)  <  =  0)  {	  if    (comparator.compare(relative,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if  (comparator.compare(relative,  reflected)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(relative,  reflected)  <  =  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  reflected)  <  =  0)  {	  if    (comparator.compare(relative,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  best)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(simplex,  best)  <  =  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simplex,  best)  <  =  0)  {	  if    (comparator.compare(relative,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  gamma,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
36	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  gamma,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
37	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  khi,  comparator)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(reflected,  khi,  comparator)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  khi,  comparator)  <  0)  {	  if    (comparator.compare(reflected,    khi)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	1	None	replace
38	[BUG]  [BUGGY]  if  (comparator.compare(relative,  khi,  comparator)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(relative,  khi,  comparator)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  khi,  comparator)  <  0)  {	  if    (comparator.compare(reflected,    khi)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	1	None	replace
39	[BUG]  [BUGGY]  if  (comparator.compare(related,  khi,  comparator)  <  0)  {  [CE]  cannot  find  symbol  related  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(related,  khi,  comparator)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(related,  khi,  comparator)  <  0)  {	  if    (comparator.compare(reflected,    khi)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  related	1	None	replace
40	[BUG]  [BUGGY]  if  (comparator.compare(reflect,  khi,  comparator)  <  0)  {  [CE]  cannot  find  symbol  reflect  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(reflect,  khi,  comparator)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflect,  khi,  comparator)  <  0)  {	  if    (comparator.compare(reflected,    khi)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflect	1	None	replace
41	[BUG]  [BUGGY]  if  (comparator.compare(relative,  reflected)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(relative,  reflected)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  reflected)  <  0)  {	  if    (comparator.compare(relative,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	3	None	replace
42	[BUG]  [BUGGY]  if  (comparator.compare(original,  best)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(original,  best)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  best)  <  0)  {	  if    (comparator.compare(relative,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	3	None	replace
43	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  best)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(reflected,  best)  <  =  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  best)  <  =  0)  {	  if    (comparator.compare(related,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
44	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  reflectedSimplex)  <  0)  {  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(simplex,  reflectedSimplex)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simplex,  reflectedSimplex)  <  0)  {	  if    (comparator.compare(simplex,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	4	None	replace
45	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  reflected)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(simplex,  reflected)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simplex,  reflected)  <  0)  {	  if    (comparator.compare(simplex,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	4	None	replace
46	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflected);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflected);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
47	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  best);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  best);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
48	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
49	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  0.0,  comparator);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
50	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  gamma);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  gamma);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
51	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  size);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  size);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  size);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
52	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflectedSimplex);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflectedSimplex);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
53	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  k,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  k,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  k,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
54	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  khi);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
55	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
56	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  blue);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  blue);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  blue);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
57	[BUG]  [BUGGY]  if  (comparator.compare(simpleX,  best)  <  0)  {  [CE]  cannot  find  symbol  simpleX  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(simpleX,  best)  <  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simpleX,  best)  <  0)  {	  if    (comparator.compare(simplex,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  simpleX	4	None	replace
58	[BUG]  [BUGGY]  if  (comparator.compare(linked,  reflected)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(linked,  reflected)  <  =  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(linked,  reflected)  <  =  0)  {	  if    (comparator.compare(related,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
59	[BUG]  [BUGGY]  if  (comparator.compare(original,  best)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if  (comparator.compare(original,  best)  <  =  0)  {  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  best)  <  =  0)  {	  if    (comparator.compare(related,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  khi);	      Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
61	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  1.0,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
62	[BUG]  [BUGGY]  double  gamma  =  best.doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  double  gamma  =  best.doubleValue();  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	double  gamma  =  best.doubleValue();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
63	[BUG]  [BUGGY]  if(relative.compareTo(relative)  ==  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if(relative.compareTo(relative)  ==  0)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative)  ==  0)  {  return;  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
64	[BUG]  [BUGGY]  if(relative.compareTo(relative)!=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  if(relative.compareTo(relative)!=  0)  {  return;  }  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative)!=  0)  {  return;  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
65	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative);  [BUGGY]      final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(relative);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
66	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
67	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  gamma,  best);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  gamma,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  gamma,  best);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
68	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  khi,  best);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  khi,  best);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  khi,  best);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
69	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  khi,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  khi,  comparator);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  khi,  comparator);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
70	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  khi,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  khi,  original);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  khi,  original);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
71	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  khi);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
72	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  khi);	      Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
73	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);    [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  khi);  [BUGGY]    if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  khi);	      Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
