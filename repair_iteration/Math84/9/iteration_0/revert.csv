projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74if(comparator.compare(reflected,best)<0){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74if(comparator.compare(reflected,khi)<0){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74if(comparator.compare(relative,best)<=0){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74if(comparator.compare(relative,best)<0){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74if(comparator.compare(simplex,best)<0){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comparator=evaluateNewSimplex(original,1.0,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comparator=evaluateNewSimplex(original,0.0,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comparator=evaluateNewSimplex(reflected,1.0,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comparator=evaluateNewSimplex(original);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comp=comparator.compare(relativeSimplex,reflected);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comparator=evaluateNewSimplex(original,gamma,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comparator=evaluateNewSimplex(relative,gamma,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comparator=evaluateNewSimplex(relative,khi,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74if(comparator.compare(related,best)<=0){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>comp=comparator.compare(relativeSimplex,khi);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74Comparator<RealPointValuePair>compos=comparator.compare(relativeSimplex,khi);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java74if(comparator.compare(related,khi)<0){
