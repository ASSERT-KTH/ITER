bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {	  if(oldNames!=    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames.length    <    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames.length    <    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  if(oldNames.length  ==  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  ==  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  ==  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames.length    <    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  if(oldCount  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(newSize    <    =    oldCount    ||    newSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
6	[BUG]  [BUGGY]  if(oldCount  <  =  newSize  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  =  newSize  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  =  newSize  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(newSize    <    =    oldCount    ||    newSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
7	[BUG]  [BUGGY]  if(newSize  <  =  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(newSize  <  =  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(newSize  <  =  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(newSize    <    =    oldCount    ||    newSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]  if(oldCount  <  oldSize  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  oldSize  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  oldSize  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(newSize    <    =    oldCount    ||    newSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >=  MAX_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
10	[BUG]  [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
11	[BUG]  [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
12	[BUG]  [BUGGY]  if(oldCount  ==  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
13	[BUG]  [BUGGY]  if(oldCount  >  newSize  &&  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  newSize  &&  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  newSize  &&  oldCount  >  MAX_HASH_SIZE)  {	  if(oldCount    >    oldCount    &&    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
14	[BUG]  [BUGGY]  if(oldCount  >  MAX_HASH_SIZE  &&  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_HASH_SIZE  &&  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_HASH_SIZE  &&  oldCount  >  MAX_HASH_SIZE)  {	  if(oldCount    >    oldCount    &&    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
15	[BUG]  [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  &&  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  &&  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_ENTRIES_FOR_REUSE  &&  oldCount  >  MAX_HASH_SIZE)  {	  if(oldCount    >    oldCount    &&    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
16	[BUG]  [BUGGY]  if(oldCount  ==  oldCount  &&  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  oldCount  &&  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  oldCount  &&  oldCount  >  MAX_HASH_SIZE)  {	  if(oldCount    >    oldCount    &&    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
17	[BUG]  [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
18	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
19	[BUG]  [BUGGY]  if(oldCount  >  newSize  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  newSize  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  newSize  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    >    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    >    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
21	[BUG]  [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {	  if(oldCount    >    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
22	[BUG]  [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  DEFAULT_T_SIZE)  {	  if(oldCount    >    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  if(oldNames[0]  ==  DEFAULT_T_SIZE  ||  oldNames[0]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[0]  ==  DEFAULT_T_SIZE  ||  oldNames[0]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[0]  ==  DEFAULT_T_SIZE  ||  oldNames[0]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
24	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
25	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_ENTRIES_FOR_REUSE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
26	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >=  MAX_HASH_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
27	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length!=  MAX_HASH_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
28	[BUG]  [BUGGY]  if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
29	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
30	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
31	[BUG]  [BUGGY]  if(oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
32	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames.length    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
33	[BUG]  [BUGGY]  if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_HASH_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames.length    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
34	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames.length  >  MAX_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames.length    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
35	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames!=    null    ||    oldNames.length    <    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
36	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames!=    null    ||    oldNames.length    <    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
37	[BUG]  [BUGGY]  if(oldCount  <  =  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  =  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  =  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {	  if(oldCount    <    =    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
38	[BUG]  [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
39	[BUG]  [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  0)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  0)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
40	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  continue;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  continue;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
41	[BUG]  [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  newSize  ||  oldCount  >  MAX_T_SIZE)  {	  if(oldCount    >    oldCount    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
42	[BUG]  [BUGGY]  _hashArea[i]  =  new  String(name);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  _hashArea[i]  =  new  String(name);  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	_hashArea[i]  =  new  String(name);	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    _hashArea[i]    =    new    String(name);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
43	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  1,  len  =  oldNames.length;  i  <  len;  ++i)  {  _hashArea[i]  =  new  String(name);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  1,  len  =  oldNames.length;  i  <  len;  ++i)  {  _hashArea[i]  =  new  String(name);  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  1,  len  =  oldNames.length;  i  <  len;  ++i)  {  _hashArea[i]  =  new  String(name);  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    _hashArea[i]    =    new    String(name);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
44	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  _hashArea[i]  =  new  String(name,  newSize);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  _hashArea[i]  =  new  String(name,  newSize);  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  _hashArea[i]  =  new  String(name,  newSize);  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    _hashArea[i]    =    new    String(name);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
45	[BUG]  [BUGGY]  int[]  oldHashArea  =  _hashArea.getHashArea();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  int[]  oldHashArea  =  _hashArea.getHashArea();  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	int[]  oldHashArea  =  _hashArea.getHashArea();	  int[]    oldHashArea    =    _hashArea.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >=  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length!=  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  if(oldCount  <  =  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  =  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  =  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {	  if(newSize    <    =    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
49	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length!=  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
50	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >=  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  newSize)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  newSize)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  newSize)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
52	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames[oldCount]    ==    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
53	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames[oldCount]    ==    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
54	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  newSize  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  newSize  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  newSize  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames[oldCount]    ==    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
55	[BUG]  [BUGGY]  int[]  oldHashArea  =  _hashArea.length;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  int[]  oldHashArea  =  _hashArea.length;  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	int[]  oldHashArea  =  _hashArea.length;	  int[]    oldHashArea    =    _hashArea.clone();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
57	[BUG]  [BUGGY]  if(oldNames.length  ==  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  ==  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  ==  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
58	[BUG]  [BUGGY]  if(oldNames.length!=  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length!=  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length!=  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
59	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
60	[BUG]  [BUGGY]  final  int[]  oldHashArea  =  _hashArea.getHashArea();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  final  int[]  oldHashArea  =  _hashArea.getHashArea();  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	final  int[]  oldHashArea  =  _hashArea.getHashArea();	  final    int[]    oldHashArea    =    _hashArea.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
61	[BUG]  [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
62	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
63	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldHashArea.length;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldHashArea.length;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldHashArea.length;  i++)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
64	[BUG]  [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  <  =  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  <  =  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  <  =  MAX_T_SIZE)  {	  if(oldCount    >    MAX_ENTRIES_FOR_REUSE    ||    newSize    <    =    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
65	[BUG]  [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  <  =  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  <  =  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  <  =  MAX_HASH_SIZE)  {	  if(oldCount    >    MAX_ENTRIES_FOR_REUSE    ||    newSize    <    =    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
66	[BUG]  [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  MAX_HASH_SIZE)  {	  if(oldCount    >    MAX_ENTRIES_FOR_REUSE    ||    newSize    <    =    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
67	[BUG]  [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  MAX_T_SIZE)  {	  if(oldCount    >    MAX_ENTRIES_FOR_REUSE    ||    newSize    <    =    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
69	[BUG]  [BUGGY]  if(oldNames[0]  ==  DEFAULT_T_SIZE  ||  oldNames[0]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[0]  ==  DEFAULT_T_SIZE  ||  oldNames[0]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[0]  ==  DEFAULT_T_SIZE  ||  oldNames[0]  ==  DEFAULT_T_SIZE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
70	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  2)  {	  if(oldNames!=    null    ||    oldNames.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
71	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  2  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames!=    null    ||    oldNames.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
72	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames!=    null    ||    oldNames.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
73	[BUG]  [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
74	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
75	[BUG]  [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
76	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
77	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
78	[BUG]  [BUGGY]  final  int[]  oldHashArea  =  _hashArea;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  final  int[]  oldHashArea  =  _hashArea;  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	final  int[]  oldHashArea  =  _hashArea;	  final    int[]    oldHashArea    =    _hashArea.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
79	[BUG]  [BUGGY]  final  int[]  oldHashArea  =  _hashArea.length,  newSize);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  final  int[]  oldHashArea  =  _hashArea.length,  newSize);  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	final  int[]  oldHashArea  =  _hashArea.length,  newSize);	  final    int[]    oldHashArea    =    _hashArea.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
80	[BUG]  [BUGGY]  final  int[]  oldHashArea  =  _hashArea.length  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  final  int[]  oldHashArea  =  _hashArea.length  +  1;  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	final  int[]  oldHashArea  =  _hashArea.length  +  1;	  final    int[]    oldHashArea    =    _hashArea.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
81	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]!=    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  if  (oldCount  >  MAX_T_SIZE  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if  (oldCount  >  MAX_T_SIZE  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if  (oldCount  >  MAX_T_SIZE  ||  oldCount  >  MAX_HASH_SIZE)  {	  if    (oldCount    >    MAX_T_SIZE    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
83	[BUG]  [BUGGY]  if  (oldCount  >  MAX_T_SIZE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if  (oldCount  >  MAX_T_SIZE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if  (oldCount  >  MAX_T_SIZE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {	  if    (oldCount    >    MAX_T_SIZE    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
84	[BUG]  [BUGGY]  if  (oldCount  <  MAX_T_SIZE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if  (oldCount  <  MAX_T_SIZE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if  (oldCount  <  MAX_T_SIZE  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if    (oldCount    >    MAX_T_SIZE    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
85	[BUG]  [BUGGY]  if(oldCount  <  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  MAX_ENTRIES_FOR_REUSE  ||  newSize  >  MAX_HASH_SIZE)  {	  if(oldCount    <    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
86	[BUG]  [BUGGY]  if(newSize  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(newSize  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(newSize  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {	  if(newSize    >    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
87	[BUG]  [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    ++i)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
88	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    ++i)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
89	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldHashArea.length;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldHashArea.length;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldHashArea.length;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    ++i)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
90	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  name)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  name)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  name)  {	  if(oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
91	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  name,  newSize)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  name,  newSize)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  name,  newSize)  {	  if(oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
92	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  name.toLowerCase())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  name.toLowerCase())  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  name.toLowerCase())  {	  if(oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
93	[BUG]  [BUGGY]  if  (oldCount  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if  (oldCount  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if  (oldCount  <  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE  ||  oldCount  >  MAX_T_SIZE)  {	  if    (oldCount    <    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  ==  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
95	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  =  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  =  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  =  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
96	[BUG]  [BUGGY]  final  int[]  oldHashArea  =  _hashArea.hashArea();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  final  int[]  oldHashArea  =  _hashArea.hashArea();  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	final  int[]  oldHashArea  =  _hashArea.hashArea();	  final    int[]    oldHashArea    =    _hashArea.clone();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  ==  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames!=    null    ||    oldNames.length    <    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
98	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  MIN_HASH_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  MIN_HASH_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  MIN_HASH_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames[oldCount]    ==    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
99	[BUG]  [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames[oldCount]    ==    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
100	[BUG]  [BUGGY]  _hashArea  =  new  String(name);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  _hashArea  =  new  String(name);  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	_hashArea  =  new  String(name);	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    _hashArea[i]    =    new    String(name);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
101	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0,  newCount  =  oldNames.length;  i  <  oldCount;  ++i)  {  _hashArea[i]  =  new  String(name);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0,  newCount  =  oldNames.length;  i  <  oldCount;  ++i)  {  _hashArea[i]  =  new  String(name);  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0,  newCount  =  oldNames.length;  i  <  oldCount;  ++i)  {  _hashArea[i]  =  new  String(name);  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    _hashArea[i]    =    new    String(name);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
102	[BUG]  [BUGGY]  if(oldCount  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
103	[BUG]  [BUGGY]  if(oldCount!=  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount!=  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount!=  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
104	[BUG]  [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_T_SIZE)  {	  if(oldCount    >    MAX_ENTRIES_FOR_REUSE    ||    newSize    <    =    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
105	[BUG]  [BUGGY]  if(oldCount  >=  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >=  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >=  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_T_SIZE)  {	  if(oldCount    >    MAX_ENTRIES_FOR_REUSE    ||    newSize    <    =    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
106	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  0  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  0  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  >  0  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames!=    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  if(oldCount  >  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    >    oldCount    &&    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
108	[BUG]  [BUGGY]  if(oldCount  >  oldCount  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  oldCount  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  oldCount  ||  oldCount  >  MAX_HASH_SIZE)  {	  if(oldCount    >    oldCount    &&    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
109	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  0  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  0  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >  0  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
111	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  2  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >=  2  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >=  2  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
112	[BUG]  [BUGGY]  if(newSize  <  =  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(newSize  <  =  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(newSize  <  =  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(newSize    <    =    oldCount    ||    newSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
113	[BUG]  [BUGGY]  int[]  oldHashArea  =  _hashArea.toArray(new  int[oldHashArea.length]);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  int[]  oldHashArea  =  _hashArea.toArray(new  int[oldHashArea.length]);  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	int[]  oldHashArea  =  _hashArea.toArray(new  int[oldHashArea.length]);	  int[]    oldHashArea    =    _hashArea.clone();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  name)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  name)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  name)  {	  if(oldNames!=    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
115	[BUG]  [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {	  if(oldCount    >    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
116	[BUG]  [BUGGY]  if(oldCount!=  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount!=  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount!=  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
117	[BUG]  [BUGGY]  if(oldCount  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  0)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
118	[BUG]  [BUGGY]  if(oldCount  ==  oldSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  oldSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  oldSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
119	[BUG]  [BUGGY]  final  int[]  oldHashArea  =  _hashArea.length  +  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  final  int[]  oldHashArea  =  _hashArea.length  +  2;  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	final  int[]  oldHashArea  =  _hashArea.length  +  2;	  final    int[]    oldHashArea    =    _hashArea.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
120	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  2)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  ==  2)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  ==  2)  {	  if(oldNames!=    null    ||    oldNames.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
121	[BUG]  [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]!=    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
122	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length!=  0)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
123	[BUG]  [BUGGY]  if(oldCount  ==  oldCount  &&  newSize  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  oldCount  &&  newSize  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  oldCount  &&  newSize  >  MAX_T_SIZE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
124	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
125	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  =  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
126	[BUG]  [BUGGY]  if(oldNames.length  <  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  <  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  <  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
127	[BUG]  [BUGGY]  if(oldCount  >  oldCount  &&  newSize  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  oldCount  &&  newSize  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  oldCount  &&  newSize  >  MAX_T_SIZE)  {	  if(oldCount    >    oldCount    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
128	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_MIN_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_MIN_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_MIN_HASH_SIZE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
129	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length!=  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length!=  MAX_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
130	[BUG]  [BUGGY]  if(oldNames.length  <  =  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldSize  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  <  =  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldSize  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  <  =  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldSize  >  MAX_HASH_SIZE)  {	  if(newSize    <    =    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
131	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
132	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldCount  >  MAX_HASH_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
133	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
134	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  name)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  name)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  name)  {	  if(oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
135	[BUG]  [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null  ||  oldNames[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null  ||  oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null  ||  oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
136	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]  ==  0)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
137	[BUG]  [BUGGY]  if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  MAX_T_SIZE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames.length    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
138	[BUG]  [BUGGY]  if(oldCount  <  oldCount  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  oldCount  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  oldCount  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(newSize    <    =    oldCount    ||    newSize    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
139	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
140	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  1)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  1)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  1)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
141	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
142	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  1)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  1)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  1)  {  for(int  i  =  0,  len  =  oldNames.length;  i  <  len;  ++i)  {  if(_hashArea[i]  ==  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    if(_hashArea[i]    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
143	[BUG]  [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  newSize  <  =  MAX_HASH_SIZE)  {	  if(oldCount    >    MAX_ENTRIES_FOR_REUSE    ||    newSize    <    =    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
144	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  name.toCharArray())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  name.toCharArray())  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  name.toCharArray())  {	  if(oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
145	[BUG]  [BUGGY]  if(oldNames[oldCount]!=  name)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]!=  name)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]!=  name)  {	  if(oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
146	[BUG]  [BUGGY]  _hashArea[0]  =  new  String(name);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  _hashArea[0]  =  new  String(name);  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	_hashArea[0]  =  new  String(name);	  if(oldNames!=    null)    {    for(int    i    =    0,    len    =    oldNames.length;    i    <    len;    ++i)    {    _hashArea[i]    =    new    String(name);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
147	[BUG]  [BUGGY]  if(oldCount  ==  oldCount  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  oldCount  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  oldCount  ||  newSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
148	[BUG]  [BUGGY]  if(oldCount  ==  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
149	[BUG]  [BUGGY]  if  (oldCount  <  oldCount  ||  oldCount  >  MAX_HASH_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if  (oldCount  <  oldCount  ||  oldCount  >  MAX_HASH_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if  (oldCount  <  oldCount  ||  oldCount  >  MAX_HASH_SIZE)  {	  if    (oldCount    <    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
150	[BUG]  [BUGGY]  if  (oldCount  <  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if  (oldCount  <  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if  (oldCount  <  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if    (oldCount    <    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
151	[BUG]  [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {	  if(oldNames[oldCount]    ==    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
152	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  name  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
153	[BUG]  [BUGGY]  if(oldNames[oldCount]  ==  newSize  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]  ==  newSize  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]  ==  newSize  ||  oldNames[oldCount]  ==  DEFAULT_ENTRIES_FOR_REUSE)  {	  if(oldNames[oldCount]    ==    DEFAULT_T_SIZE    ||    oldNames[oldCount]    ==    DEFAULT_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
154	[BUG]  [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldEnd  >  DEFAULT_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldEnd  >  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  >  newSize  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE  ||  oldEnd  >  DEFAULT_T_SIZE)  {	  if(oldCount    >    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
155	[BUG]  [BUGGY]  int[]  oldHashArea  =  _hashArea.hashCode();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  int[]  oldHashArea  =  _hashArea.hashCode();  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	int[]  oldHashArea  =  _hashArea.hashCode();	  int[]    oldHashArea    =    _hashArea.clone();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
156	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  2)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(_hashArea[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(_hashArea[i]!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
157	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  =  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  =  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  =  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
158	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
159	[BUG]  [BUGGY]  if(oldCount  <  =  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  =  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  =  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    <    =    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
160	[BUG]  [BUGGY]  if(oldCount  <  oldCount  ||  newSize  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  oldCount  ||  newSize  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  oldCount  ||  newSize  >  MAX_T_SIZE)  {	  if(oldCount    <    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
161	[BUG]  [BUGGY]  if  (oldCount  <  oldCount  ||  oldCount  >  MAX_T_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if  (oldCount  <  oldCount  ||  oldCount  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if  (oldCount  <  oldCount  ||  oldCount  >  MAX_T_SIZE)  {	  if    (oldCount    <    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_T_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
162	[BUG]  [BUGGY]  if(oldNames.length  <  =  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames.length  <  =  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames.length  <  =  oldCount  ||  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    <    =    newSize    ||    oldCount    >    MAX_ENTRIES_FOR_REUSE)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
163	[BUG]  [BUGGY]  if(oldNames[i]!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[i]!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[i]!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    ++i)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  	39	None	replace
164	[BUG]  [BUGGY]  if(oldHashArea!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldHashArea!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldHashArea!=  null)  {  for(int  i  =  0;  i  <  oldCount;  ++i)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    ++i)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  	39	None	replace
165	[BUG]  [BUGGY]  if(oldNames[i]!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[i]!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[i]!=  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  	28	None	replace
166	[BUG]  [BUGGY]  if(oldNames[i]  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[i]  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[i]  ==  null)  {  for(int  i  =  0;  i  <  oldCount;  i++)  {  if(oldNames[i]!=  null)  {  return;  }	  if(oldNames!=    null)    {    for(int    i    =    0;    i    <    oldCount;    i++)    {    if(oldNames[i]!=    null)    {    return;    }    	non-compiled	[CE]  	28	None	replace
167	[BUG]  [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_ENTRIES_FOR_REUSE)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  DEFAULT_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]!=    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  	15	None	replace
168	[BUG]  [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  MAX_ENTRIES_FOR_REUSE)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames[oldCount]!=  DEFAULT_T_SIZE  ||  oldNames[oldCount]!=  MAX_ENTRIES_FOR_REUSE)  {	  if(oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]!=    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  final  int[]  oldHashArea  =  _hashArea.hashCode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  final  int[]  oldHashArea  =  _hashArea.hashCode();  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	final  int[]  oldHashArea  =  _hashArea.hashCode();	  final    int[]    oldHashArea    =    _hashArea.clone();    	non-compiled	[CE]  	7	None	replace
170	[BUG]  [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  1)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames!=  null  ||  oldNames.length  <  1)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames!=  null  ||  oldNames.length  <  1)  {	  if(oldNames!=    null    ||    oldNames.length    <    2)    {    	non-compiled	[CE]  	46	None	replace
171	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  2  ||  oldNames[oldCount]  ==  DEFAULT_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    DEFAULT_T_SIZE)    {    	non-compiled	[CE]  	12	None	replace
172	[BUG]  [BUGGY]  if(oldCount  ==  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  ==  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  ==  oldCount  &&  oldCount  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    ==    MAX_ENTRIES_FOR_REUSE    ||    oldCount    >    MAX_HASH_SIZE)    {    	non-compiled	[CE]  	18	None	replace
173	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  =  MAX_T_SIZE)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  =  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  =  MAX_T_SIZE)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_T_SIZE)    {    	non-compiled	[CE]  	24	None	replace
174	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  1)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  <  1)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  <  1)  {	  if(oldNames    ==    null    ||    oldNames.length    <    MAX_T_SIZE)    {    	non-compiled	[CE]  	24	None	replace
175	[BUG]  [BUGGY]  if(oldCount  <  =  oldCount  &&  newSize  >  MAX_T_SIZE)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  =  oldCount  &&  newSize  >  MAX_T_SIZE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  =  oldCount  &&  newSize  >  MAX_T_SIZE)  {	  if(oldCount    <    =    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  	4	None	replace
176	[BUG]  [BUGGY]  if(oldCount  <  =  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldCount  <  =  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldCount  <  =  oldCount  &&  newSize  >  MAX_ENTRIES_FOR_REUSE)  {	  if(oldCount    <    =    MAX_ENTRIES_FOR_REUSE    ||    newSize    >    MAX_T_SIZE)    {    	non-compiled	[CE]  	4	None	replace
177	[BUG]  [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  name)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      final  int[]  oldHashArea  =  _hashArea;  final  String[]  oldNames  =  _names;  final  int  oldSize  =  _hashSize;  final  int  oldCount  =  _count;  final  int  newSize  =  oldSize  +  oldSize;  final  int  oldEnd  =  _spilloverEnd;          [BUGGY]  if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  name)  {  [BUGGY]      nukeSymbols(true);  return;  }  _hashArea  =  new  int[oldHashArea.length  +  (oldSize<<3)];  _hashSize  =  newSize;  _secondaryStart  =  (newSize  <<  2);  //  4  ints  per  entry  _tertiaryStart  =  _secondaryStart  +  (_secondaryStart  >>  1);  //  right  after  secondary  _tertiaryShift  =  _calcTertiaryShift(newSize);  [CLASS]  ByteQuadsCanonicalizer  TableInfo  [METHOD]  rehash  [RETURN_TYPE]  void  [VARIABLES]  boolean  _failOnDoS  _hashShared  _intern  _needRehash  failOnDoS  intern  ByteQuadsCanonicalizer  _parent  parent  src  AtomicReference  _tableInfo  int[]  _hashArea  hashArea  mainHash  oldHashArea  q  quads  String[]  _names  names  oldNames  String  name  int  DEFAULT_T_SIZE  MAX_ENTRIES_FOR_REUSE  MAX_T_SIZE  MIN_HASH_SIZE  MULT  MULT2  MULT3  _count  _hashSize  _longNameOffset  _secondaryStart  _seed  _spilloverEnd  _tertiaryShift  _tertiaryStart  bucketSize  childCount  copyCount  count  curr  end  flags  hash  i  ix  len  len2  longNameOffset  longStart  minAdd  newSize  next  offset  offset2  oldCount  oldEnd  oldSize  origOffset  pri  q1  q2  q3  qlen  qoff  sec  seed  size  spill  spillCount  spillOffset  spilloverEnd  start  sz  tert  tertiaryShift  toAdd  total  	projects/JacksonCore10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java	0.6666666666666666	1078	1078	4	replace	if(oldNames  ==  null  ||  oldNames.length  >  MAX_ENTRIES_FOR_REUSE  ||  oldNames[oldCount]  ==  name)  {	  if(oldNames!=    null    ||    oldNames.length    >    MAX_ENTRIES_FOR_REUSE    ||    oldNames[oldCount]    ==    name)    {    	non-compiled	[CE]  	14	None	replace
