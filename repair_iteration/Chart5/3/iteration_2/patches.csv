bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	12	3	add
2	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	12	3	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.remove(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        this.data.add(new    XYDataItem(x,    y));    this.data.remove(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	12	3	add
4	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.remove(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  this.data.remove(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        this.data.add(new    XYDataItem(x,    y));    this.data.remove(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	12	3	add
5	[BUG]  [BUGGY]  this.data.remove(index  -  1,  new  XYDataItem(x,  y));  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  this.data.remove(index  -  1,  new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	this.data.remove(index  -  1,  new  XYDataItem(x,  y));	          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.remove(index    -    1,    new    XYDataItem(x,    y));    }    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
7	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
9	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
11	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
12	[BUG]  [BUGGY]  XYDataItem  existing  =(XYDataItem)this.clone();  [CE]  'else'  without  'if'  [FE]                java.lang.IndexOutOfBoundsException:  Index:  -1      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  XYDataItem  existing  =(XYDataItem)this.clone();  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	XYDataItem  existing  =(XYDataItem)this.clone();	  XYDataItem    existing    =(XYDataItem)this.clone;    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
13	[BUG]  [BUGGY]  this.data.remove(new  XYDataItem(x,  y));  [CE]  'else'  without  'if'  [FE]        AssertionFailedError      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  this.data.remove(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	this.data.remove(new  XYDataItem(x,  y));	          this.data.add(new    XYDataItem(x,    y));    if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.remove(index    -    1,    new    XYDataItem(x,    y));    }    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
14	[BUG]  [BUGGY]  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    this.data.add(new    XYDataItem(x,    y));    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
15	[BUG]  [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
16	[BUG]  [BUGGY]  this.data.add(new  XYDataItem(x,  y),  index  +  1);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  this.data.add(new  XYDataItem(x,  y),  index  +  1);  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	this.data.add(new  XYDataItem(x,  y),  index  +  1);	  this.data.add(new    XYDataItem(x,    y),    index);    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
17	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  	22	2	replace
18	[BUG]  [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  	22	2	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	21	3	add
20	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	21	3	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	21	3	add
22	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	21	3	add
23	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	14	3	add
25	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	14	3	add
26	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.remove(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.remove(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
28	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.remove(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.remove(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.remove(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	14	2	add
29	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  -1    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues  &&  this.autoSort)  {  [BUGGY]      this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	if(this.allowDuplicateXValues  &&  this.autoSort)  {	  if(this.allowDuplicateXValues    ||    this.autoSort)    {    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  	10	1	replace
30	[BUG]  [BUGGY]  if(this.allowDuplicateXValues  &&  this.autoSort)  {  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  -1    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues  &&  this.autoSort)  {  [BUGGY]      this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues  &&  this.autoSort)  {	  if(this.allowDuplicateXValues    ||    this.autoSort)    {    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  	10	1	replace
31	[BUG]  [BUGGY]  if(!this.allowDuplicateXValues)  {  If(this.allowDuplicateXValues)  {  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  -1      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(!this.allowDuplicateXValues)  {  If(this.allowDuplicateXValues)  {  [BUGGY]      this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(!this.allowDuplicateXValues)  {  If(this.allowDuplicateXValues)  {	  if(this.allowDuplicateXValues)    {    If(this.allowDuplicateXValues)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
32	[BUG]  [BUGGY]  XYDataItem  existing  =(XYDataItem)this.data.get(index  -  1  +  1);  [CE]  'else'  without  'if'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  XYDataItem  existing  =(XYDataItem)this.data.get(index  -  1  +  1);  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	XYDataItem  existing  =(XYDataItem)this.data.get(index  -  1  +  1);	  XYDataItem    existing    =(XYDataItem)this.data.get(index    -    1);    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
33	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -2  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -2  	24	2	replace
34	[BUG]  [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -2  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -2  	24	2	replace
35	[BUG]  [BUGGY]  if(this.allowDuplicateXValues  ||  this.autoSort)  {  if(this.allowDuplicateXValues  ||  this.autoSort)  {  [CE]  illegal  start  of  expression  [FE]    java.lang.IndexOutOfBoundsException:  Index:  -1    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues  ||  this.autoSort)  {  if(this.allowDuplicateXValues  ||  this.autoSort)  {  [BUGGY]      this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues    ||    this.autoSort)    {    if(this.allowDuplicateXValues  ||  this.autoSort)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
36	[BUG]  [BUGGY]  if(this.allowDuplicateXValues  ||  this.autoSort)  {  If(this.allowDuplicateXValues  ||  this.autoSort)  {  [CE]  ';'  expected  [FE]      java.lang.IndexOutOfBoundsException:  Index:  -1    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues  ||  this.autoSort)  {  If(this.allowDuplicateXValues  ||  this.autoSort)  {  [BUGGY]      this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues    ||    this.autoSort)    {    If(this.allowDuplicateXValues  ||  this.autoSort)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
37	[BUG]  [BUGGY]  this.data.add(index,  new  XYDataItem(x,  y));  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  this.data.add(index,  new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	this.data.add(index,  new  XYDataItem(x,  y));	          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
38	[BUG]  [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    this.data.add(new    XYDataItem(x,    y));    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	23	3	add
40	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));	  	compilable	  [FE]  AssertionFailedError  	23	3	add
41	[BUG]  [BUGGY]  if(this.autoSort)  {  If(this.allowDuplicateXValues)  {  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  -1      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.autoSort)  {  If(this.allowDuplicateXValues)  {  [BUGGY]      this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.autoSort)  {  If(this.allowDuplicateXValues)  {	  if(this.allowDuplicateXValues)    {    If(this.allowDuplicateXValues)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	14	3	add
43	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	14	3	add
44	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XY  [CE]  '('  or  '['  expected  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XY  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XY	  	non-compiled	[CE]  '('  or  '['  expected	14	None	add
45	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        this.data.add(new    XYDataItem(x,    y));    if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	12	3	add
47	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        this.data.add(new    XYDataItem(x,    y));    if(this.allowDuplicateXValues)  {  this.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	12	3	add
48	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  This.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [CE]  package  This  does  not  exist  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    this.data.add(new  XYDataItem(x,  y));  This.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        this.data.add(new    XYDataItem(x,    y));    This.data.add(new  XYDataItem(x,  y));  this.data.add(new  XYDataItem(x,  y));	  	non-compiled	[CE]  package  This  does  not  exist	12	None	add
49	[BUG]  [BUGGY]  this.data.add(index  -  1,  new  XYDataItem(x,  y));  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  this.data.add(index  -  1,  new  XYDataItem(x,  y));  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	this.data.add(index  -  1,  new  XYDataItem(x,  y));	          this.data.add(new    XYDataItem(x,    y));    if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
50	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
51	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
52	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
54	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    if(this.allowDuplicateXValues)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	23	3	add
55	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(index,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(index,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	if(this.allowDuplicateXValues)  {  this.data.add(index,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(index,  new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  	24	2	replace
56	[BUG]  [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(index,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(index,  new  XYDataItem(x,  y));  }  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.allowDuplicateXValues)  {  this.data.add(index,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(index,  new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.allowDuplicateXValues)  {  this.data.add(index,  new  XYDataItem(x,  y));  if(this.autoSort)  {  this.data.add(index,  new  XYDataItem(x,  y));  }	          this.data.add(new    XYDataItem(x,    y));    if(this.autoSort)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(new    XYDataItem(x,    y));    }    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  -1  	24	2	replace
57	[BUG]  [BUGGY]  if(this.autoSort)  {  If(this.autoSort)  {  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  -1      [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]  if(this.autoSort)  {  If(this.autoSort)  {  [BUGGY]      this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	if(this.autoSort)  {  If(this.autoSort)  {	  if(this.allowDuplicateXValues)    {    If(this.allowDuplicateXValues)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	add	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	21	3	add
59	[BUG]  [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      catch  (CloneNotSupportedException  e)  {  throw  new  SeriesException(     "Couldn't  clone  XYDataItem!     ");  }  existing.setY(y);  }  else  {          [BUGGY]          this.data.add(new    XYDataItem(x,    y));    if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  [BUGGY]      if  (this.autoSort)  {  this.data.add(-index  -  1,  new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  }  [CLASS]  XYSeries  [METHOD]  addOrUpdate  [RETURN_TYPE]  XYDataItem  Number  x  Number  y  [VARIABLES]  boolean  allowDuplicateXValues  autoSort  dataRemoved  notify  Number  x  y  List  data  long  serialVersionUID  int  end  i  index  maximum  maximumItemCount  size  start  XYDataItem  existing  overwritten  CloneNotSupportedException  e  	projects/Chart5/source/org/jfree/data/xy/XYSeries.java	0.5773502691896258	563	563	1	replace	                this.data.add(new        XYDataItem(x,        y));        if(index    >=    0)    {    this.data.add(new    XYDataItem(x,    y));    }    else    {    this.data.add(-index    -    1,    new    XYDataItem(x,    y));    }    this.data.add(new  XYDataItem(x,  y));  if(index  >=  0)  {  this.data.add(new  XYDataItem(x,  y));  }  else  {  this.data.add(new  XYDataItem(x,  y));  }	  	compilable	  [FE]  AssertionFailedError  	21	3	add
