bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  an  :  n.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  n.getFirstChild())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  n.getFirstChild())  {	  for(Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  for(Node  an  :  n.getAncestors(),  level)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  n.getAncestors(),  level)  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  n.getAncestors(),  level)  {	  for(Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  for(Node  an  :  n.getChildren())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  n.getChildren())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  n.getChildren())  {	  for(Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  For  (Node  an  :  parent.getAncestors())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  For  (Node  an  :  parent.getAncestors())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	For  (Node  an  :  parent.getAncestors())  {	  For    (Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  For(Node  an  :  n.getAncestors(),  level)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  For(Node  an  :  n.getAncestors(),  level)  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	For(Node  an  :  n.getAncestors(),  level)  {	  For    (Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  For  (Node  an  :  n.getFirstChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  For  (Node  an  :  n.getFirstChild())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	For  (Node  an  :  n.getFirstChild())  {	  For    (Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  for(Node  an  :  this.node.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  this.node.getFirstChild())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  this.node.getFirstChild())  {	  for(Node    an    :    this.node.getAncestors())    {    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  for(Node  an  :  this.node.getAncestors(),  level)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  this.node.getAncestors(),  level)  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  this.node.getAncestors(),  level)  {	  for(Node    an    :    this.node.getAncestors())    {    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  Node  an  =  n.getFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  Node  an  =  n.getFirstChild();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	Node  an  =  n.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  Node  an  =  n.getLastChild();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  Node  an  =  n.getLastChild();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	Node  an  =  n.getLastChild();	      	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  Node  an  =  n.getParent();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  Node  an  =  n.getParent();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	Node  an  =  n.getParent();	      	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  Node  an  =  parent.getParent();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  Node  an  =  parent.getParent();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	Node  an  =  parent.getParent();	      	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  Node  an  =  parent.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  Node  an  =  parent.getFirstChild();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	Node  an  =  parent.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  Node  an  =  n.getNext();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  Node  an  =  n.getNext();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	Node  an  =  n.getNext();	      	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  int  anType  =  n.getType();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  int  anType  =  n.getType();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	int  anType  =  n.getType();	      	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  for(Node  an  :  gramps.getAncestors(),  level)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  gramps.getAncestors(),  level)  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  gramps.getAncestors(),  level)  {	  for(Node    an    :    gramps.getAncestors())    {    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  for(Node  an  :  gramps.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  gramps.getFirstChild())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  gramps.getFirstChild())  {	  for(Node    an    :    gramps.getAncestors())    {    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  for(Node  an  :  n.getChildCount())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  n.getChildCount())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  n.getChildCount())  {	  for(Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  for(Node  an  :  n.getParent())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  n.getParent())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  n.getParent())  {	  for(Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  for(Node  an  :  gramps.getOwnSideEffects())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  gramps.getOwnSideEffects())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  gramps.getOwnSideEffects())  {	  for(Node    an    :    gramps.getAncestors())    {    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  for(Node  an  :  gramps.getParent())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  gramps.getParent())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  gramps.getParent())  {	  for(Node    an    :    gramps.getAncestors())    {    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  Integer  an  =  n.getFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  Integer  an  =  n.getFirstChild();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	Integer  an  =  n.getFirstChild();	      	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  for(Node  an  :  this.node.getChildren())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  this.node.getChildren())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  this.node.getChildren())  {	  for(Node    an    :    this.node.getAncestors())    {    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  For(Node  an  :  n.getChildren())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  For(Node  an  :  n.getChildren())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	For(Node  an  :  n.getChildren())  {	  For    (Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  for(Node  an  :  n,  this.node.getAncestors())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  n,  this.node.getAncestors())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  n,  this.node.getAncestors())  {	  for(Node    an    :    this.node.getAncestors())    {    	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  for(Node  an  :  node.getAncestors())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  node.getAncestors())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  node.getAncestors())  {	  for(Node    an    :    this.node.getAncestors())    {    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  for(Node  an  :  gramps.getChildren())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  gramps.getChildren())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  gramps.getChildren())  {	  for(Node    an    :    gramps.getAncestors())    {    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  For(Node  an  :  n.getChildCount())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  For(Node  an  :  n.getChildCount())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	For(Node  an  :  n.getChildCount())  {	  For    (Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  For(Node  an  :  n.getOwnerFunctions())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  For(Node  an  :  n.getOwnerFunctions())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	For(Node  an  :  n.getOwnerFunctions())  {	  For    (Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  for(Node  an  :  n.getOwnerFunctions())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  for(Node  an  :  n.getOwnerFunctions())  {  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	for(Node  an  :  n.getOwnerFunctions())  {	  for(Node    an    :    n.getAncestors())    {    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  int  anType  =  an.getType();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {    [BUGGY]  int  anType  =  an.getType();  [BUGGY]    int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	112	112	1	replace	int  anType  =  an.getType();	      	non-compiled	[CE]  	4	None	replace
