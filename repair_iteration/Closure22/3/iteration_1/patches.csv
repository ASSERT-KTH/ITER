bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  return;  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.getType()  ==  Token.FUNCTION)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
2	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
8	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
9	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  parent);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  parent);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  parent);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
10	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  msg);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  msg);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  msg);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
11	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestor);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestor);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestor);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
12	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
13	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  message);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  message);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  message);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
14	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isResultUsed);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isResultUsed);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  isResultUsed);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
16	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
17	[BUG]  [BUGGY]  AssertionFailedError.warning(t,  n,  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  AssertionFailedError.warning(t,  n,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	AssertionFailedError.warning(t,  n,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
18	[BUG]  [BUGGY]  AssertionFailedError  msg  =  new  AssertionFailedError(t,  n,  level);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  AssertionFailedError  msg  =  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	AssertionFailedError  msg  =  new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
19	[BUG]  [BUGGY]  AssertionFailedError.make(t,  n,  level,  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  AssertionFailedError.make(t,  n,  level,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	AssertionFailedError.make(t,  n,  level,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
20	[BUG]  [BUGGY]  t.report(n,  level,  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
21	[BUG]  [BUGGY]  AssertionFailedError  msg  =  new  AssertionFailedError(t,  n,  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  AssertionFailedError  msg  =  new  AssertionFailedError(t,  n,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	AssertionFailedError  msg  =  new  AssertionFailedError(t,  n,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
22	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  level);  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  level);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
23	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  level);  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  level);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
24	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  level,  PROTECTOR_FN);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  level,  PROTECTOR_FN);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  level,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
25	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
26	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
28	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  INVALID_COMMA);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  INVALID_COMMA);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  INVALID_COMMA);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getType()));  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getType()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(n.getType()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  String  level  =  n.getLevel();  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  String  level  =  n.getLevel();  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	String  level  =  n.getLevel();	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalStateException( " ".getMessage());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Context.reportCodeChange();  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Context.reportCodeChange();	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level!=  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FAILURE)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FAILURE)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FAILURE)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  >=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  >=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  >=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
42	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_RESULT)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_RESULT)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_RESULT)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
43	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  return;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FAILURE)  {  return;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FAILURE)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_FAILURE)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
47	[BUG]  [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  return;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level!=  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
48	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  return;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_EXPR_RESULT)  {  return;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_EXPR_RESULT)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_EXPR_RESULT)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  return;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_COMMA)  {  return;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_COMMA)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_COMMA)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  n.getType())  {  return;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  n.getType())  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  n.getType())  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPR_RESULT)  {  return;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPR_RESULT)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPR_RESULT)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  return;  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.getType()  ==  Token.NAME)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
55	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.NAME)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  n.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  n.getType()  ==  Token.NAME)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
56	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return;  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return;  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return;  }  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  level));  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  level));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  level));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  level);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY),  level);	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  Node  an  =  n.getFirstChild();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Node  an  =  n.getFirstChild();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Node  an  =  n.getFirstChild();  parent.replaceChild(n,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.EMPTY));  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  n.replaceChild(parent,  new  Node(Token.EMPTY));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	n.replaceChild(parent,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  node.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  node.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	node.replaceChild(n,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
66	[BUG]  [BUGGY]  AssertionFailedError.warning(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  AssertionFailedError.warning(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	AssertionFailedError.warning(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
67	[BUG]  [BUGGY]  AssertionFailedError.make(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  AssertionFailedError.make(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	AssertionFailedError.make(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
68	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
69	[BUG]  [BUGGY]  t.report(n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
70	[BUG]  [BUGGY]  Node  an  =  n.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Node  an  =  n.getFirstChild();  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Node  an  =  n.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  Node  an  =  n.getLastChild();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Node  an  =  n.getLastChild();  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Node  an  =  n.getLastChild();	      	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Context.checkState(n.getType()  ==  Token.VAR);	      	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  Node  an  =  n.getParent();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Node  an  =  n.getParent();  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Node  an  =  n.getParent();	      	non-compiled	[CE]  	8	None	replace
74	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Context.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	8	None	replace
75	[BUG]  [BUGGY]  ||  parent.getType()  ==  Token.VAR)  {  return;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  parent.getType()  ==  Token.VAR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  parent.getType()  ==  Token.VAR)  {  return;	  ||    n.getType()    ==    Token.VAR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
76	[BUG]  [BUGGY]  ||  n.getType()!=  Token.VAR)  {  return;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  n.getType()!=  Token.VAR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  n.getType()!=  Token.VAR)  {  return;	  ||    n.getType()    ==    Token.VAR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
77	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  n.getType()  ==  Token.VAR)  {  throw  new  IllegalArgumentException( " ");	  ||    n.getType()    ==    Token.VAR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
78	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  n.getType()  ==  Token.VAR)  {  throw  new  IllegalStateException( " ");	  ||    n.getType()    ==    Token.VAR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
79	[BUG]  [BUGGY]  |  n.getType()  ==  Token.VAR)  {  return;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  |  n.getType()  ==  Token.VAR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	|  n.getType()  ==  Token.VAR)  {  return;	  ||    n.getType()    ==    Token.VAR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
80	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  return;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  return;	  ||    n.getType()    ==    Token.VAR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
81	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FAILURE)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
82	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
83	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
84	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_RESULT)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_RESULT)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_RESULT)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
85	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FUNCTION)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  }	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  level));  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  level));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  level));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
88	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  level);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  level);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
89	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	n.replaceChild(parent,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
90	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  msg);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  msg);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  msg);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
91	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  null);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  null);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  null);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
92	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  UNKNOWN_STRICT_ERROR);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  UNKNOWN_STRICT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  UNKNOWN_STRICT_ERROR);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
93	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  MISSING_CODE_ERROR);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  MISSING_CODE_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  MISSING_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
94	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_STRICT_MODULE);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_STRICT_MODULE);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  NON_STRICT_MODULE);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
95	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n,  level,  null);  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  new  AssertionFailedError(t,  n,  level,  null);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	new  AssertionFailedError(t,  n,  level,  null);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
96	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
97	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
98	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(n.getString()));  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(n.getString()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(n.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
99	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getType()));  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getType()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(n.getType()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
100	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
101	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	new  AssertionFailedError(t,  n.getString(),  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
102	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_TYPE);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_TYPE);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  UNKNOWN_EXPR_TYPE);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
103	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.SCRIPT)  {  return;  }  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.SCRIPT)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.SCRIPT)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
104	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return;  }  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
105	[BUG]  [BUGGY]  safeTree(n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  safeTree(n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	safeTree(n,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
106	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n,  level);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
107	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getLineno(),  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getLineno(),  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getLineno(),  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
108	[BUG]  [BUGGY]  t.report(n,  USELESS_CODE_ERROR);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
109	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getLineno(),  n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getLineno(),  n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getLineno(),  n,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
110	[BUG]  [BUGGY]  safeTree(n,  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  safeTree(n,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	safeTree(n,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
111	[BUG]  [BUGGY]  test(t,  n,  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  test(t,  n,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	test(t,  n,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
112	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getLineno(),  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getLineno(),  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getLineno(),  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
113	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR));	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
114	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(JSError.make(t,  n,  level),  USELESS_CODE_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
115	[BUG]  [BUGGY]  ||  level!=  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  return;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level!=  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level!=  USELESS_CODE_ERROR  &&  level!=  USELESS_CODE_ERROR)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
116	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  >=  USELESS_CODE_ERROR)  {  return;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  >=  USELESS_CODE_ERROR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  >=  USELESS_CODE_ERROR)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
117	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  }	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
118	[BUG]  [BUGGY]  ||  level  ==  USELESS_COMMA  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_COMMA  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_COMMA  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
119	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_EXTENDS)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_EXTENDS)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_EXTENDS)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
120	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_COMMA)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_COMMA)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_COMMA)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
121	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	1	None	replace
122	[BUG]  [BUGGY]  new  IllegalArgumentException( " ");  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	1	None	replace
123	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  gramps);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  gramps);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY),  gramps);	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
124	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  n));  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  n));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  n));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
125	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  PROTECTOR_FN));  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  PROTECTOR_FN));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  PROTECTOR_FN));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
126	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  this));  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  this));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  this));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
127	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  n);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  n);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY),  n);	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
128	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  1));  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  1));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  1));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
129	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  n.getType()  ==  Token.VAR)  {  return;  }	  ||    n.getType()    ==    Token.VAR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
130	[BUG]  [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n.getString());  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n.getString());  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  USELESS_CODE_ERROR,  n.getString());	      	non-compiled	[CE]  	8	None	replace
131	[BUG]  [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  USELESS_CODE_ERROR);	      	non-compiled	[CE]  	8	None	replace
132	[BUG]  [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  msg);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  msg);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  USELESS_CODE_ERROR,  msg);	      	non-compiled	[CE]  	8	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	8	None	replace
134	[BUG]  [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n.getFirstChild());  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n.getFirstChild());  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  USELESS_CODE_ERROR,  n.getFirstChild());	      	non-compiled	[CE]  	8	None	replace
135	[BUG]  [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n.getLineno());  [CE]  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n.getLineno());  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  USELESS_CODE_ERROR,  n.getLineno());	      	non-compiled	[CE]  	8	None	replace
136	[BUG]  [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n);  [CE]  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.report(n,  level,  USELESS_CODE_ERROR,  n);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.report(n,  level,  USELESS_CODE_ERROR,  n);	      	non-compiled	[CE]  	8	None	replace
137	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  gramps);  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  gramps);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  gramps);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
138	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
139	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  n));  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  n));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  n));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
140	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  msg));  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  msg));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  msg));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
141	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  this));  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  this));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  this));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
142	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  n);  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  n);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  n);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
143	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  return;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  &&  level  ==  USELESS_CODE_ERROR)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
144	[BUG]  [BUGGY]  SecurityContext.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  SecurityContext.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	SecurityContext.checkState(n.getType()  ==  Token.EXPR_RESULT);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
145	[BUG]  [BUGGY]  SecurityContext.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  SecurityContext.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	SecurityContext.checkState(n.getType()  ==  Token.NAME);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
146	[BUG]  [BUGGY]  SecurityContext.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  SecurityContext.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	SecurityContext.checkState(n.getType()  ==  Token.FUNCTION);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	2	None	replace
147	[BUG]  [BUGGY]  ||  level  ==  USELESS_COMMA  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_COMMA  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_COMMA  ||  level  ==  USELESS_CODE_ERROR)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
148	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_EXTENDS)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_EXTENDS)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_EXTENDS)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
149	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_COMMA)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_COMMA)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_COMMA)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
150	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT)  {  return;  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.SCRIPT)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  	12	None	replace
151	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  name);  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  name);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  name);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
152	[BUG]  [BUGGY]  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
153	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  PROTECTOR_FN);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  PROTECTOR_FN);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  PROTECTOR_FN);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
154	[BUG]  [BUGGY]  Throwables.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.checkState(n.getType()  ==  Token.NAME);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
155	[BUG]  [BUGGY]  ||  level  ==  USELESS_COMMA  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_COMMA  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_COMMA  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
156	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	t.getCompiler().reportCodeChange();	      	non-compiled	[CE]  	8	None	replace
157	[BUG]  [BUGGY]  gramps.getParent().replaceChild(n,  parent);  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  gramps.getParent().replaceChild(n,  parent);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	gramps.getParent().replaceChild(n,  parent);	      	non-compiled	[CE]  	8	None	replace
158	[BUG]  [BUGGY]  n.setString(PROTECTOR_FN);  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  n.setString(PROTECTOR_FN);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	n.setString(PROTECTOR_FN);	      	non-compiled	[CE]  	8	None	replace
159	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  n.removeChild(parent);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	n.removeChild(parent);	      	non-compiled	[CE]  	8	None	replace
160	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2)  {  return;  }  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
161	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n)  {  return;  }  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
162	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1)  {  return;  }  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1)  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
163	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getString().equals( "name "))  {  return;  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getString().equals( "name "))  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getString().equals( "name "))  {  return;  }	  if(n.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	9	None	replace
164	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
165	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FLUSH)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FLUSH)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FLUSH)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
166	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  AssertionFailedError(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
167	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  level);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.throw  new  AssertionFailedError(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.throw  new  AssertionFailedError(t,  n,  NON_GLOBAL_DEFINE_INIT_ERROR,  level);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
168	[BUG]  [BUGGY]  return  new  AssertionFailedError(t,  n,  level);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  return  new  AssertionFailedError(t,  n,  level);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	return  new  AssertionFailedError(t,  n,  level);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_DEFINE_INIT_ERROR);    	non-compiled	[CE]  	16	None	replace
169	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  n.cloneTree()));  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  n.cloneTree()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  n.cloneTree()));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
170	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  t.getModule()));  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  t.getModule()));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  t.getModule()));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  	11	None	replace
171	[BUG]  [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  return;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
172	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  return;  }	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
173	[BUG]  [BUGGY]  reportError(t,  n,  level,  USELESS_CODE_ERROR);  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  reportError(t,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	reportError(t,  n,  level,  USELESS_CODE_ERROR);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	1	None	replace
174	[BUG]  [BUGGY]  reportError(t,  n,  level,  USELESS_CODE_ERROR,  n.getString());  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  reportError(t,  n,  level,  USELESS_CODE_ERROR,  n.getString());  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	reportError(t,  n,  level,  USELESS_CODE_ERROR,  n.getString());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	1	None	replace
175	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ")  &&  n.getString().endsWith( "__ "));  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  IllegalArgumentException( " ")  &&  n.getString().endsWith( "__ "));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  IllegalArgumentException( " ")  &&  n.getString().endsWith( "__ "));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	1	None	replace
176	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  throw  new  IllegalStateException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
177	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  gramps));  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  gramps));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  gramps));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
178	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  1));  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  1));  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  1));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  	10	None	replace
179	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  NON_GLOBAL_EXPR_RESULT);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  NON_GLOBAL_EXPR_RESULT);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
180	[BUG]  [BUGGY]  Throwables.checkArgument(n.getType()  ==  Token.NAME);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throwables.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throwables.checkArgument(n.getType()  ==  Token.NAME);	  throw    new    AssertionFailedError(t,    n,    NON_GLOBAL_EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
181	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_EXPECTED);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_EXPECTED);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_EXPECTED);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
182	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_ERROR);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_ERROR);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  NON_GLOBAL_ERROR);	  throw    new    AssertionFailedError(t,    n,    null);    	non-compiled	[CE]  	17	None	replace
183	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FLUSH)  {  return;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FLUSH)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_FLUSH)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
184	[BUG]  [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  return;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  return;  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level  ==  USELESS_CODE_ERROR  ||  level  ==  USELESS_CODE_EXPECTED)  {  return;	  ||    level    ==    USELESS_CODE_ERROR    ||    level    ==    USELESS_CODE_ERROR)    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
185	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  msg);  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  msg);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n.getString(),  PROTECTOR_FN,  msg);	  throw    new    AssertionFailedError(t,    n.getString(),    PROTECTOR_FN);    	non-compiled	[CE]  	14	None	replace
186	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  annotated);  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  annotated);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  annotated);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
187	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  anon);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  anon);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  anon);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
188	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  an);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  an);  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	throw  new  AssertionFailedError(t,  n,  level,  USELESS_CODE_ERROR,  an);	  throw    new    AssertionFailedError(t,    n,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  	15	None	replace
189	[BUG]  [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  ||  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	||  level!=  USELESS_CODE_ERROR  ||  level!=  USELESS_CODE_ERROR)  {  throw  new  IllegalArgumentException( " ");	  ||    level    ==    USELESS_CODE_ERROR    ||    level!=    USELESS_CODE_ERROR)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
190	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  return;  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  	12	None	replace
191	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n)  {  return;  }  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n)  {  return;  }  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n)  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  	12	None	replace
192	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {      if  (n.isEmpty()  ||  n.isComma())  {    [BUGGY]  Throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	91	91	1	replace	Throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  not  a  statement	2	None	replace
