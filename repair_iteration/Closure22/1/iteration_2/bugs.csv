bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  an.getFirstChild();  n  =  an.getFirstChild();  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  n  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    n  =  an.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	1	None	add
2	[BUG]  [BUGGY]  n  =  an.getFirstChild();  n  =  an.getLastChild();  [CE]  cannot  find  symbol  isResultUsed  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  n  =  an.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    n  =  an.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	1	None	add
3	[BUG]  [BUGGY]  n  =  an.getFirstChild();  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    junit.framework.AssertionFailedError:  There  should  be  one  warning;	  	non-compiled	[CE]  not  a  statement	1	None	add
4	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  n.getParent();  [CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  n.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  gramps  =  n.getParent();	  	non-compiled	[CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	1	None	add
5	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  an  =  n.getFirstChild();  [CE]  variable  an  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  an  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  an  =  n.getFirstChild();	  	non-compiled	[CE]  variable  an  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	1	None	add
6	[BUG]  [BUGGY]  n  =  an.getFirstChild();  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	1	None	add
7	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  n.getFirstChild();  [CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  gramps  =  n.getFirstChild();	  	non-compiled	[CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	1	None	add
8	[BUG]  [BUGGY]  n  =  an.getFirstChild();  n  =  parent.getLastChild();  [CE]  cannot  find  symbol  isResultUsed  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    n  =  parent.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	1	None	add
9	[BUG]  [BUGGY]  Node  gramps  =  an.getParent();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  Node  gramps  =  an.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	Node  gramps  =  an.getParent();	      	non-compiled	[CE]  not  a  statement	12	None	replace
10	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	junit.framework.AssertionFailedError:  There  should  be  one  warning;	      	non-compiled	[CE]  not  a  statement	12	None	replace
11	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;	      	non-compiled	[CE]  not  a  statement	12	None	replace
12	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  isResultUsed  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().reportCodeChange();	      	non-compiled	[CE]  cannot  find  symbol  isResultUsed	12	None	replace
13	[BUG]  [BUGGY]  Node  gramps  =  an.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  Node  gramps  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	Node  gramps  =  an.getFirstChild();	      	non-compiled	[CE]  not  a  statement	12	None	replace
14	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning  for  an;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning  for  an;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	junit.framework.AssertionFailedError:  There  should  be  one  warning  for  an;	      	non-compiled	[CE]  not  a  statement	12	None	replace
15	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;	      	non-compiled	[CE]  not  a  statement	12	None	replace
16	[BUG]  [BUGGY]  n  =  an.getLastChild();  n  =  an.getLastChild();  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  n  =  an.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    n  =  an.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	3	None	add
17	[BUG]  [BUGGY]  n  =  an.getLastChild();  n  =  an.getFirstChild();  [CE]  cannot  find  symbol  isResultUsed  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  n  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    n  =  an.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	3	None	add
18	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  an  =  n.getFirstChild();  [CE]  variable  an  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  an  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  an  =  n.getFirstChild();	  	non-compiled	[CE]  variable  an  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	3	None	add
19	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  n.getParent();  [CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  n.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  gramps  =  n.getParent();	  	non-compiled	[CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	3	None	add
20	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  n.getFirstChild();  [CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  gramps  =  n.getFirstChild();	  	non-compiled	[CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	3	None	add
21	[BUG]  [BUGGY]  n  =  an.getLastChild();  n  =  parent.getLastChild();  [CE]  cannot  find  symbol  isResultUsed  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  n  =  parent.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    n  =  parent.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	3	None	add
22	[BUG]  [BUGGY]  n  =  an.getLastChild();  n  =  parent.getFirstChild();  [CE]  cannot  find  symbol  isResultUsed  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    n  =  parent.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  isResultUsed	3	None	add
23	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  an.getParent();  [CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  an.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  gramps  =  an.getParent();	  	non-compiled	[CE]  variable  gramps  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	3	None	add
24	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  cannot  find  symbol  isResultUsed  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  isResultUsed	21	None	replace
25	[BUG]  [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  cannot  find  symbol  isResultUsed  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  isResultUsed	21	None	replace
26	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  cannot  find  symbol  isResultUsed  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.COMMA  ||  ancestorType!=  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  isResultUsed	21	None	replace
27	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  &&  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  cannot  find  symbol  isResultUsed  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  &&  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.COMMA  &&  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  isResultUsed	21	None	replace
28	[BUG]  [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  cannot  find  symbol  isResultUsed  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  isResultUsed	21	None	replace
29	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  &&  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  cannot  find  symbol  isResultUsed  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  &&  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  &&  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  isResultUsed	21	None	replace
30	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)&&  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
31	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(n)||  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  	22	None	replace
32	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  	22	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(ancestorType)||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(ancestorType)||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(ancestorType)||  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  	22	None	replace
34	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  	14	None	replace
35	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN));  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  	14	None	replace
36	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  USELESS_CODE_ERROR));  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  USELESS_CODE_ERROR));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  USELESS_CODE_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  	14	None	replace
37	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  parent));  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  parent));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  parent));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  	14	None	replace
38	[BUG]  [BUGGY]  n.removeChild(ancestor);  [CE]  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(ancestor);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(ancestor);	  n.removeChild(an);    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  n.removeChild(ancestorType);  [CE]  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(ancestorType);	  n.removeChild(an);    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  NodeUtil.removeChild(an);  [CE]  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  NodeUtil.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	NodeUtil.removeChild(an);	  n.removeChild(an);    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  n.addChildToFront(an);  [CE]  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.addChildToFront(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.addChildToFront(an);	  n.removeChild(an);    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  n.replaceChild(an,  level);  [CE]  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.replaceChild(an,  level);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.replaceChild(an,  level);	  n.removeChild(an);    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  n.removeChild(ans);  [CE]  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(ans);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(ans);	  n.removeChild(an);    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  if(isSimpleOp)  {  continue;  }  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(isSimpleOp)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(isSimpleOp)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleOp)  {  continue;  }  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(isResultUsed  ||  isSimpleOp)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(isResultUsed  ||  isSimpleOp)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  if(level  ==  USELESS_CODE_ERROR)  {  continue;  }  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(level  ==  USELESS_CODE_ERROR)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(level  ==  USELESS_CODE_ERROR)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  if(ancestorType)  {  continue;  }  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  if(isResultUsed  ||  isSimpleEffectFreeCode)  {  continue;  }  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(isResultUsed  ||  isSimpleEffectFreeCode)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(isResultUsed  ||  isSimpleEffectFreeCode)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR),  ANCEstorType);  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR),  ANCEstorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR),  ANCEstorType);	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level1,  USELESS_CODE_ERROR),  ancestorType);  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level1,  USELESS_CODE_ERROR),  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level1,  USELESS_CODE_ERROR),  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR,  ancestorType);  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR,  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR,  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  	15	None	replace
52	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  n,  USELESS_CODE_ERROR),  ancestorType);  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  n,  USELESS_CODE_ERROR),  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  n,  USELESS_CODE_ERROR),  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  	15	None	replace
53	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning;	  	non-compiled	[CE]  not  a  statement	5	None	add
54	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	5	None	add
55	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  an  =  n.getFirstChild();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  an  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    Node  an  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	5	None	add
56	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getParent();  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    Node  gramps  =  n.getParent();	  	non-compiled	[CE]  	5	None	add
57	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	5	None	add
58	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getFirstChild();  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    Node  gramps  =  n.getFirstChild();	  	non-compiled	[CE]  	5	None	add
59	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  exception.  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  exception.  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  exception.	  	non-compiled	[CE]  not  a  statement	5	None	add
60	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  parent.getParent();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  parent.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    Node  gramps  =  parent.getParent();	  	non-compiled	[CE]  	5	None	add
61	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  n,  USELESS_CODE_ERROR,  ancestorType));  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  n,  USELESS_CODE_ERROR,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  n,  USELESS_CODE_ERROR,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  	13	None	replace
62	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ANCEstorType));  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ANCEstorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ANCEstorType));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  	13	None	replace
63	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR,  ancestorType));  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  	13	None	replace
64	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning;	  	non-compiled	[CE]  not  a  statement	23	None	add
65	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	23	None	add
66	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getParent();  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    Node  gramps  =  n.getParent();	  	non-compiled	[CE]  	23	None	add
67	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  an  =  n.getFirstChild();  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  an  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    Node  an  =  n.getFirstChild();	  	non-compiled	[CE]  	23	None	add
68	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  and  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	23	None	add
69	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    Node  gramps  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	23	None	add
70	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  exception.  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  exception.  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  exception.	  	non-compiled	[CE]  not  a  statement	23	None	add
71	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  parent.getParent();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  parent.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    Node  gramps  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	23	None	add
72	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR));  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR));    	non-compiled	[CE]  	16	None	replace
73	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  Level.WARNING,  USELESS_CODE_ERROR));  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  Level.WARNING,  USELESS_CODE_ERROR));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  Level.WARNING,  USELESS_CODE_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR));    	non-compiled	[CE]  	16	None	replace
74	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  node,  USELESS_CODE_ERROR));  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  node,  USELESS_CODE_ERROR));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  node,  USELESS_CODE_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR));    	non-compiled	[CE]  	16	None	replace
75	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  not  a  statement	20	None	add
76	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning;	  	non-compiled	[CE]  not  a  statement	20	None	add
77	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  return;  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  return;  }	  	non-compiled	[CE]  not  a  statement	20	None	add
78	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  not  a  statement	20	None	add
79	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  break;  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  break;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  break;  }	  	non-compiled	[CE]  not  a  statement	20	None	add
80	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	20	None	add
81	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  return;  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  return;  }	  	non-compiled	[CE]  not  a  statement	20	None	add
82	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  break;  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  break;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  break;  }	  	non-compiled	[CE]  not  a  statement	20	None	add
83	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  parent.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  parent.getLastChild();	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
84	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  parent.getFirstChild();	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
85	[BUG]  [BUGGY]  n  =  an.getLastChild()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild()  +  1;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getLastChild()  +  1;	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
86	[BUG]  [BUGGY]  n  =  an.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getNext();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getNext();	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
87	[BUG]  [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType!=  Token.COMMA)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
88	[BUG]  [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType!=  Token.COMMA)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
89	[BUG]  [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.EXPR_RESULT)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
90	[BUG]  [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
91	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(n)||  ancestorType!=  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
92	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(ancestorType)||  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(ancestorType)||  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(ancestorType)||  ancestorType!=  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
93	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(n))  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  isResultUsed)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  isResultUsed)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)&&  isResultUsed)  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
97	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.FUNCTION)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.FUNCTION)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.FUNCTION)  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
98	[BUG]  [BUGGY]      Node  an  =  n.getFirstChild();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]      Node  an  =  n.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	        Node  an  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	11	None	add
99	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
100	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN),  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN),  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN),  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
101	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
102	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  USELESS_CODE_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  USELESS_CODE_ERROR);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  USELESS_CODE_ERROR);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
103	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType),  PROTECTOR_FN);  [CE]  class,  interface,  or  enum  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType),  PROTECTOR_FN);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType),  PROTECTOR_FN);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
104	[BUG]  [BUGGY]  n.removeChild(an);  n.removeChild(an);  [CE]  class,  interface,  or  enum  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  n.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    n.removeChild(an);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
105	[BUG]  [BUGGY]  n.removeChild(an);  if  (ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  n.removeChild(an);  }  [CE]  class,  interface,  or  enum  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  if  (ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  n.removeChild(an);  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    if  (ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  n.removeChild(an);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
106	[BUG]  [BUGGY]  n.removeChild(an);  if  (ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  else  break;  [CE]  class,  interface,  or  enum  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  if  (ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  else  break;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    if  (ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  else  break;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
107	[BUG]  [BUGGY]  n.removeChild(an);  if(ancestorType  ==  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  n.removeChild(an);  }  [CE]  class,  interface,  or  enum  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  if(ancestorType  ==  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  n.removeChild(an);  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    if(ancestorType  ==  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  n.removeChild(an);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
108	[BUG]  [BUGGY]  n.removeChild(an);  if(n.getType()  ==  Token.COMMA)  {  n.removeChild(an);  }  [CE]  class,  interface,  or  enum  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  if(n.getType()  ==  Token.COMMA)  {  n.removeChild(an);  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    if(n.getType()  ==  Token.COMMA)  {  n.removeChild(an);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
109	[BUG]  [BUGGY]  n  =  an.getChildCount();  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getChildCount();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getChildCount();	  n    =    an.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
110	[BUG]  [BUGGY]  n  =  an.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getParent();	  n    =    an.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
111	[BUG]  [BUGGY]  n  =  an.getSimpleOp();  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getSimpleOp();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getSimpleOp();	  n    =    an.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
112	[BUG]  [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.EXPR_RESULT  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
113	[BUG]  [BUGGY]  if(!protectSideEffectFreeCode)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!protectSideEffectFreeCode)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!protectSideEffectFreeCode)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
114	[BUG]  [BUGGY]  if(!isSimpleOp)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!isSimpleOp)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!isSimpleOp)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
115	[BUG]  [BUGGY]  if(!protectionSideEffectFreeCode)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!protectionSideEffectFreeCode)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!protectionSideEffectFreeCode)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
116	[BUG]  [BUGGY]  if(!level.isResultUsed)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!level.isResultUsed)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!level.isResultUsed)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
117	[BUG]  [BUGGY]  if(!resultUsed)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!resultUsed)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!resultUsed)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
118	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
119	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType,  PROTECTOR_FN));  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType,  PROTECTOR_FN));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType,  PROTECTOR_FN));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
120	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg,  ancestorType));  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
121	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN,  ancestorType));  [CE]  class,  interface,  or  enum  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  PROTECTOR_FN,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
122	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType,  proTECTOR_FN));  [CE]  class,  interface,  or  enum  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType,  proTECTOR_FN));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType,  proTECTOR_FN));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
123	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  There  should  be  one  warning  associated  with  an;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]      junit.framework.AssertionFailedError:  There  should  be  one  warning  associated  with  an;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	        junit.framework.AssertionFailedError:  There  should  be  one  warning  associated  with  an;	  	non-compiled	[CE]  not  a  statement	11	None	add
124	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  There  should  be  one  warning  (see  org.apache.commons.jdk.internal.StripProtection)  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]      junit.framework.AssertionFailedError:  There  should  be  one  warning  (see  org.apache.commons.jdk.internal.StripProtection)  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	        junit.framework.AssertionFailedError:  There  should  be  one  warning  (see  org.apache.commons.jdk.internal.StripProtection)	  	non-compiled	[CE]  not  a  statement	11	None	add
125	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an,  ancestorType));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
126	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  an,  ancestorType));  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  an,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  an,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
127	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
128	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  continue;  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  continue;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  continue;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	add
129	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
130	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
131	[BUG]  [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.EXPR_RESULT  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
132	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
133	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
134	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  an.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  an.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  gramps  =  an.getParent();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	add
135	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  an.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  gramps  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  gramps  =  an.getFirstChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	add
136	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  an  =  n.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  an  =  n.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  an  =  n.getLastChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	add
137	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  an  =  an.getFirstChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	add
138	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  n  =  an.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  n  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  n  =  an.getFirstChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	add
139	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,an,  USELESS_CODE_ERROR,  n));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,an,  USELESS_CODE_ERROR,  n));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,an,  USELESS_CODE_ERROR,  n));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
140	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR,  ancestorType));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR,  ancestorType));	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
141	[BUG]  [BUGGY]  n  =  an.getFirstChild()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild()  +  1;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getFirstChild()  +  1;	  n    =    an.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
142	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  ancestor);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  ancestor);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  PROTECTOR_FN,  ancestorType),  ancestor);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
143	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
144	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.EXPR_RESULT)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
145	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning  and  there  should  be  one;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning  and  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning  and  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	23	None	add
146	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  an.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  Node  gramps  =  an.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    Node  gramps  =  an.getParent();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
147	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
148	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  remaining;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  remaining;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  remaining;	  	non-compiled	[CE]  not  a  statement	23	None	add
149	[BUG]  [BUGGY]  n  =  an.getfirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getfirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getfirstChild();	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
150	[BUG]  [BUGGY]  n.removeChild(an);  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  return;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
151	[BUG]  [BUGGY]  n.removeChild(an);  if(ancestorType!=  Token.COMMA)  {  n.removeChild(an);  }  [CE]  class,  interface,  or  enum  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  if(ancestorType!=  Token.COMMA)  {  n.removeChild(an);  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    if(ancestorType!=  Token.COMMA)  {  n.removeChild(an);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
152	[BUG]  [BUGGY]  n.removeChild(an);  Node  gramps  =  n.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  Node  gramps  =  n.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    Node  gramps  =  n.getParent();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
153	[BUG]  [BUGGY]  n.removeChild(an);  if(ancestorType!=  Token.EXPR_RESULT)  {  n.removeChild(an);  }  [CE]  class,  interface,  or  enum  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  if(ancestorType!=  Token.EXPR_RESULT)  {  n.removeChild(an);  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    if(ancestorType!=  Token.EXPR_RESULT)  {  n.removeChild(an);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	add
154	[BUG]  [BUGGY]  if(protectSideEffectFreeCode)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(protectSideEffectFreeCode)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(protectSideEffectFreeCode)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
155	[BUG]  [BUGGY]  if(resultUsed)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(resultUsed)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(resultUsed)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
156	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR),  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR),  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  USELESS_CODE_ERROR),  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
157	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  an.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  gramps  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  gramps  =  an.getFirstChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
158	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  an  =  an.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  an  =  an.getFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  an  =  an.getFirstChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
159	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  an  =  an.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  an  =  an.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  an  =  an.getLastChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
160	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  an  =  n.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  an  =  n.getLastChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  an  =  n.getLastChild();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
161	[BUG]  [BUGGY]  if(!isResultUsed  ||  isSimpleOp)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!isResultUsed  ||  isSimpleOp)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!isResultUsed  ||  isSimpleOp)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
162	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  isResultUsed)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  isResultUsed)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  isResultUsed)  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
163	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||!NodeUtil.isExpressionNode(an))  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||!NodeUtil.isExpressionNode(an))  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||!NodeUtil.isExpressionNode(an))  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
164	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
165	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(ans)||  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(ans)||  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(ans)||  ancestorType!=  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
166	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
167	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
168	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(an)&&  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!NodeUtil.isExpressionNode(an)&&  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!NodeUtil.isExpressionNode(an)&&  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
169	[BUG]  [BUGGY]  parent!=  if(ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  parent!=  if(ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	parent!=  if(ancestorType!=  Token.COMMA)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
170	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
171	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.COMMA)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
172	[BUG]  [BUGGY]  while(ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  while(ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	while(ancestorType!=  Token.COMMA)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
173	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  &&  ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  &&  ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.COMMA  &&  ancestorType!=  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
174	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an));  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
175	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR));  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
176	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  proTECTOR_FN));  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  proTECTOR_FN));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  proTECTOR_FN));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
177	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
178	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
179	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning  and  there  should  be  one;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning  and  there  should  be  one;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning  and  there  should  be  one;	  	non-compiled	[CE]  not  a  statement	5	None	add
180	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  an.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  Node  gramps  =  an.getParent();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    Node  gramps  =  an.getParent();	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
181	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
182	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  remaining;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  remaining;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    junit.framework.AssertionFailedError:  There  should  be  one  warning,  but  there  should  be  one  remaining;	  	non-compiled	[CE]  not  a  statement	5	None	add
183	[BUG]  [BUGGY]  n.replaceChild(an,  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.replaceChild(an,  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.replaceChild(an,  ancestorType);	  n.removeChild(an);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
184	[BUG]  [BUGGY]  n.addChildToBack(an);  [CE]  class,  interface,  or  enum  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.addChildToBack(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.addChildToBack(an);	  n.removeChild(an);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
185	[BUG]  [BUGGY]  if(ancestorType  >=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  >=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  >=  Token.COMMA  ||  ancestorType  ==  Token.COMMA)  {  continue;  }	  if(ancestorType    ==    Token.COMMA    ||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
186	[BUG]  [BUGGY]  n  =  an.removeFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.removeFirstChild();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.removeFirstChild();	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
187	[BUG]  [BUGGY]  n  =  an.getNumberOfChildren();  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getNumberOfChildren();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getNumberOfChildren();	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
188	[BUG]  [BUGGY]  n  =  an.getNumberOfAncestors();  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getNumberOfAncestors();  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n  =  an.getNumberOfAncestors();	  n    =    an.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
189	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  {  continue;  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  {  continue;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA)  {  continue;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	5	None	add
190	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ANCEstorType  ==  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ANCEstorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    if(ANCEstorType  ==  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
191	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  continue;  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  if(ancestorType  ==  Token.COMMA)  continue;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    if(ancestorType  ==  Token.COMMA)  continue;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	add
192	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  If(ancestorType  ==  Token.COMMA)  {  continue;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA)  {  continue;  }  If(ancestorType  ==  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType    ==    Token.COMMA)    {    continue;    }    If(ancestorType  ==  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  ';'  expected	5	None	add
193	[BUG]  [BUGGY]      n.getFirstChild().getNext().getNext())  {  return;  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]      n.getFirstChild().getNext().getNext())  {  return;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	        n.getFirstChild().getNext().getNext())  {  return;	  	non-compiled	[CE]  ';'  expected	11	None	add
194	[BUG]  [BUGGY]      if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning;  return;  }  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]      if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning;  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	        if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning;  return;  }	  	non-compiled	[CE]  ')'  expected	11	None	add
195	[BUG]  [BUGGY]      if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]      if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	        if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning	  	non-compiled	[CE]  ')'  expected	11	None	add
196	[BUG]  [BUGGY]      if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning;  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]      if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	        if(ancestorType  ==  Token.COMMA)  {  if(junit.framework.AssertionFailedError:  There  should  be  one  warning;  }	  	non-compiled	[CE]  ')'  expected	11	None	add
197	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR),  ancestorType);  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR),  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  an,  level,  USELESS_CODE_ERROR),  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
198	[BUG]  [BUGGY]  n  =  an.getLastChild();  Node  an  =  an.getLastChild();  if(ancestorType!=  Token.COMMA)  {  n  =  an.getLastChild();  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  Node  an  =  an.getLastChild();  if(ancestorType!=  Token.COMMA)  {  n  =  an.getLastChild();  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    Node  an  =  an.getLastChild();  if(ancestorType!=  Token.COMMA)  {  n  =  an.getLastChild();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
199	[BUG]  [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    if(n!=  null)  {  n  =  an.getLastChild();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
200	[BUG]  [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  return;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
201	[BUG]  [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  n,  ancestorType);  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  n,  ancestorType);  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  n,  ancestorType);  return;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
202	[BUG]  [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  break;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffects(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  break;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
203	[BUG]  [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffectFreeCode(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getLastChild();  if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffectFreeCode(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getLastChild();    if(n!=  null)  {  n  =  an.getLastChild();  }  else  {  checkSideEffectFreeCode(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  return;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	add
204	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)&&  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }	  if(NodeUtil.isExpressionNode(an))    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
205	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
206	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.SEMI)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.SEMI)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.SEMI)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
207	[BUG]  [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.NAME)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.NAME)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.NAME)  {  continue;  }	  if(ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
208	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  message));  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  message));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  message));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
209	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  name));  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  name));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  name));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
210	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  continue;  [CE]  cannot  find  symbol  name  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  continue;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA)  {  continue;	  	non-compiled	[CE]  cannot  find  symbol  name	23	None	add
211	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType  >=  Token.COMMA)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType  >=  Token.COMMA)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    if(ancestorType  >=  Token.COMMA)  {  continue;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
212	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  continue;  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  continue;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA)  continue;	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
213	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA)  {  continue;  }  if(ancestorType!=  Token.COMMA)  {  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=    Token.COMMA)    {    continue;    }    if(ancestorType!=  Token.COMMA)  {  return;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
214	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType),  msg);  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType),  msg);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType),  msg);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
215	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  ancestorType);	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR),    ancestorType);    	non-compiled	[CE]  ')'  expected	18	None	replace
216	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
217	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.NAME)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.NAME)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType  ==  Token.COMMA  ||  ancestorType  ==  Token.NAME)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType    ==    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
218	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;	  	non-compiled	[CE]  ')'  expected	1	None	add
219	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  else  break;  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  else  break;  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)return;  else  break;	  	non-compiled	[CE]  ')'  expected	1	None	add
220	[BUG]  [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  return;  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n  =  an.getFirstChild();  Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  return;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n    =    an.getFirstChild();    Node  an  =  an.getFirstChild();  if(ancestorType!=  Token.EXPR_RESULT  &&  ancestorType!=  Token.BLOCK)  {  return;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
221	[BUG]  [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(an);  n.removeChild(an);  [CE]  ')'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(an);  n.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    NodeUtil.removeChild(an);  n.removeChild(an);	  	non-compiled	[CE]  ')'  expected	9	None	add
222	[BUG]  [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(an);  [CE]  ')'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    NodeUtil.removeChild(an);	  	non-compiled	[CE]  ')'  expected	9	None	add
223	[BUG]  [BUGGY]  n.removeChild(an);  NodeUtil.copyCurrentStructure(an);  n.removeChild(an);  [CE]  ')'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  NodeUtil.copyCurrentStructure(an);  n.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    NodeUtil.copyCurrentStructure(an);  n.removeChild(an);	  	non-compiled	[CE]  ')'  expected	9	None	add
224	[BUG]  [BUGGY]  n.removeChild(an);  NodeUtil.copyCurrentStructure(n);  n.removeChild(an);  [CE]  ')'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  NodeUtil.copyCurrentStructure(n);  n.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    NodeUtil.copyCurrentStructure(n);  n.removeChild(an);	  	non-compiled	[CE]  ')'  expected	9	None	add
225	[BUG]  [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(n,  an);  n.removeChild(an);  [CE]  ')'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(n,  an);  n.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    NodeUtil.removeChild(n,  an);  n.removeChild(an);	  	non-compiled	[CE]  ')'  expected	9	None	add
226	[BUG]  [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(parent,  an);  n.removeChild(an);  [CE]  ')'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  NodeUtil.removeChild(parent,  an);  n.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    NodeUtil.removeChild(parent,  an);  n.removeChild(an);	  	non-compiled	[CE]  ')'  expected	9	None	add
227	[BUG]  [BUGGY]  n.removeChild(an);  parent.removeChild(an);  n.removeChild(an);  [CE]  ')'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.removeChild(an);  parent.removeChild(an);  n.removeChild(an);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.removeChild(an);    parent.removeChild(an);  n.removeChild(an);	  	non-compiled	[CE]  ')'  expected	9	None	add
228	[BUG]  [BUGGY]  if(state.isSimpleOp)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(state.isSimpleOp)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(state.isSimpleOp)  {  continue;  }	  if(isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
229	[BUG]  [BUGGY]  if(!protectionFreeCode)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!protectionFreeCode)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!protectionFreeCode)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
230	[BUG]  [BUGGY]  if(!protectionSimpleOp)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(!protectionSimpleOp)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(!protectionSimpleOp)  {  continue;  }	  if(!isResultUsed)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
231	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.EXPR_RESULT)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
232	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType!=  Token.EXPR_RESULT)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
233	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(NodeUtil.isExpressionNode(an)||  ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.BLOCK)  {  continue;  }	  if(NodeUtil.isExpressionNode(an)||    ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
234	[BUG]  [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  ancestorType));  [CE]  class,  interface,  or  enum  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  ancestorType));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.replaceChild(an,  new  Node(Token.EXPR_RESULT,  ancestorType));	  n.removeChild(an);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
235	[BUG]  [BUGGY]  n.replaceChild(an,  ancestor);  [CE]  class,  interface,  or  enum  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(NUMBER  6.0):  testcode:1:22  var  a    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  n.replaceChild(an,  ancestor);  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	n.replaceChild(an,  ancestor);	  n.removeChild(an);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
236	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.SEMI)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.SEMI)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  ||  ancestorType  ==  Token.SEMI)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
237	[BUG]  [BUGGY]  if(ancestorType!=  Token.COMMA  &&  ancestorType  ==  Token.BLOCK)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  if(ancestorType!=  Token.COMMA  &&  ancestorType  ==  Token.BLOCK)  {  continue;  }  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	if(ancestorType!=  Token.COMMA  &&  ancestorType  ==  Token.BLOCK)  {  continue;  }	  if(ancestorType!=    Token.COMMA)    {    continue;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
238	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an.getString()));  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)    [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an.getString()));  [BUGGY]    if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  }  else  if  (parent.getType()  !=  Token.EXPR_RESULT  &&  parent.getType()  !=  Token.BLOCK)  {  if  (parent.getType()  ==  Token.FOR  &&  parent.getChildCount()  ==  4  &&  (n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext().getNext()))  {  }  else  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	115	115	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  an.getString()));	  t.getCompiler().report(JSError.make(t,    n,    level,    USELESS_CODE_ERROR,    ancestorType));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
