bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.setString(msg,  level);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(msg,  level);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(msg,  level);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
2	[BUG]  [BUGGY]  n.setJSDocInfo(msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setJSDocInfo(msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setJSDocInfo(msg);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
3	[BUG]  [BUGGY]  n.setString(PROTECTOR_FN);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(PROTECTOR_FN);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(PROTECTOR_FN);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
4	[BUG]  [BUGGY]  n.addChildToFront(msg);  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.addChildToFront(msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.addChildToFront(msg);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
5	[BUG]  [BUGGY]  n.setString(proTECTOR_FN);  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(proTECTOR_FN);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(proTECTOR_FN);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
6	[BUG]  [BUGGY]  n.setString(msg  + ": ");  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(msg  + ": ");  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(msg  + ": ");	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
7	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()),  level  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
8	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  return;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  return;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  return;	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
9	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  return;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  return;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  return;	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
10	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getJSDocInfo()))  {  return;  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getJSDocInfo()))  {  return;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getJSDocInfo()))  {  return;	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
11	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  throw  new  IllegalArgumentException( " ");	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
12	[BUG]  [BUGGY]  NodeUtil.shouldHaveSideEffects(n,  t.getCompiler()))  {  return;  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.shouldHaveSideEffects(n,  t.getCompiler()))  {  return;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.shouldHaveSideEffects(n,  t.getCompiler()))  {  return;	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
13	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getParent()))  {  return;  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getParent()))  {  return;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getParent()))  {  return;	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
14	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	49	None	replace
15	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	38	None	replace
16	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	40	None	replace
17	[BUG]  [BUGGY]  msg  =  n  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    n    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  msg  =  n  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =    n    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  msg  =  n  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =    n    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  PROTECTOR_FN,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  PROTECTOR_FN,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  PROTECTOR_FN,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  COMPLETE_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  COMPLETE_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  COMPLETE_ERROR,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_CODE_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_CODE_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  DEFAULT_CODE_ERROR,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n,  msg);  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getJSDocInfo()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	22	None	replace
26	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getJSDocInfo()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	22	None	replace
27	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getQualifiedName()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getQualifiedName()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getQualifiedName()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getJSDocInfo()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	22	None	replace
28	[BUG]  [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	26	None	replace
29	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
30	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
31	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
32	[BUG]  [BUGGY]  msg  =  n  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n  +  Token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
33	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +   "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	59	None	replace
34	[BUG]  [BUGGY]  t.getCompiler().report(msg,  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(msg,    t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
35	[BUG]  [BUGGY]  t.getCompiler().report(n,  t.makeError(t,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  t.makeError(t,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  t.makeError(t,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(msg,    t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
36	[BUG]  [BUGGY]  t.getCompiler().report(msg,  t.makeError(t,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  t.makeError(t,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  t.makeError(t,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(msg,    t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
37	[BUG]  [BUGGY]  t.getCompiler().report(msg,  t.makeError(t,  level,  USELESS_CODE_ERROR,  n));  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  t.makeError(t,  level,  USELESS_CODE_ERROR,  n));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  t.makeError(t,  level,  USELESS_CODE_ERROR,  n));	  t.getCompiler().report(msg,    t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
38	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(t,  n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
39	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
40	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  msg);  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  msg);	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
41	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  DEFAULT_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  DEFAULT_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(t,  n,  level,  DEFAULT_CODE_ERROR,  msg));	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
42	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
43	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
44	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
45	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  DEFAULT_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
46	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  INVALID_NUMBER_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
47	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_SIGNATURES,  msg));  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_SIGNATURES,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_SIGNATURES,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
48	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  msg);  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  msg);	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
49	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	50	None	replace
50	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toString()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	50	None	replace
51	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	50	None	replace
52	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	50	None	replace
53	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";	  msg    =    n.name()    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	30	None	replace
54	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  PROTECTOR_FN,  msg);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  PROTECTOR_FN,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  PROTECTOR_FN,  msg);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  ancestorType);  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  ancestorType);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  ancestorType);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  COMPLETE_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  COMPLETE_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  COMPLETE_ERROR,  msg);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  DEFAULT_CODE_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  DEFAULT_CODE_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  DEFAULT_CODE_ERROR,  msg);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  isSimpleOp);  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  isSimpleOp);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  isSimpleOp);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  bug);  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  bug);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  bug);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	16	None	replace
61	[BUG]  [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  n.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	42	None	replace
62	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =    n.name()    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	32	None	replace
63	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";	  msg    =    n.name()    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	32	None	replace
64	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =    n.name()    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	32	None	replace
65	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";	  msg    =    n.name()    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	32	None	replace
66	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	35	None	replace
67	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	35	None	replace
68	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  parent.getCompiler()))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
69	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(parent,  t.getCompiler()))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
70	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getJSDocInfo()))  {  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getJSDocInfo()))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getJSDocInfo()))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
71	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  isResultUsed)  {  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  isResultUsed)  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  isResultUsed)  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
72	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  level!=  USELESS_CODE_ERROR)  {  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  level!=  USELESS_CODE_ERROR)  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  level!=  USELESS_CODE_ERROR)  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
73	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  level  ==  USELESS_CODE_ERROR)  {  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  level  ==  USELESS_CODE_ERROR)  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&  level  ==  USELESS_CODE_ERROR)  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
74	[BUG]  [BUGGY]  Node  operator  =  parent.getJSDocInfo();  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  parent.getJSDocInfo();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  parent.getJSDocInfo();	  Node    operator    =    n.getJSDocInfo();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
75	[BUG]  [BUGGY]  Node  operator  =  n.getQualifiedName();  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getQualifiedName();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getQualifiedName();	  Node    operator    =    n.getJSDocInfo();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
76	[BUG]  [BUGGY]  Node  operator  =  n.getImmediateParentNode();  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getImmediateParentNode();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getImmediateParentNode();	  Node    operator    =    n.getJSDocInfo();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
77	[BUG]  [BUGGY]  Node  operator  =  n.getAssignedValue();  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getAssignedValue();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getAssignedValue();	  Node    operator    =    n.getJSDocInfo();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
78	[BUG]  [BUGGY]  Node  operator  =  n.getNext();  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getNext();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getNext();	  Node    operator    =    n.getJSDocInfo();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
79	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	43	None	replace
80	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	43	None	replace
81	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	43	None	replace
82	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	43	None	replace
83	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	43	None	replace
84	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + ",  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + ",  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + ",  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	34	None	replace
85	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used.n ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	34	None	replace
86	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
87	[BUG]  [BUGGY]  msg  =  msg  + "Is  there  a  missing  line? ";  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "Is  there  a  missing  line? ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  + "Is  there  a  missing  line? ";	  msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
88	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  '+'  on  the  previous  line?n ";  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "Is  there  a  missing  '+'  on  the  previous  line?n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "Is  there  a  missing  '+'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	62	None	replace
90	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	62	None	replace
91	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	37	None	replace
92	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level);  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level);	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
93	[BUG]  [BUGGY]  t.getCompiler().report(n,  msg);  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  msg);	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
94	[BUG]  [BUGGY]  t.getCompiler().report(msg  + "  is  not  being  used.   ");  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg  + "  is  not  being  used.   ");  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg  + "  is  not  being  used.   ");	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
95	[BUG]  [BUGGY]  t.getCompiler().report(msg,  ancestorType);  [CE]  <identifier>  expected  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  ancestorType);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  ancestorType);	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
96	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operators  are  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   ",    operators    are    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	48	None	replace
97	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	25	None	replace
98	[BUG]  [BUGGY]  msg  =  n  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	25	None	replace
99	[BUG]  [BUGGY]  msg  =  msg  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  n.name(token.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    n.name(token.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	27	None	replace
100	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	61	None	replace
101	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	61	None	replace
102	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getSourceName()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getSourceName()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getSourceName()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	61	None	replace
103	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
104	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
105	[BUG]  [BUGGY]  t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
106	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n));  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
107	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n,  msg));  [CE]  <identifier>  expected  [FE]                                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  USELESS_CODE_ERROR,  n,  msg));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
108	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  COMPLETE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  COMPLETE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
109	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	33	None	replace
110	[BUG]  [BUGGY]  msg  =  n.name(msg).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name(msg).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name(msg).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	33	None	replace
111	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.n ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	60	None	replace
112	[BUG]  [BUGGY]  msg  =  n.name(msg).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name(msg).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name(msg).toString()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	60	None	replace
113	[BUG]  [BUGGY]  msg  =  n  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	60	None	replace
114	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	39	None	replace
115	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	39	None	replace
116	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	39	None	replace
117	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	52	None	replace
118	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used.n ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	36	None	replace
119	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.n ";	  msg    =    n.name()    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	31	None	replace
120	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =    n.name()    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	31	None	replace
121	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =    n.name()    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	31	None	replace
122	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	41	None	replace
123	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR);  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  USELESS_CODE_ERROR);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
124	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  PROTECTOR_FN);  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  PROTECTOR_FN);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  PROTECTOR_FN);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
125	[BUG]  [BUGGY]  Node  operator  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getLastChild();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getLastChild();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
126	[BUG]  [BUGGY]  Node  operator  =  parent.getFirstChild();  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  parent.getFirstChild();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  parent.getFirstChild();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
127	[BUG]  [BUGGY]  Node  operator  =  n.getOwnerChild();  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getOwnerChild();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getOwnerChild();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
128	[BUG]  [BUGGY]  Node  operator  =  n.getOwner();  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getOwner();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getOwner();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
129	[BUG]  [BUGGY]  Node  operator  =  n.getAncestor();  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getAncestor();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getAncestor();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
130	[BUG]  [BUGGY]  t.getCompiler().report(n.makeError(t,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n.makeError(t,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n.makeError(t,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
131	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(t,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
132	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  level,  DEFAULT_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  level,  DEFAULT_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(t,  level,  DEFAULT_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
133	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
134	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  COMPLETE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
135	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  DEFAULT_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(t,  n,  level,  DEFAULT_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(t,  n,  level,  DEFAULT_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
136	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(n,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(n,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
137	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
138	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  DETERMINISTIC_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  DETERMINISTIC_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(t,  n,  level,  DETERMINISTIC_ERROR,  msg));	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
139	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used. ";	  msg    =    n.name()    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	32	None	replace
140	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
141	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_NAME_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DEFAULT_NAME_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  DEFAULT_NAME_ERROR,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
142	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_NAME,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_NAME,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  DETERMINISTIC_NAME,  msg));	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
143	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ".'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	38	None	replace
144	[BUG]  [BUGGY]  t.getCompiler().report(msg  + "'  operator  is  not  being  used.   ");  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg  + "'  operator  is  not  being  used.   ");  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg  + "'  operator  is  not  being  used.   ");	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
145	[BUG]  [BUGGY]  t.getCompiler().report(msg  + "'  is  not  being  used.   ");  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg  + "'  is  not  being  used.   ");  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg  + "'  is  not  being  used.   ");	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
146	[BUG]  [BUGGY]  t.getCompiler().report(msg  + ",  is  not  being  used.   ");  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg  + ",  is  not  being  used.   ");  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg  + ",  is  not  being  used.   ");	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
147	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	40	None	replace
148	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
149	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  return;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  parent))  {  return;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  parent))  {  return;	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
150	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	41	None	replace
151	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	51	None	replace
152	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	49	None	replace
153	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  protectionSideEffectFreeCode);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  protectionSideEffectFreeCode);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  protectionSideEffectFreeCode);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
154	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  protectSideEffectFreeCode);  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  protectSideEffectFreeCode);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  USELESS_CODE_ERROR,  msg,  protectSideEffectFreeCode);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
155	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  DETERMINISTIC_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  DETERMINISTIC_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  DETERMINISTIC_ERROR,  msg);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
156	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  DEFAULT_NAME_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  DEFAULT_NAME_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  DEFAULT_NAME_ERROR,  msg);	  t.getCompiler().report(n,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
157	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	39	None	replace
158	[BUG]  [BUGGY]  n.setString(PROTECTOR_FN,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(PROTECTOR_FN,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(PROTECTOR_FN,  msg);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
159	[BUG]  [BUGGY]  n.setString(propertyNodes.getString(msg));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(propertyNodes.getString(msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(propertyNodes.getString(msg));	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
160	[BUG]  [BUGGY]  n.setString(ProTECTOR_FN);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(ProTECTOR_FN);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(ProTECTOR_FN);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
161	[BUG]  [BUGGY]  n.setString(protectSimpleEffectFreeCode);  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(protectSimpleEffectFreeCode);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(protectSimpleEffectFreeCode);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
162	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getJSDocInfo()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getJSDocInfo()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	22	None	replace
163	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
164	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ".'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
165	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",  operators  are  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toUpperCase()  + ",  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
166	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	42	None	replace
167	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	42	None	replace
168	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()));  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()));	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
169	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getParent()))  {  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getParent()))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getParent()))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
170	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_NAME_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_NAME_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  DEFAULT_NAME_ERROR,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
171	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  on  the  previous  line?   ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  on  the  previous  line?   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "Is  there  a  missing  ' "  +  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
172	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  n.getString();  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  n.getString();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "Is  there  a  missing  ' "  +  n.getString();	  msg    =       "Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
173	[BUG]  [BUGGY]  Node  operator  =  n.getOpt();  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getOpt();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getOpt();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
174	[BUG]  [BUGGY]  Node  operator  =  n.getAncestor(1);  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getAncestor(1);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getAncestor(1);	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
175	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	43	None	replace
176	[BUG]  [BUGGY]  t.getCompiler().report(n,  t.makeError(t,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  t.makeError(t,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  t.makeError(t,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(msg,    t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
177	[BUG]  [BUGGY]  t.getCompiler().report(msg,  t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  t.makeError(t,  n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(msg,    t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
178	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";	  msg    =    msg    +   "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	59	None	replace
179	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	21	None	replace
180	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	25	None	replace
181	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getType()).toUpperCase()  + ",  operator  is  not  being  used. ";	  msg    =    msg    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	36	None	replace
182	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	16	None	replace
183	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toUpperCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	16	None	replace
184	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
185	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	61	None	replace
186	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toString()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getString()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	61	None	replace
187	[BUG]  [BUGGY]  msg  =  msg  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  token.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getString()).toLowerCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
188	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getType()).toUpperCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	52	None	replace
189	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString())+ ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	18	None	replace
190	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operators  are  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toLowerCase()  + ",  operators  are  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	18	None	replace
191	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",'  operator  is  not  being  used.n ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	35	None	replace
192	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(token.getType()).toLowerCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	35	None	replace
193	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  n.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  n.name(n.getString()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	24	None	replace
194	[BUG]  [BUGGY]  msg  =  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    n.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	24	None	replace
195	[BUG]  [BUGGY]  t.getCompiler().report(n,  level,  PROTECTOR_FN,  msg));  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(n,  level,  PROTECTOR_FN,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(n,  level,  PROTECTOR_FN,  msg));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
196	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_NAME_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_NAME_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  DEFAULT_NAME_ERROR,  msg));	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
197	[BUG]  [BUGGY]  Node  operator  =  n.getNode();  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getNode();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getNode();	  Node    operator    =    n.getJSDocInfo();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
198	[BUG]  [BUGGY]  Node  operator  =  n.getAssignedOp();  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getAssignedOp();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getAssignedOp();	  Node    operator    =    n.getJSDocInfo();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
199	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	62	None	replace
200	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	34	None	replace
201	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toString()  + "  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toString()  + "  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toString()  + "  is  not  being  used.   ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	34	None	replace
202	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    n.name(token.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	27	None	replace
203	[BUG]  [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_TYPE_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,  level,  DEFAULT_TYPE_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,  level,  DEFAULT_TYPE_ERROR,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
204	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  Level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  Level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  Level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
205	[BUG]  [BUGGY]  T.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  T.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	T.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
206	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ",'  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	51	None	replace
207	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",'  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   ",'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	51	None	replace
208	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.make(n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.make(n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
209	[BUG]  [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.make(t,  n,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
210	[BUG]  [BUGGY]  t.getCompiler().report(msg,   "'  operator  is  not  being  used.   ");  [CE]  <identifier>  expected  [FE]                                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(msg,   "'  operator  is  not  being  used.   ");  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(msg,   "'  operator  is  not  being  used.   ");	  t.getCompiler().report(msg);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
211	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	43	None	replace
212	[BUG]  [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	34	None	replace
213	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	34	None	replace
214	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ".'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ".'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toUpperCase()  + ".'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	37	None	replace
215	[BUG]  [BUGGY]  t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
216	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR,    msg);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
217	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isImmutableValue(n,  parent))  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isImmutableValue(n,  parent))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isImmutableValue(n,  parent))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
218	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isName(n.getString()))  {  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isName(n.getString()))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isName(n.getString()))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
219	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isName(n.getJSDocInfo()))  {  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isName(n.getJSDocInfo()))  {  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler())&&!NodeUtil.isName(n.getJSDocInfo()))  {	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
220	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getString()).toLowerCase()  + ",'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	40	None	replace
221	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getString()).toUpperCase()  + ",'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toLowerCase()    +   ",'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	40	None	replace
222	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operators  are  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operators  are  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",  operators  are  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   ",    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	38	None	replace
223	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_EXPR_RESULT,  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_EXPR_RESULT,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  UNKNOWN_EXPR_RESULT,  msg));	  t.getCompiler().report(t.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
224	[BUG]  [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + ".'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + ".'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  n.name()  +  Token.name(n.getType()).toUpperCase()  + ".'  operator  is  not  being  used.   ";	  msg    =    n.name()    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	31	None	replace
225	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	39	None	replace
226	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getJSDocInfo()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	60	None	replace
227	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toString()  + ",  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	60	None	replace
228	[BUG]  [BUGGY]  n.setString(msg,  PROTECTOR_FN);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.setString(msg,  PROTECTOR_FN);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.setString(msg,  PROTECTOR_FN);	  n.setString(msg);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
229	[BUG]  [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  UNKNOWN_EXPR_RESULT,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(JSError.makeError(t,  n,  level,  UNKNOWN_EXPR_RESULT,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(JSError.makeError(t,  n,  level,  UNKNOWN_EXPR_RESULT,  msg));	  t.getCompiler().report(JSError.makeError(t,    n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
230	[BUG]  [BUGGY]  Node  operator  =  n.getOwnerFile();  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  Node  operator  =  n.getOwnerFile();  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	Node  operator  =  n.getOwnerFile();	  Node    operator    =    n.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
231	[BUG]  [BUGGY]  NodeUtil.isSimpleOp(parent,  t.getCompiler()))  {  return;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.isSimpleOp(parent,  t.getCompiler()))  {  return;  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.isSimpleOp(parent,  t.getCompiler()))  {  return;	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
232	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  return;  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  return;  }  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	NodeUtil.mayHaveSideEffects(n,  t.getCompiler()))  {  return;  }	  NodeUtil.mayHaveSideEffects(n,    t.getCompiler()))    {    return;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
233	[BUG]  [BUGGY]  n.getCompiler().report(t.makeError(t,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  n.getCompiler().report(t.makeError(t,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	n.getCompiler().report(t.makeError(t,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
234	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(s,  level,  USELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(s,  level,  USELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(s,  level,  USELESS_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
235	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UUSELESS_CODE_ERROR,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  UUSELESS_CODE_ERROR,  msg));  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  UUSELESS_CODE_ERROR,  msg));	  t.getCompiler().report(t.makeError(t,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
236	[BUG]  [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the "  +  Token.name(n.getString()).toUpperCase()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the   "    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	62	None	replace
237	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	41	None	replace
238	[BUG]  [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the "  +  Token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
239	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getJSDocInfo()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =    msg    +    Token.name(n.getType()).toUpperCase()    +   "'    operator    is    not    being    used.       ";    	non-compiled	[CE]  <identifier>  expected	33	None	replace
240	[BUG]  [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t.makeError(n,  level,  USELESS_CODE_ERROR,  msg),  ancestorType);	  t.getCompiler().report(t.makeError(n,    level,    USELESS_CODE_ERROR,    msg));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
241	[BUG]  [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the   "  +  Token.name(n.getType()).toString()  + ",  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   ",    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	15	None	replace
242	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toString()  + "'  operator  is  not  being  used.   ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getString()).toString()  + "'  operator  is  not  being  used.   ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getString()).toString()  + "'  operator  is  not  being  used.   ";	  msg    =       "The    result    of    the    '   "    +    Token.name(n.getString()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	61	None	replace
243	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + ".'  operator  is  not  being  used. ";	  msg    =    msg    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.n   ";    	non-compiled	[CE]  <identifier>  expected	1	None	replace
244	[BUG]  [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  + "The  result  of  the  ' "  +  token.name(n.getType()).toString()  + "'  operator  is  not  being  used. ";	  msg    =       "The    result    of    the    '   "    +    token.name(n.getType()).toString()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	50	None	replace
245	[BUG]  [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =   "The  result  of  the "  +  Token.name(n.getString()).toLowerCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	16	None	replace
246	[BUG]  [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	msg  =  msg  +  Token.name(n.getType()).toLowerCase()  + "  operator  is  not  being  used. ";	  msg    =       "The    result    of    the       "    +    Token.name(n.getType()).toLowerCase()    +   "    operator    is    not    being    used.   ";    	non-compiled	[CE]  <identifier>  expected	16	None	replace
247	[BUG]  [BUGGY]  t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR);  [CE]  <identifier>  expected  [FE]                                junit.framework.AssertionFailedError:  There  should  be  one  warning      [CONTEXT]      (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =       "This  code  lacks  side-effects.  Is  there  a  bug?     ";  if  (n.isString())  {  msg  =       "Is  there  a  missing  '+'  on  the  previous  line?     ";  }  else  if  (isSimpleOp)  {      [BUGGY]  t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR);  [BUGGY]       "'  operator  is  not  being  used.     ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  problemNodes.add(n);  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.4472135954999579	143	144	1	replace	t.getCompiler().report(t,  n,  level,  USELESS_CODE_ERROR);	  t.getCompiler().report(msg,    level,    USELESS_CODE_ERROR);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
