bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
2	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
3	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",  operator  is  not  being  used. ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
4	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
5	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  string  ' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
6	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line: ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
7	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line?  ' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
8	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + ",'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + ",'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
9	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
10	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
11	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
12	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  class,  interface,  or  enum  expected  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  string  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
13	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line: "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
14	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  name  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
15	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line?  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
16	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  element  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
17	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+'  on  the  previous  line?   ";  [CE]  unclosed  character  literal  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+'  on  the  previous  line?   ";	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  unclosed  character  literal	3	None	replace
18	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n.getString();  [CE]  class,  interface,  or  enum  expected  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n.getString();  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n.getString();	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
19	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n  on  the  previous  line?   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n  on  the  previous  line?   ";	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  token  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ";  [CE]  class,  interface,  or  enum  expected  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  token  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  token  ' "  +  Token.name(n.getType())  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
21	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  token  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  token  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  token  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
22	[BUG]  [BUGGY]  msg  =  msg  + "Is  there  a  missing  token  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =  msg  + "Is  there  a  missing  token  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =  msg  + "Is  there  a  missing  token  ' "  +  token.name(n.getType())+ "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
23	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
24	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
25	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.n ";	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
26	[BUG]  [BUGGY]  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	String  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.   ";	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
27	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  bug? ";	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
28	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toUpperCase()  + "'  operator  is  not  being  used.   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
29	[BUG]  [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "The  result  of  the  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used.  Is  there  a  bug?   ";	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
30	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  ' "  +  Token.name(n.getType()).toLowerCase()  + ",'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
31	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line? ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
32	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  on  the  previous  line?   ";  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  on  the  previous  line?   ";	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n.toString();  [CE]  'try'  without  'catch'  or  'finally'  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n.toString();  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "  +  n.toString();	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
34	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line?n ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line?n ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  ' "+n.getString()  + "'  on  the  previous  line?n ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	6	None	replace
35	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line  ' "+n.getString()  + "'  on  the  previous  line? ";	  msg    =       "Is    there    a    missing    '   "+n.getString()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	6	None	replace
36	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
37	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line? "  +  Token.name(n.getType())+ "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType())+   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	2	None	replace
38	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  operator  is  not  being  used. ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    operator    is    not    being    used.   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
39	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  line:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
40	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  name:  ' "  +  Token.name(n.getType()).toLowerCase()  + "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
41	[BUG]  [BUGGY]  msg  =   "Is  there  a  missing  type  of  name  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "Is  there  a  missing  type  of  name  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "Is  there  a  missing  type  of  name  ' "  +  Token.name(n.getType()).toLowerCase()  +   "'  on  the  previous  line?   ";	  msg    =       "Is    there    a    missing    '   "    +    Token.name(n.getType()).toLowerCase()    +   "'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
42	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+Integer.toHexString(n.getString())+ "'  on  the  previous  line? ";  [CE]  'try'  without  'catch'  or  'finally'  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+Integer.toHexString(n.getString())+ "'  on  the  previous  line? ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+Integer.toHexString(n.getString())+ "'  on  the  previous  line? ";	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
43	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? "  +  n.getString();  [CE]  'try'  without  'catch'  or  'finally'  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? "  +  n.getString();  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  '+'  on  the  previous  line? "  +  n.getString();	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
44	[BUG]  [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+nonSimpleOp?   ";  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (!isResultUsed  &&  (isSimpleOp  ||  !NodeUtil.mayHaveSideEffects(n,  t.getCompiler())))  {  if  (n.isQualifiedName()  &&  n.getJSDocInfo()  !=  null)  {  return;  }  else  if  (n.isExprResult())  {  return;  }  String  msg  =     "This  code  lacks  side-effects.  Is  there  a  bug?   ";  if  (n.isString())  {    [BUGGY]  msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+nonSimpleOp?   ";  [BUGGY]    }  else  if  (isSimpleOp)  {  msg  =     "The  result  of  the  '   "  +  Token.name(n.getType()).toLowerCase()  +     "'  operator  is  not  being  used.   ";  }  t.getCompiler().report(  t.makeError(n,  level,  USELESS_CODE_ERROR,  msg));    if  (!NodeUtil.isStatement(n))  {  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	1.0	141	141	1	replace	msg  =   "This  code  lacks  side-effects.  Is  there  a  missing  ' "+nonSimpleOp?   ";	  msg    =       "This    code    lacks    side-effects.    Is    there    a    missing    '+'    on    the    previous    line?   ";    	non-compiled	[CE]  	3	None	replace
