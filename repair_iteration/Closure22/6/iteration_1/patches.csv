bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  n  ==  parent.getLastChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.EXPR_RESULT  ||  n  ==  parent.getLastChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  n  ==  parent.getFirstChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  n  ==  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  n  ==  parent.getFirstChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  n!=  parent.getLastChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  n!=  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  n!=  parent.getLastChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  n!=  parent.getLastChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  n!=  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  n!=  parent.getLastChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getFirstChild()  ==  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getFirstChild()  ==  n)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  Node  an  =  n.getFirstChild();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  an  =  n.getFirstChild();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  an  =  n.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  Node  an  =  n.getParent();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  an  =  n.getParent();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  an  =  n.getParent();	      	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  Node  an  =  n.getLastChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  an  =  n.getLastChild();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  an  =  n.getLastChild();	      	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  Node  an  =  parent.getParent();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  an  =  parent.getParent();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  an  =  parent.getParent();	      	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  Node  an  =  n.getNext();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  an  =  n.getNext();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  an  =  n.getNext();	      	non-compiled	[CE]  	6	None	replace
11	[BUG]  [BUGGY]  Node  an  =  gramps.getParent();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  an  =  gramps.getParent();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  an  =  gramps.getParent();	      	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  Node  gramps  =  parent.getParent();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  gramps  =  parent.getParent();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  gramps  =  parent.getParent();	      	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(an.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  if(n.getType()  ==  Token.COMMA)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(an.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()!=  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.CALL)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.CALL)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.CALL)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()!=  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n  ==  parent.getFirstChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n  ==  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(parent)&&  n  ==  parent.getFirstChild())  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n!=  parent.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n!=  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(parent)&&  n!=  parent.getFirstChild())  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(parent)||  n  ==  parent.getLastChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(parent)||  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(parent)||  n  ==  parent.getLastChild())  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n!=  parent.getLastChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n!=  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(parent)&&  n!=  parent.getLastChild())  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
24	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(n)&&  n  ==  parent.getLastChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(n)&&  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(n)&&  n  ==  parent.getLastChild())  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
25	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  parent.getFirstChild()  ==  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(parent)&&  parent.getFirstChild()  ==  n)  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
26	[BUG]  [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.ASSIGN)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  if(an.getType()  ==  Token.ASSIGN)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(an.getType()  ==  Token.ASSIGN)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(an.getType()  ==  Token.ASSIGN)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  parent.getAncestors()!=  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  parent.getAncestors()!=  null)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  parent.getAncestors()!=  null)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()!=  n)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()!=  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()!=  n)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  isResultUsed)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  isResultUsed)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  isResultUsed)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  n  ==  parent.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  n  ==  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.CALL  &&  n  ==  parent.getFirstChild())  {	  if(parent.getType()    ==    Token.CALL    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n  ==  parent.getLastChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.CALL  &&  n  ==  parent.getLastChild())  {	  if(parent.getType()    ==    Token.CALL    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  n!=  parent.getLastChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  n!=  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.CALL  &&  n!=  parent.getLastChild())  {	  if(parent.getType()    ==    Token.CALL    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  n!=  parent.getFirstChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  n!=  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.CALL  &&  n!=  parent.getFirstChild())  {	  if(parent.getType()    ==    Token.CALL    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.CALL  &&  parent.getFirstChild()  ==  n)  {	  if(parent.getType()    ==    Token.CALL    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  parent.getLastChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.CALL  &&  parent.getLastChild())  {	  if(parent.getType()    ==    Token.CALL    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.isAncestor(parent)&&  n  ==  parent.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestor(parent)&&  n  ==  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestor(parent)&&  n  ==  parent.getFirstChild())  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  if(NodeUtil.isAncestor(parent)&&  n!=  parent.getFirstChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestor(parent)&&  n!=  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestor(parent)&&  n!=  parent.getFirstChild())  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  if(NodeUtil.isAncestor(parent)||  n  ==  parent.getLastChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestor(parent)||  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestor(parent)||  n  ==  parent.getLastChild())  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isAncestor(n)&&  n  ==  parent.getLastChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestor(n)&&  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestor(n)&&  n  ==  parent.getLastChild())  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.isAncestor(parent)&&  n!=  parent.getLastChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestor(parent)&&  n!=  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestor(parent)&&  n!=  parent.getLastChild())  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  if(NodeUtil.isAncestor(parent)&&  parent.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestor(parent)&&  parent.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestor(parent)&&  parent.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if  (parent.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if  (parent.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getFirstChild())  {	  if    (n    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
47	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
48	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  &&  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  &&  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()!=  Token.EXPR_RESULT  &&  parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()!=  Token.EXPR_RESULT)  {	  if(n.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  n!=  parent.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  n!=  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  n!=  parent.getFirstChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(n.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
53	[BUG]  [BUGGY]  if(parent.getAncestors()!=  null)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getAncestors()!=  null)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getAncestors()!=  null)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.COMMA)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent!=  null  ||  parent.getType()  ==  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()!=  Token.COMMA)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()!=  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()!=  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()!=  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()!=  Token.EXPR_RESULT  &&  n  ==  parent.getLastChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
57	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild()  ==  n)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild()  ==  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild()  ==  n)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
58	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	4	None	replace
59	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.CALL)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.CALL)  {	  if(n.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	4	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isName(parent)&&  n  ==  parent.getLastChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isName(parent)&&  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isName(parent)&&  n  ==  parent.getLastChild())  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isAncestor(parent)&&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestor(parent)&&  parent.getFirstChild()  ==  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestor(parent)&&  parent.getFirstChild()  ==  n)  {	  if(NodeUtil.isAncestor(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
62	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
63	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getAncestors()!=  null)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getAncestors()!=  null)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getAncestors()!=  null)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
64	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getChildCount()  ==  2)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getChildCount()  ==  2)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getChildCount()  ==  2)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n  ==  parent.getChildCount())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n  ==  parent.getChildCount())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(parent)&&  n  ==  parent.getChildCount())  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
66	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()  ==  n)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
67	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  NodeUtil.isAncestorsOp(parent))  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  NodeUtil.isAncestorsOp(parent))  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  NodeUtil.isAncestorsOp(parent))  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
68	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.ASSIGN)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.ASSIGN)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent!=  null  ||  parent.getType()  ==  Token.ASSIGN)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  NodeUtil.isAncestorsVar(parent))  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  NodeUtil.isAncestorsVar(parent))  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  NodeUtil.isAncestorsVar(parent))  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
71	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent  ==  null  ||  parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
72	[BUG]  [BUGGY]  Node  an  =  n.getAncestors();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  an  =  n.getAncestors();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  an  =  n.getAncestors();	      	non-compiled	[CE]  	6	None	replace
73	[BUG]  [BUGGY]  Node  a  =  n.getFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  Node  a  =  n.getFirstChild();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	Node  a  =  n.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL  ||  n  ==  parent.getLastChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.CALL  ||  n  ==  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.CALL  ||  n  ==  parent.getLastChild())  {	  if(parent.getType()    ==    Token.CALL    &&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  parent.getLastChild())  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n  >=  parent.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(NodeUtil.isAncestorsVar(parent)&&  n  >=  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(NodeUtil.isAncestorsVar(parent)&&  n  >=  parent.getFirstChild())  {	  if(NodeUtil.isAncestorsVar(parent)&&    n    ==    parent.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
77	[BUG]  [BUGGY]  if(an.getType()!=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(an.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(an.getType()!=  Token.EXPR_RESULT)  {	  if(n.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  List  <  Node>  antors  =  n.getAncestors();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  List  <  Node>  antors  =  n.getAncestors();  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	List  <  Node>  antors  =  n.getAncestors();	      	non-compiled	[CE]  	6	None	replace
79	[BUG]  [BUGGY]  if(an.getType()  ==  Token.COMMA)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(an.getType()  ==  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(an.getType()  ==  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
80	[BUG]  [BUGGY]  if(parent.getType()!=  Token.COMMA)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()!=  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()!=  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
81	[BUG]  [BUGGY]  if(an.getType()!=  Token.COMMA)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(an.getType()!=  Token.COMMA)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(an.getType()!=  Token.COMMA)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
82	[BUG]  [BUGGY]  if(parent.getAncestors()  ==  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getAncestors()  ==  null)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getAncestors()  ==  null)  {	  if(parent.getType()    ==    Token.COMMA)    {    	non-compiled	[CE]  	8	None	replace
83	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  isResultUsed)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
84	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  isSimpleEffectFreeCode)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.EXPR_RESULT  &&  isSimpleEffectFreeCode)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.EXPR_RESULT  &&  isSimpleEffectFreeCode)  {	  if(parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	1	None	replace
85	[BUG]  [BUGGY]  if(parent.getType()!=  Token.ASSIGN)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()!=  Token.ASSIGN)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()!=  Token.ASSIGN)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
86	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  n!=  parent.getAncestors())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  n!=  parent.getAncestors())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  n!=  parent.getAncestors())  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
87	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  n.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  n.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  n.getFirstChild()  ==  parent.getFirstChild())  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
88	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()  ==  n)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(parent.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()  ==  n)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(parent.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()  ==  n)  {	  if(parent.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  	5	None	replace
89	[BUG]  [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }      [BUGGY]  if(an.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]    for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  if  (ancestorType  ==  Token.COMMA)  continue;  if  (ancestorType  !=  Token.EXPR_RESULT  &&  ancestorType  !=  Token.BLOCK)  return;  else  break;  }  }  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	111	111	1	replace	if(an.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.BLOCK)  {	  if(parent.getType()    ==    Token.EXPR_RESULT    ||    parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
