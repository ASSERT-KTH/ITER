bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  parent  ==  gramps.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if  (gramps.isCall()  ||  parent  ==  gramps.getFirstChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  parent  ==  gramps.getFirstChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  if  (gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if  (gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  parent!=  gramps.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if  (gramps.isCall()  ||  parent!=  gramps.getFirstChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  parent!=  gramps.getFirstChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  if  (gramps.isConstructor()  &&  parent  ==  gramps.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if  (gramps.isConstructor()  &&  parent  ==  gramps.getFirstChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  &&  parent  ==  gramps.getFirstChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]    [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	  	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent!=  gramps.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if  (gramps.isCall()  &&  parent!=  gramps.getFirstChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent!=  gramps.getFirstChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent!=  gramps.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if  (gramps.isCall()  &&  parent!=  gramps.getLastChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent!=  gramps.getLastChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getFirstChild()  ==  parent)  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if(gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  if(gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if(gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()  ==  null)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()  ==  null)  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getFirstChild()  ==  null)  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  if(gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning  [CONTEXT]  if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();  [BUGGY]  if(gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]  if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&   "eval ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {	if  (gramps.isCall()  &&  parent  ==  gramps.getFirstChild())  {  	non-compiled	[CE]  	9	None	replace
