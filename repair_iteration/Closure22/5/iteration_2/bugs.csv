bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(gramps.isCallable()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCallable()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCallable()  &&  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  if(gramps!=  null  ||  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps!=  null  ||  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps!=  null  ||  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  if(gramps.isConstructor()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isConstructor()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isConstructor()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  if(gramps.isCallable()  ||  gramps.getLastChild()  ==  parent)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCallable()  ||  gramps.getLastChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCallable()  ||  gramps.getLastChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  if(gramps.isCallable()  ||  gramps.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCallable()  ||  gramps.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCallable()  ||  gramps.getType()  ==  Token.FUNCTION)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  ||  gramps  ==  parent.getFirstChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  ||  gramps  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  ||  gramps  ==  parent.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  ||  gramps!=  parent.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  ||  gramps!=  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  ||  gramps!=  parent.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  if(gramps!=  null  &&  gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps!=  null  &&  gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps!=  null  &&  gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  &&  gramps!=  parent.getFirstChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  &&  gramps!=  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  &&  gramps!=  parent.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  if(parent.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(parent.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(parent.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  if(gramps.isCall()  ||  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  parent.getFirstChild()  ==  gramps.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  if(gramps.isCall()  ||  parent.getFirstChild()!=  gramps.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  parent.getFirstChild()!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  parent.getFirstChild()!=  gramps.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  if  (gramps.isConstructor()  ||  parent!=  gramps.getFirstChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  ||  parent!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  ||  parent!=  gramps.getFirstChild())  {	  if    (gramps.isCall()    ||    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (gramps.isCall()    ||    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  parent.getType()  ==  Token.NAME)  {	  if    (gramps.isCall()    ||    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  parent.getType()  ==  Token.STRING)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  parent.getType()  ==  Token.STRING)  {	  if    (gramps.isCall()    ||    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  parent!=  gramps.getLastChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  ||  parent!=  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  parent!=  gramps.getLastChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()!=  gramps.getLastChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()!=  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent.getFirstChild()!=  gramps.getLastChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  if  (gramps.isSimpleOp()  &&  parent!=  gramps.getLastChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isSimpleOp()  &&  parent!=  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isSimpleOp()  &&  parent!=  gramps.getLastChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  	8	None	replace
23	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent.getLastChild()!=  gramps.getLastChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  &&  parent.getLastChild()!=  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent.getLastChild()!=  gramps.getLastChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  if  (gramps.isConstructor()  &&  parent!=  gramps.getLastChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  &&  parent!=  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  &&  parent!=  gramps.getLastChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  if  (gramps.isSimpleOp()  ||  parent  ==  gramps.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isSimpleOp()  ||  parent  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isSimpleOp()  ||  parent  ==  gramps.getFirstChild())  {	  if    (gramps.isCall()    ||    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	1	None	replace
27	[BUG]  [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()!=  gramps.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  &&  parent.getFirstChild()!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  &&  parent.getFirstChild()!=  gramps.getFirstChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  if  (gramps.isSimpleOp()  &&  parent!=  gramps.getFirstChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isSimpleOp()  &&  parent!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isSimpleOp()  &&  parent!=  gramps.getFirstChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  if  (gramps.isConstructor()  &&  parent!=  gramps.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  &&  parent!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  &&  parent!=  gramps.getFirstChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  Node  n  =  gramps.getNext();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  n  =  gramps.getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  n  =  gramps.getNext();	      	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  Node  n  =  gramps.getFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  n  =  gramps.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  n  =  gramps.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  Node  parent  =  gramps.getParent();  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  parent  =  gramps.getParent();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  parent  =  gramps.getParent();	      	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  Node  n  =  gramps.getParent();  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  n  =  gramps.getParent();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  n  =  gramps.getParent();	      	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  Node  n  =  gramps.getLastChild();  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  n  =  gramps.getLastChild();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  n  =  gramps.getLastChild();	      	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  [FE]                            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  n  =  parent.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  Node  gramps  =  gramps.getParent();  [CE]  [FE]                              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  gramps  =  gramps.getParent();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  gramps  =  gramps.getParent();	      	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  if(gramps.isCall()  &&  gramps.getFirstChild()  ==  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  &&  gramps.getFirstChild()  ==  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  &&  gramps.getFirstChild()  ==  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
38	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()!=  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()!=  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getFirstChild()!=  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  null)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
40	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()  ==  null)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()  ==  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getLastChild()  ==  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  if(gramps.isConstructor()  ||  gramps.getFirstChild()  ==  null)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isConstructor()  ||  gramps.getFirstChild()  ==  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isConstructor()  ||  gramps.getFirstChild()  ==  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getType()  ==  Token.FUNCTION)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  if(gramps.isNode()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
44	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.FUNCTION  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.FUNCTION  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.FUNCTION  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
45	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.NAME  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.NAME  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.NAME  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  if(gramps!=  null  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps!=  null  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps!=  null  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
47	[BUG]  [BUGGY]  if(gramps.isNode()  ||  gramps.getFirstChild()!=  parent)  {  [CE]  [FE]                        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  ||  gramps.getFirstChild()!=  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  ||  gramps.getFirstChild()!=  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
48	[BUG]  [BUGGY]  if(gramps.isNode()  &&  parent.getFirstChild()  ==  gramps)  {  [CE]  [FE]                          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  &&  parent.getFirstChild()  ==  gramps)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  &&  parent.getFirstChild()  ==  gramps)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
49	[BUG]  [BUGGY]  if  (gramps.isConstructor()  ||  parent  ==  gramps.getFirstChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  ||  parent  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  ||  parent  ==  gramps.getFirstChild())  {	  if    (gramps.isConstructor()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  if  (gramps.isConstructor()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  &&  parent.getFirstChild()  ==  gramps.getFirstChild())  {	  if    (gramps.isConstructor()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	5	None	replace
51	[BUG]  [BUGGY]  if  (gramps.isConstructor()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {	  if    (gramps.isConstructor()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  if(gramps.isCall()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  &&  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()  ==  parent)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getLastChild()  ==  parent)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()!=  parent)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()!=  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getFirstChild()!=  parent)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  if(parent.isCall()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(parent.isCall()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(parent.isCall()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  if  (gramps.isSimpleOp()  ||  parent!=  gramps.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isSimpleOp()  ||  parent!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isSimpleOp()  ||  parent!=  gramps.getFirstChild())  {	  if    (gramps.isSimpleOp()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	3	None	replace
57	[BUG]  [BUGGY]  if  (gramps.isSimpleOp()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isSimpleOp()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isSimpleOp()  &&  parent.getFirstChild()  ==  gramps.getLastChild())  {	  if    (gramps.isSimpleOp()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	3	None	replace
58	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  if  (gramps!=  null  &&  gramps.isCall()  &&  parent!=  gramps.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps!=  null  &&  gramps.isCall()  &&  parent!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps!=  null  &&  gramps.isCall()  &&  parent!=  gramps.getFirstChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  if  (gramps.isEmpty()  ||  parent  ==  gramps.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isEmpty()  ||  parent  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isEmpty()  ||  parent  ==  gramps.getFirstChild())  {	  if    (gramps.isCall()    ||    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  gramps.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  ||  gramps.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  gramps.getType()  ==  Token.EXPR_RESULT)  {	  if    (gramps.isCall()    ||    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	1	None	replace
62	[BUG]  [BUGGY]  if  (gramps.isEmpty()  ||  parent!=  gramps.getFirstChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isEmpty()  ||  parent!=  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isEmpty()  ||  parent!=  gramps.getFirstChild())  {	  if    (gramps.isCall()    ||    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  if(gramps.isEmpty()  ||  gramps.getFirstChild()  ==  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isEmpty()  ||  gramps.getFirstChild()  ==  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isEmpty()  ||  gramps.getFirstChild()  ==  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
64	[BUG]  [BUGGY]  if  (gramps!=  null  &&  gramps.isConstructor()  &&  parent  ==  gramps.getFirstChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps!=  null  &&  gramps.isConstructor()  &&  parent  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps!=  null  &&  gramps.isConstructor()  &&  parent  ==  gramps.getFirstChild())  {	  if    (gramps.isConstructor()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	5	None	replace
65	[BUG]  [BUGGY]  if  (gramps.isConstructor()  &&  parent  ==  gramps.getLastChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  &&  parent  ==  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  &&  parent  ==  gramps.getLastChild())  {	  if    (gramps.isConstructor()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	5	None	replace
66	[BUG]  [BUGGY]  if  (gramps!=  null  &&  gramps.isCall()  &&  parent!=  gramps.getLastChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps!=  null  &&  gramps.isCall()  &&  parent!=  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps!=  null  &&  gramps.isCall()  &&  parent!=  gramps.getLastChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  if(gramps!=  null  ||  gramps.isCall()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps!=  null  ||  gramps.isCall()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps!=  null  ||  gramps.isCall()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	9	None	replace
68	[BUG]  [BUGGY]  if(gramps.isEmpty()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isEmpty()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isEmpty()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	9	None	replace
69	[BUG]  [BUGGY]  if(gramps!=  null  ||  gramps.isSimpleOp())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps!=  null  ||  gramps.isSimpleOp())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps!=  null  ||  gramps.isSimpleOp())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
70	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  &&  gramps!=  parent.getLastChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  &&  gramps!=  parent.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  &&  gramps!=  parent.getLastChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
71	[BUG]  [BUGGY]  if(gramps.isNode()  &&  gramps.getLastChild()  ==  parent)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  &&  gramps.getLastChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  &&  gramps.getLastChild()  ==  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
72	[BUG]  [BUGGY]  if(gramps.isNode()  &&  gramps.getFirstChild()!=  parent)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  &&  gramps.getFirstChild()!=  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  &&  gramps.getFirstChild()!=  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
73	[BUG]  [BUGGY]  if(gramps!=  null  ||  gramps.isNode())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps!=  null  ||  gramps.isNode())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps!=  null  ||  gramps.isNode())  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
74	[BUG]  [BUGGY]  if(gramps.isNode()  &&  gramps.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  &&  gramps.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  &&  gramps.getType()  ==  Token.FUNCTION)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
75	[BUG]  [BUGGY]  if(gramps  ==  null  ||  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps  ==  null  ||  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps  ==  null  ||  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
76	[BUG]  [BUGGY]  if  (gramps!=  null  &&  gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps!=  null  &&  gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps!=  null  &&  gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {	  if    (gramps.isSimpleOp()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	3	None	replace
77	[BUG]  [BUGGY]  if  (gramps.isSimpleOp()  &&  parent  ==  gramps.getLastChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isSimpleOp()  &&  parent  ==  gramps.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isSimpleOp()  &&  parent  ==  gramps.getLastChild())  {	  if    (gramps.isSimpleOp()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	3	None	replace
78	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	Node  n  =  parent.getParent();	      	non-compiled	[CE]  	6	None	replace
79	[BUG]  [BUGGY]  if(gramps.isCallable()  ||  gramps.getFirstChild()  ==  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCallable()  ||  gramps.getFirstChild()  ==  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCallable()  ||  gramps.getFirstChild()  ==  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  if(gramps.isNode()  ||  gramps.getFirstChild()  ==  null)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  ||  gramps.getFirstChild()  ==  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  ||  gramps.getFirstChild()  ==  null)  {	  if(gramps.isCall()    ||    gramps.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  if  (gramps.isCall()  ||  gramps!=  parent.getFirstChild())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isCall()  ||  gramps!=  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isCall()  ||  gramps!=  parent.getFirstChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getFirstChild())    {    	non-compiled	[CE]  	7	None	replace
82	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.VAR  &&  gramps.isSimpleOp()  &&  gramps  ==  parent.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
83	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  ||  gramps.getFirstChild()  ==  parent.getFirstChild())  {	  if(gramps.isSimpleOp()    &&    gramps    ==    parent.getFirstChild())    {    	non-compiled	[CE]  	10	None	replace
84	[BUG]  [BUGGY]  if(gramps!=  null  &&  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps!=  null  &&  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps!=  null  &&  gramps.isCallable()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
85	[BUG]  [BUGGY]  if(gramps.isSimple()  ||  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimple()  ||  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimple()  ||  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
86	[BUG]  [BUGGY]  if(gramps.isCallable()  ||  gramps.getFirstChild()!=  parent)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCallable()  ||  gramps.getFirstChild()!=  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCallable()  ||  gramps.getFirstChild()!=  parent)  {	  if(gramps.isCallable()    ||    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	11	None	replace
87	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.VAR  &&  gramps.isNode()  &&  gramps.getFirstChild()  ==  parent)  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
88	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isNode())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isNode())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.VAR  &&  gramps.isNode())  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
89	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.NAME  &&  gramps.isNode())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.NAME  &&  gramps.isNode())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.NAME  &&  gramps.isNode())  {	  if(gramps.isNode()    &&    gramps.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  	13	None	replace
90	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getType()  ==  Token.VAR)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getType()  ==  Token.VAR)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getType()  ==  Token.VAR)  {	  if    (gramps.isCall()    ||    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getType()  ==  Token.STRING)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getType()  ==  Token.STRING)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getType()  ==  Token.STRING)  {	  if    (gramps.isCall()    ||    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.VAR  &&  gramps.isSimpleOp()  &&  parent  ==  gramps.getFirstChild())  {	  if    (gramps.isSimpleOp()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
93	[BUG]  [BUGGY]  if(gramps.isSimpleOp()  &&  gramps.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isSimpleOp()  &&  gramps.getFirstChild()  ==  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isSimpleOp()  &&  gramps.getFirstChild()  ==  parent)  {	  if    (gramps.isSimpleOp()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
94	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps!=  parent.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps!=  parent.getLastChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps!=  parent.getLastChild())  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
95	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()!=  parent)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()!=  parent)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getLastChild()!=  parent)  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
96	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getLastChild()!=  null)  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getLastChild()!=  null)  {	  if    (gramps.isCall()    &&    parent!=    gramps.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
97	[BUG]  [BUGGY]  n  =  gramps.getParent();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  n  =  gramps.getParent();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	n  =  gramps.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
98	[BUG]  [BUGGY]  n  =  gramps.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  n  =  gramps.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	n  =  gramps.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
99	[BUG]  [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isCall()  ||  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isCall()  ||  gramps.getFirstChild()  ==  parent.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
100	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.CALL  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.CALL  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.CALL  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
101	[BUG]  [BUGGY]  if(gramps.isNode()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isNode()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isNode()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
102	[BUG]  [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isCall()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.getType()  ==  Token.VAR  &&  gramps.isCall()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.getType()  ==  Token.VAR  &&  gramps.isCall()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
103	[BUG]  [BUGGY]  if(gramps.isAssignmentOp()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if(gramps.isAssignmentOp()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if(gramps.isAssignmentOp()  &&  gramps.getFirstChild()  ==  parent.getFirstChild())  {	  if    (gramps.isCall()    &&    parent.getFirstChild()    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  	2	None	replace
104	[BUG]  [BUGGY]  if  (gramps.isConstructor()  ||  gramps  ==  parent.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  There  should  be  one  warning    [CONTEXT]    if  (parent  ==  null)  {  return;  }    if  (parent.getType()  ==  Token.COMMA)  {  Node  gramps  =  parent.getParent();    [BUGGY]  if  (gramps.isConstructor()  ||  gramps  ==  parent.getFirstChild())  {  [BUGGY]    if  (n  ==  parent.getFirstChild()  &&  parent.getChildCount()  ==  2  &&  n.getNext().isName()  &&     "eval   ".equals(n.getNext().getString()))  {  return;  }  }    if  (n  ==  parent.getLastChild())  {  for  (Node  an  :  parent.getAncestors())  {  int  ancestorType  =  an.getType();  [CLASS]  CheckSideEffects  StripProtection  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  isResultUsed  isSimpleOp  protectSideEffectFreeCode  NodeTraversal  t  DiagnosticType  USELESS_CODE_ERROR  CheckLevel  level  Node  an  gramps  n  parent  List  problemNodes  String  PROTECTOR_FN  msg  int  ancestorType  	projects/Closure22/src/com/google/javascript/jscomp/CheckSideEffects.java	0.5773502691896258	103	103	1	replace	if  (gramps.isConstructor()  ||  gramps  ==  parent.getFirstChild())  {	  if    (gramps.isConstructor()    &&    parent    ==    gramps.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
